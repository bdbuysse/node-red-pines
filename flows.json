[
    {
        "id": "ec6d74c6.c4cc58",
        "type": "tab",
        "label": "TTN",
        "disabled": true,
        "info": ""
    },
    {
        "id": "d75475bd.f0fa48",
        "type": "tab",
        "label": "InfluxDB",
        "disabled": false,
        "info": ""
    },
    {
        "id": "524fa936.044d78",
        "type": "tab",
        "label": "MongoDB",
        "disabled": true,
        "info": ""
    },
    {
        "id": "2500c006.91d75",
        "type": "tab",
        "label": "Dark Sky",
        "disabled": true,
        "info": ""
    },
    {
        "id": "1600a05a.fc816",
        "type": "tab",
        "label": "Twillo",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1fb0f65a.416e0a",
        "type": "tab",
        "label": "Alerts",
        "disabled": true,
        "info": ""
    },
    {
        "id": "dd7a06b0.e5b738",
        "type": "tab",
        "label": "UX",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e25331a6.a6639",
        "type": "tab",
        "label": "LoRa Codec",
        "disabled": false,
        "info": ""
    },
    {
        "id": "171b21f.9e6efde",
        "type": "tab",
        "label": "RainMachine",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6cb4651f.c079fc",
        "type": "tab",
        "label": "Dynamic DNS",
        "disabled": true,
        "info": ""
    },
    {
        "id": "7a63b42f.d247ec",
        "type": "tab",
        "label": "Ecobee3",
        "disabled": true,
        "info": ""
    },
    {
        "id": "f0a81a8c.fdbd88",
        "type": "tab",
        "label": "OAUTH2",
        "disabled": true,
        "info": ""
    },
    {
        "id": "d785d216.3d84",
        "type": "tab",
        "label": "WIP",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4576b216.7dd43c",
        "type": "tab",
        "label": "Grafana",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b841d93f.1fc228",
        "type": "ui_group",
        "name": "Wind Speed",
        "tab": "355c6684.d14cea",
        "order": 7,
        "disp": true,
        "width": "6"
    },
    {
        "id": "61d8381c.d631b8",
        "type": "ui_group",
        "name": "OAT",
        "tab": "355c6684.d14cea",
        "order": 6,
        "disp": true,
        "width": "6"
    },
    {
        "id": "1687319f.26f19e",
        "type": "ui_group",
        "name": "Storms",
        "tab": "355c6684.d14cea",
        "order": 8,
        "disp": true,
        "width": "6"
    },
    {
        "id": "355c6684.d14cea",
        "type": "ui_tab",
        "name": "Home Control",
        "icon": "dashboard",
        "order": 2
    },
    {
        "id": "d211c5e.e794238",
        "type": "mqtt-broker",
        "name": "pines",
        "broker": "10.10.10.10",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b03b267.f2a54d8",
        "type": "twilio-api",
        "name": "",
        "sid": "ACb5560ae67b6de2b941d932b088d01798",
        "from": "6127127904"
    },
    {
        "id": "b5099f66.a15af",
        "type": "mqtt-broker",
        "name": "zwave",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "200e6d3c.e82fb2",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "15",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "b33a2c4c.c7ef",
        "type": "mongodb",
        "hostname": "10.0.0.10",
        "port": "27017",
        "db": "ecobee",
        "name": "Ecobee3"
    },
    {
        "id": "2701b769.447d98",
        "type": "ui_group",
        "name": "HVAC",
        "tab": "e42140e0.51026",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "e42140e0.51026",
        "type": "ui_tab",
        "name": "Home Control",
        "icon": "dashboard",
        "order": 3
    },
    {
        "id": "c1615804.c23ae8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "edgewoods",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "f8ce23bb.23857",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "zwave",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "9fd8514d.4e93e",
        "type": "influxdb",
        "z": "d75475bd.f0fa48",
        "hostname": "10.0.0.10",
        "port": "8086",
        "database": "aTimeSeries",
        "name": "aTimeSeries",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "5059026f.4e2d5c",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "ecobee",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "da295c2b.76a85",
        "type": "influxdb",
        "hostname": "10.0.0.10",
        "port": "8086",
        "protocol": "http",
        "database": "mbox",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "705e49f4.ec4728",
        "type": "mongodb",
        "hostname": "mongodb",
        "connectOptions": "",
        "port": "27017",
        "db": "sensors",
        "name": ""
    },
    {
        "id": "6f408d8b.005a54",
        "type": "ttn app",
        "appId": "edgewood-radiobridge",
        "accessKey": "ttn-account-v2.fh8idfouyyguOc6h8hmb3UbzkoWNql8Nwa69HD_QNBw",
        "discovery": "discovery.thethingsnetwork.org:1900"
    },
    {
        "id": "84c6ff38.2ba2b",
        "type": "ui_tab",
        "name": "Input",
        "icon": "ux",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9d46f6ed.e49c68",
        "type": "ui_group",
        "name": "Default",
        "tab": "84c6ff38.2ba2b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f21111d7.3018c",
        "type": "tls-config",
        "name": "defaultTLS",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "312f7cbd.c028a4",
        "type": "influxdb",
        "hostname": "10.0.0.10",
        "port": "8086",
        "protocol": "http",
        "database": "darksky",
        "name": "",
        "usetls": false,
        "tls": "f21111d7.3018c",
        "influxdbVersion": "1.x"
    },
    {
        "id": "1adb25b4.af776a",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "LoRaWAN",
        "name": "",
        "usetls": false,
        "tls": "f21111d7.3018c",
        "influxdbVersion": "1.x"
    },
    {
        "id": "d15f51f5.84dab",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "3208e3f3.e7db9c",
        "type": "influxdb",
        "hostname": "10.0.0.10",
        "port": "8086",
        "protocol": "http",
        "database": "fail2ban",
        "name": "",
        "usetls": false,
        "tls": "d15f51f5.84dab",
        "influxdbVersion": "1.x"
    },
    {
        "id": "8be518d1.d9d1c8",
        "type": "ttn app",
        "appId": "edgewood-multitech",
        "accessKey": "ttn-account-v2.XqKqGX_dzoujfM1MtSZy1OuILWDumeL5oz649VEy_0A",
        "discovery": "discovery.thethingsnetwork.org:1900"
    },
    {
        "id": "9cc4d04a.b62aa",
        "type": "ui_tab",
        "name": "LoRa",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7f2ebed0.9fcd3",
        "type": "ui_group",
        "name": "GPS Survey",
        "tab": "9cc4d04a.b62aa",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "87d11ec8.ee325",
        "type": "ui_group",
        "name": "LoRa Demo",
        "tab": "9cc4d04a.b62aa",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "db11d248.010a3",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "weather",
        "name": "",
        "usetls": false,
        "tls": "d15f51f5.84dab",
        "influxdbVersion": "1.x"
    },
    {
        "id": "e199e3e1.ec71c",
        "type": "ttn app",
        "appId": "nanothings",
        "accessKey": "ttn-account-v2.bz5YMuflmGbV_RrPLeA78vHsZxLgmSPJSTB8EjfSRaM",
        "discovery": "discovery.thethingsnetwork.org:1900"
    },
    {
        "id": "7dd514df.0a14fc",
        "type": "ttn app",
        "appId": "edgewood-sensecap",
        "accessKey": "ttn-account-v2.k2r6VMBf02helVYk0u0PEDS_KQCQcVDpg2_zk_79fko",
        "discovery": "discovery.thethingsnetwork.org:1900"
    },
    {
        "id": "9e48d781.e8e798",
        "type": "ttn app",
        "appId": "edgewood-dragino",
        "accessKey": "ttn-account-v2.K_GzJbIb3bgzCa9bJp8qew1U85yr8voZjy_boifNBQQ",
        "discovery": "discovery.thethingsnetwork.org:1900"
    },
    {
        "id": "5010ad6c.df5ca4",
        "type": "server",
        "name": "Home Assistant",
        "version": 1,
        "legacy": false,
        "addon": false,
        "rejectUnauthorizedCerts": false,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true
    },
    {
        "id": "e81e7427.232dd8",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "homeassistant",
        "name": "",
        "usetls": false,
        "tls": "d15f51f5.84dab",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "87dccc93.0a5e1",
        "type": "mqtt-broker",
        "name": "gcp",
        "broker": "pines.edgewoods.net",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "eb7a216f.8a0d4",
        "type": "http request",
        "z": "2500c006.91d75",
        "name": "weatherapi",
        "method": "use",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 510,
        "y": 200,
        "wires": [
            [
                "32022405.d9dadc",
                "85175233.74ec2",
                "8a1b089d.50d3c8",
                "c9f8b959.a22ee8",
                "153bb17.b0aac4f",
                "96283cb6.f2955"
            ]
        ]
    },
    {
        "id": "9eefeb5d.691108",
        "type": "function",
        "z": "2500c006.91d75",
        "name": "Weather - Home",
        "func": "context.global.weatherapitoken=\"8957af1085b3c3adcbd3e35c7c41d0dc\"\ncontext.global.weatherlatlong=\"45.141574, -93.374866\"\nif (context.global.weatherapi!==\"\")\n{\n var newMsg={\n \"url\":\"https://api.darksky.net/forecast/\"+context.global.weatherapitoken+\"/\"+context.global.weatherlatlong+\"?exclude=alerts,flags\",\n \"method\": \"GET\",\n headers: {\n \"Content-Type\":\"application/json;charset=UTF-8\",\n }\n };\n}\nelse {\n var newMsg={\n \"url\":\"127.0.0.1\",\n \"method\":\"GET\"\n }\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 327.99999237060547,
        "y": 200.4443483352661,
        "wires": [
            [
                "eb7a216f.8a0d4"
            ]
        ]
    },
    {
        "id": "ae6839b8.4d2a98",
        "type": "inject",
        "z": "2500c006.91d75",
        "name": "Every Hour",
        "props": [
            {
                "p": "payload",
                "v": "45.1416667,092.3747222",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "weatherapi",
                "vt": "string"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "topic": "weatherapi",
        "payload": "45.1416667,092.3747222",
        "payloadType": "str",
        "x": 138.55555725097656,
        "y": 201.55563640594482,
        "wires": [
            [
                "9eefeb5d.691108"
            ]
        ]
    },
    {
        "id": "32022405.d9dadc",
        "type": "function",
        "z": "2500c006.91d75",
        "name": "Weather Icons",
        "func": "summaryicon = msg.payload.currently.icon;\nminuteicon = msg.payload.minutely.icon;\nhouricon = msg.payload.hourly.icon;\ndailyicon = msg.payload.daily.icon;\n\n//Summary Icons\n\nvar summaryMSG={ \n    payload: summaryicon\n};\nvar minuteMSG={\n    payload: minuteicon\n};\nvar hourMSG={\n    payload: houricon\n};\nvar dailyMSG={\n    payload: dailyicon\n};\n\nreturn [ [ summaryMSG, minuteMSG, hourMSG, dailyMSG ] ];\n\n",
        "outputs": "1",
        "noerr": 0,
        "x": 768.5556030273438,
        "y": 476.0000457763672,
        "wires": [
            []
        ]
    },
    {
        "id": "85175233.74ec2",
        "type": "function",
        "z": "2500c006.91d75",
        "name": "Weather Summary",
        "func": "summary = msg.payload.currently.summary;\nminute = msg.payload.minutely.summary;\nhour = msg.payload.hourly.summary;\ndaily = msg.payload.daily.summary;\n\n//Descriptions\n\n\nvar weatherMSG={ \n    payload: {'Currently': + summary}\n};\n\nreturn weatherMSG;\n\n\n/*\n    payload: {'Currently': +summary, 'Hourly': +hour, 'Daily': +daily}\n\n\nvar summarydescMSG={ \n    payload: summary\n};\n\nvar minutedescMSG={\n    payload: minute\n};\nvar hourdescMSG={\n    payload: hour\n};\nvar dailydescMSG={\n    payload: daily\n};\n\nreturn [ [summarydescMSG, minutedescMSG, hourdescMSG, dailydescMSG ] ];\n*/\n",
        "outputs": 1,
        "noerr": 0,
        "x": 778.5556030273438,
        "y": 523.0000457763672,
        "wires": [
            []
        ]
    },
    {
        "id": "41614fed.a7639",
        "type": "comment",
        "z": "2500c006.91d75",
        "name": "Broadcast Hourly Weather Status",
        "info": "",
        "x": 172.72227478027344,
        "y": 124.3333797454834,
        "wires": []
    },
    {
        "id": "8a1b089d.50d3c8",
        "type": "function",
        "z": "2500c006.91d75",
        "name": "Sunset",
        "func": "if (msg.payload.currently.summary.length >1){ \nvar temp = msg.payload.currently.temperature;\nvar feelslike = msg.payload.currently.apparentTemperature;\nvar windspeed = msg.payload.currently.windSpeed;\nvar precipProbability = msg.payload.currently.precipProbability;\nvar precipType = msg.payload.currently.precipType;\nvar summary = msg.payload.currently.summary;\nvar sunset = msg.payload.daily.data.sunsetTime;\nvar dailyicon = msg.payload.daily.data;\nmsg.payload = {};\nmsg.payload.temp= temp;\nmsg.payload.feelslike = feelslike;\nmsg.payload.sunset = sunset;\n\nmsg2 = {};\n    msg2.payload = (\"Fuck\");\n\nreturn [msg, msg2];\n}\n\n/*\n\nif (msg.payload.currently.summary.length >1){ \n    msg.payload ={\"weather\":[{\"id\": \"summary\", \"value\": summary}]};\n    return msg;\n}\nreturn \"bad.\";\n\n\n\n\n//Descriptions\nvar tempMSG={ \n    payload: temp\n};\nvar feelslikeMSG={\n    payload: feelslike\n};\nvar windspeedMSG={\n    payload: windspeed\n};\nvar precipProbabilityMSG={\n    payload: precipProbability\n};\nvar precipTypeMSG={\n    payload: precipType\n};\n\n\nreturn [ [tempMSG, feelslikeMSG, windspeedMSG, precipProbabilityMSG, precipTypeMSG ] ];\n*/\n",
        "outputs": 1,
        "noerr": 0,
        "x": 748.5556030273438,
        "y": 563.0000457763672,
        "wires": [
            []
        ]
    },
    {
        "id": "4d646d0c.ef3b54",
        "type": "debug",
        "z": "2500c006.91d75",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 899.9841842651367,
        "y": 116.00004529953003,
        "wires": []
    },
    {
        "id": "cb373c18.c53d",
        "type": "debug",
        "z": "2500c006.91d75",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 910,
        "y": 420,
        "wires": []
    },
    {
        "id": "5eb0c3b2.68f2ac",
        "type": "ui_chart",
        "z": "2500c006.91d75",
        "name": "Wind Speed",
        "group": "b841d93f.1fc228",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Wind Speed",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "500",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "outputs": 2,
        "x": 930,
        "y": 300,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "796199da.52f7a8",
        "type": "ui_chart",
        "z": "2500c006.91d75",
        "name": "OAT Chart",
        "group": "61d8381c.d631b8",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": "7",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "outputs": 2,
        "x": 930,
        "y": 260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "26bd2003.b2161",
        "type": "ui_text",
        "z": "2500c006.91d75",
        "group": "61d8381c.d631b8",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "OAT Text",
        "label": "Current OAT",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 920,
        "y": 220,
        "wires": []
    },
    {
        "id": "43f3b839.1a6848",
        "type": "ui_text",
        "z": "2500c006.91d75",
        "group": "b841d93f.1fc228",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "OAT Text",
        "label": "Current Wind Speed",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 920,
        "y": 340,
        "wires": []
    },
    {
        "id": "c9f8b959.a22ee8",
        "type": "debug",
        "z": "2500c006.91d75",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 710,
        "y": 280,
        "wires": []
    },
    {
        "id": "153bb17.b0aac4f",
        "type": "function",
        "z": "2500c006.91d75",
        "name": "",
        "func": "//BDB Code to consume DarkSky Weather Reports\ntime = msg.payload.currently.time;\nsummary = msg.payload.currently.summary;\nicon = msg.payload.currently.icon;\nnearestStormDistance = msg.payload.currently.nearestStormDistance;\nnearestStormBearing = msg.payload.currently.nearestStormBearing;\nprecipIntensity = msg.payload.currently.precipIntensity;\nprecipProbability = msg.payload.currently.precipProbability;\ntemperature = msg.payload.currently.temperature;\napparentTemperature = msg.payload.currently.apparentTemperature;\ndewPoint = msg.payload.currently.dewPoint;\nhumidity = msg.payload.currently.humidity;\npressure = msg.payload.currently.pressure;\nwindSpeed = msg.payload.currently.windSpeed;\nwindGust = msg.payload.currently.windGust;\nwindBearing = msg.payload.currently.windBearing;\ncloudCover = msg.payload.currently.cloudCover;\nuvIndex = msg.payload.currently.uvIndex;\nvisibility = msg.payload.currently.visibility;\nozone = msg.payload.currently.ozone;\nsunSet = msg.payload.daily.data.sunsetTime;\n\n\n//Time Stamp Formatting\nvar now     = new Date(); \nvar year    = now.getFullYear();\nvar month   = now.getMonth()+1; \nvar day     = now.getDate();\nvar hour    = now.getHours();\nvar minute  = now.getMinutes();\nvar second  = now.getSeconds(); \nif(month.toString().length == 1) {\nvar month = '0'+month;\n}\nif(day.toString().length == 1) {\nvar day = '0'+day;\n}   \nif(hour.toString().length == 1) {\nvar hour = '0'+hour;\n}\nif(minute.toString().length == 1) {\nvar minute = '0'+minute;\n}\nif(second.toString().length == 1) {\nvar second = '0'+second;\n}   \ntimestamp = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\nvar darkSkyMsg = {\n    topic: \"darkSky\", \n    payload: { \n    summary: summary, \n    icon: icon, \n    nearestStormDistance: nearestStormDistance, \n    nearestStormBearing: nearestStormBearing,\n    precipIntensity: precipIntensity,\n    temperature: temperature,\n    apparentTemperature: apparentTemperature,\n    dewPoint: dewPoint,\n    humidity: humidity,\n    pressure: pressure,\n    windSpeed: windSpeed,\n    windGust: windGust,\n    windBearing: windBearing,\n    cloudCover: cloudCover,\n    sunSet: sunSet,\n    uvIndex: uvIndex,\n    visibility: visibility,\n    ozone: ozone,\n    time: time,\n    timestamp: timestamp}\n};\n\nvar tempMsg = {\n    topic: \"darkSky/temp\",\n    payload: temperature,\n    temperature: temperature,\n    apparentTemperature: apparentTemperature,\n    dewPoint: dewPoint,\n    humidity: humidity,\n    timestamp: timestamp\n};\n\nvar windMsg = {\n    topic: \"darkSky/wind\",\n    payload: windSpeed,\n    windSpeed: windSpeed,\n    windGust: windGust,\n    windBearing: windBearing,\n    timestamp: timestamp\n};\n\nvar stormMsg = {\n    topic: \"darkSky/storm\",\n    payload: nearestStormDistance,\n    nearestStormDistance: nearestStormDistance, \n    nearestStormBearing: nearestStormBearing,\n    precipIntensity: precipIntensity,\n    cloudCover: cloudCover,\n    //visibility: visbility,\n};\n\nreturn [ [darkSkyMsg], [tempMsg], [windMsg], [stormMsg]];\n",
        "outputs": "4",
        "noerr": 0,
        "x": 720,
        "y": 200,
        "wires": [
            [
                "4d646d0c.ef3b54",
                "fcdc5308.3a81b"
            ],
            [
                "796199da.52f7a8",
                "26bd2003.b2161"
            ],
            [
                "5eb0c3b2.68f2ac",
                "43f3b839.1a6848"
            ],
            [
                "cb373c18.c53d",
                "79947b63.04a674"
            ]
        ]
    },
    {
        "id": "79947b63.04a674",
        "type": "ui_text",
        "z": "2500c006.91d75",
        "group": "1687319f.26f19e",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "nearestStormDistance",
        "label": "Storm Distance",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 960,
        "y": 380,
        "wires": []
    },
    {
        "id": "fcdc5308.3a81b",
        "type": "mqtt out",
        "z": "2500c006.91d75",
        "name": "",
        "topic": "darksky",
        "qos": "",
        "retain": "",
        "broker": "d211c5e.e794238",
        "x": 920,
        "y": 40,
        "wires": []
    },
    {
        "id": "d89c6ebb.cf6c2",
        "type": "twilio out",
        "z": "1600a05a.fc816",
        "twilio": "b03b267.f2a54d8",
        "twilioType": "sms",
        "url": "",
        "number": "6124142744",
        "name": "",
        "x": 270,
        "y": 140,
        "wires": []
    },
    {
        "id": "d1ee053.b080ff8",
        "type": "inject",
        "z": "1600a05a.fc816",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "test...1234",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test...1234",
        "payloadType": "str",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "d89c6ebb.cf6c2"
            ]
        ]
    },
    {
        "id": "23a3b0a3.d37df",
        "type": "debug",
        "z": "1fb0f65a.416e0a",
        "name": "zwave/update/#",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 600,
        "y": 80,
        "wires": []
    },
    {
        "id": "e09faf7a.14f1b",
        "type": "json",
        "z": "1fb0f65a.416e0a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "b9e56fcc.e2eac"
            ]
        ]
    },
    {
        "id": "981bccb6.b749c",
        "type": "inject",
        "z": "7a63b42f.d247ec",
        "name": "Refresh Thermostat Data",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "Refresh Thermostat Variables",
        "payloadType": "str",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "dcc922bf.204d2"
            ]
        ]
    },
    {
        "id": "2b1176a7.ff409a",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Get ecobeePin Token",
        "func": "// Insert your Ecobee API Key into the following variable:\ncontext.global.EcobeeClientID=\"bygh7q8PMFCM9FFTY3ED0mE7MdAG2yYp\";\n// Insert your Ecobee API key into the above variable.\n\nvar newMsg ={\n \"url\":\"https://api.ecobee.com/authorize?response_type=ecobeePin&client_id=\"+context.global.EcobeeClientID+\"&scope=smartWrite\",\n \"method\": \"GET\",\n headers: {\n }\n};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 298.3690643310547,
        "y": 126.21428489685059,
        "wires": [
            [
                "ac451951.a0f448"
            ]
        ]
    },
    {
        "id": "2ff2f13a.c0324e",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "payload",
        "x": 878.3690032958984,
        "y": 125.96428489685059,
        "wires": []
    },
    {
        "id": "ac451951.a0f448",
        "type": "http request",
        "z": "7a63b42f.d247ec",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "x": 505.3690643310547,
        "y": 126.46428489685059,
        "wires": [
            [
                "8a8b6606.9a10c8"
            ]
        ]
    },
    {
        "id": "dcc922bf.204d2",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Get Thermostats",
        "func": "rtoken = global.get('ecobeeRefToken');\natoken = global.get('ecobeeAccToken');\n\nif (rtoken!==\"\")\n\n//if (context.global.EcobeeRefreshtoken!==\"\")\n{\n var newMsg={\n \"url\":\"https://api.ecobee.com/1/thermostat?format=json&body=%7B%22selection%22%3A%7B%22includeAlerts%22%3A%22false%22%2C%22selectionType%22%3A%22registered%22%2C%22selectionMatch%22%3A%22%22%2C%22includeEvents%22%3A%22false%22%2C%22includeSettings%22%3A%22false%22%2C%22includeRuntime%22%3A%22true%22%2C%22includeSensors%22%3A%22true%22%7D%7D\",\n \"method\": \"GET\",\n headers: {\n \"Content-Type\":\"application/json;charset=UTF-8\",\n //\"Authorization\":\"Bearer \"+context.global.EcobeeAccessToken,\n \"Authorization\":\"Bearer \"+atoken,\n }\n };\n}\nelse {\n var newMsg={\n \"url\":\"127.0.0.1\",\n \"method\":\"GET\"\n }\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 640,
        "wires": [
            [
                "8dc157fb.0ce768"
            ]
        ]
    },
    {
        "id": "8dc157fb.0ce768",
        "type": "http request",
        "z": "7a63b42f.d247ec",
        "name": "Get Thermostat Request",
        "method": "use",
        "ret": "obj",
        "url": "",
        "x": 710,
        "y": 640,
        "wires": [
            [
                "e7599dce.7be2b",
                "13b4c363.90a4ad"
            ]
        ]
    },
    {
        "id": "19505091.96ca8f",
        "type": "inject",
        "z": "7a63b42f.d247ec",
        "name": "Refresh token every 30 minutes",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 190,
        "y": 400,
        "wires": [
            [
                "1f38d718.33fb89"
            ]
        ]
    },
    {
        "id": "1f38d718.33fb89",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Refresh Token",
        "func": "\n//context.global.EcobeeClientID=\"bygh7q8PMFCM9FFTY3ED0mE7MdAG2yYp\";\nglobal.set('EcobeeClientID',\"bygh7q8PMFCM9FFTY3ED0mE7MdAG2yYp\");\n\nvar ecobeeid = \"bygh7q8PMFCM9FFTY3ED0mE7MdAG2yYp\";\nvar reftoken = global.get(\"ecobeeRefToken\");\nvar acctoken = global.get(\"ecobeeAccToken\");\n\n\n\n//context.global.EcobeeRefreshToken=\"\";\nvar newMsg ={\n// \"url\":\"https://api.ecobee.com/token?grant_type=refresh_token&code=\"+context.global.EcobeeRefreshToken+\"&client_id=\"+context.global.EcobeeClientID+\"\",\n  \"url\":\"https://api.ecobee.com/token?grant_type=refresh_token&code=\"+reftoken+\"&client_id=\"+ecobeeid+\"\",\n \"method\": \"POST\",\n headers: {\n }\n};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 400,
        "wires": [
            [
                "c3240e.567e4bf"
            ]
        ]
    },
    {
        "id": "c3240e.567e4bf",
        "type": "http request",
        "z": "7a63b42f.d247ec",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "x": 610,
        "y": 400,
        "wires": [
            [
                "624ff5a.869d50c",
                "5828fa46.970b04"
            ]
        ]
    },
    {
        "id": "90cb9b1e.d00458",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Define Access and Refresh Token vars",
        "func": "context.global.EcobeeAccessToken = msg.payload.access_token;\ncontext.global.EcobeeRefreshToken = msg.payload.refresh_token;\n\nglobal.set('ecobeeRefToken', msg.payload.refresh_token);\nglobal.set('ecobeeAccToken', msg.payload.access_token);\nglobal.set('ecobeeExpiresIn', msg.payload.expires_in);\n\nmsg = { payload:{\n access_token:context.global.EcobeeAccessToken,\n refresh_token:context.global.EcobeeRefreshToken,\n token_expires: msg.payload.expires_in,\n }\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "750b89c8.630688"
            ]
        ]
    },
    {
        "id": "750b89c8.630688",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1270,
        "y": 420,
        "wires": []
    },
    {
        "id": "b5be62f8.692a2",
        "type": "comment",
        "z": "7a63b42f.d247ec",
        "name": "Step #3 - Refresh Token Flow a few times for good measure.",
        "info": "This flow will refresh your token every time the input button is pressed.\n\nGlobal variables set -- EcobeeAccessToken and EcobeeRefreshToken",
        "x": 254.5357208251953,
        "y": 352.49207496643066,
        "wires": []
    },
    {
        "id": "e07de841.b04828",
        "type": "comment",
        "z": "7a63b42f.d247ec",
        "name": "Step #4 - Get Thermostat Data",
        "info": "Get thermostat data",
        "x": 172.6388931274414,
        "y": 603.0277919769287,
        "wires": []
    },
    {
        "id": "4e2d1238.8f378c",
        "type": "http response",
        "z": "7a63b42f.d247ec",
        "name": "",
        "x": 478.75,
        "y": 1091.4444217681885,
        "wires": []
    },
    {
        "id": "36dd4d31.e4e3a2",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Throw Ecobee Data",
        "func": "if(msg.req.headers.authorization && msg.req.headers.authorization==\"Bearer \"+context.global.FreeboardAuthTocken){\n msg.payload.thermostats=context.global.EcobeeThermostats;\n msg.payload.sensors=context.global.EcobeeSensors;\n msg.res.statusCode=\"200\";\nreturn msg;\n}\nelse\n{\n //msg.payload=\"Not Authorized\";\n msg.res.send(\"403\",\"Forbidden\");\n return;\n}\n\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 307.75,
        "y": 1091.4444217681885,
        "wires": [
            [
                "4e2d1238.8f378c"
            ]
        ]
    },
    {
        "id": "6fc3c42e.f78aec",
        "type": "http in",
        "z": "7a63b42f.d247ec",
        "name": "Get Ecobee Data",
        "url": "/getEcobeeData",
        "method": "get",
        "x": 112.75,
        "y": 1091.4444217681885,
        "wires": [
            [
                "36dd4d31.e4e3a2"
            ]
        ]
    },
    {
        "id": "3516b8d8.db23e8",
        "type": "inject",
        "z": "7a63b42f.d247ec",
        "name": "Step 1",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "none",
        "x": 123.36906051635742,
        "y": 125.71428489685059,
        "wires": [
            [
                "2b1176a7.ff409a"
            ]
        ]
    },
    {
        "id": "2bafd8e3.c96308",
        "type": "comment",
        "z": "7a63b42f.d247ec",
        "name": "Step #1 - Requesting the 4-digit ecobeePin - Log in to Ecobee.com and go to your \"My Apps\" before clicking the Inject node.",
        "info": "The ecobeePin must be entered into your \"My Apps\" in Ecobee.com within 10 minutes.",
        "x": 465.3690643310547,
        "y": 55.71428680419922,
        "wires": []
    },
    {
        "id": "a1b75b7e.7ab0c8",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Get Authorization Token",
        "func": "var newMsg ={\n \"url\":\"https://api.ecobee.com/token?grant_type=ecobeePin&code=\"+context.global.EcobeeAccessToken+\"&client_id=\"+context.global.EcobeeClientID,\n \"method\": \"POST\",\n headers: {\n }\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320.3690643310547,
        "y": 236.7142848968506,
        "wires": [
            [
                "5a9fd46e.17ef9c"
            ]
        ]
    },
    {
        "id": "cd91fe8f.44de6",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "5a9fd46e.17ef9c",
        "type": "http request",
        "z": "7a63b42f.d247ec",
        "name": "",
        "method": "use",
        "ret": "obj",
        "url": "",
        "x": 522.3690338134766,
        "y": 236.9642848968506,
        "wires": [
            [
                "cd91fe8f.44de6",
                "82eb16d4.68dc78"
            ]
        ]
    },
    {
        "id": "d306b888.3ead38",
        "type": "comment",
        "z": "7a63b42f.d247ec",
        "name": "Step #2 - Requesting the first access token - you must run Step 2 within 10 minutes of running Step 1.",
        "info": "Now that the app has been added to your \"My Apps\" - we need to request our first access token.",
        "x": 389.59129333496094,
        "y": 201.214280128479,
        "wires": []
    },
    {
        "id": "8a8b6606.9a10c8",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Save access code",
        "func": "context.global.EcobeeAccessToken = msg.payload.code;\nvar msg = {\"payload\":\"Ecobee Pin: \"+msg.payload.ecobeePin};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 694.3690032958984,
        "y": 125.71428489685059,
        "wires": [
            [
                "2ff2f13a.c0324e"
            ]
        ]
    },
    {
        "id": "b17a93d2.3d48e",
        "type": "file",
        "z": "7a63b42f.d247ec",
        "name": "EcobeeTokens",
        "filename": "/home/bdbuysse/ecobee3/token",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "x": 1680,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "bb091502.36f0e8",
        "type": "file in",
        "z": "7a63b42f.d247ec",
        "name": "EcobeeTokens",
        "filename": "/home/bdbuysse/ecobee3/token",
        "format": "utf8",
        "x": 281.3055648803711,
        "y": 1176.4444026947021,
        "wires": [
            [
                "54e0c61d.ae2078"
            ]
        ]
    },
    {
        "id": "6f98c1a.0d2624",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": false,
        "console": "true",
        "complete": "payload",
        "x": 887.3055038452148,
        "y": 1176.1110591888428,
        "wires": []
    },
    {
        "id": "c5bfbcf0.d9366",
        "type": "inject",
        "z": "7a63b42f.d247ec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 109.3055648803711,
        "y": 1176.4444026947021,
        "wires": [
            [
                "bb091502.36f0e8"
            ]
        ]
    },
    {
        "id": "afc90cd9.6ef23",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Define Access and Refresh Tokens",
        "func": "if (msg.payload.refresh_token!==null)\n{\n context.global.EcobeeRefreshToken = msg.payload.refresh_token;\n node.warn(\"Refresh Token as Global Context: \"+context.global.EcobeeRefreshToken);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 650.3055038452148,
        "y": 1176.4444026947021,
        "wires": [
            [
                "6f98c1a.0d2624"
            ]
        ]
    },
    {
        "id": "44d78c5d.fd3b34",
        "type": "file",
        "z": "7a63b42f.d247ec",
        "name": "EcobeeTokens",
        "filename": "/home/bdbuysse/ecobee3/token",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "x": 1680,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "82eb16d4.68dc78",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Define Access and Refresh Tokens",
        "func": "//context.global.EcobeeRefreshToken = msg.payload.refresh_token;\n//context.global.EcoBeeAccessToken = msg.payload.access_token;\n\nvar ecobeeAccToken = msg.payload.access_token;\nvar ecobeeRefToken = msg.payload.refresh_token;\nvar ecobeeExpiresIn = msg.payload.expires_in\n\nglobal.set('ecobeeAccToken', msg.payload.access_token);\nglobal.set('ecobeeRefToken', msg.payload.refresh_token);\nglobal.set('ecobeeExpiresIn', msg.payload.expires_in);\n\nmsg = { \n    payload: {\n        ecobeeAccToken: ecobeeAccToken,\n        ecobeeRefToken: ecobeeRefToken,\n        ecobeeExpiresIn: ecobeeExpiresIn,\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 778.3690643310547,
        "y": 236.7142848968506,
        "wires": [
            [
                "2809dddd.423ef2"
            ]
        ]
    },
    {
        "id": "2809dddd.423ef2",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1009.3690032958984,
        "y": 236.7142848968506,
        "wires": []
    },
    {
        "id": "624ff5a.869d50c",
        "type": "switch",
        "z": "7a63b42f.d247ec",
        "name": "Refresh Token",
        "property": "payload.refresh_token",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "outputs": 2,
        "x": 780,
        "y": 400,
        "wires": [
            [
                "35176f75.7ae7f"
            ],
            [
                "90cb9b1e.d00458"
            ]
        ]
    },
    {
        "id": "ecc20b85.f1ba18",
        "type": "comment",
        "z": "7a63b42f.d247ec",
        "name": "This flow will extract the Access and Refresh tokens from the log file and put them in the global context variables.",
        "info": "",
        "x": 414.9721908569336,
        "y": 1140.1110591888428,
        "wires": []
    },
    {
        "id": "81c17ad6.ce3508",
        "type": "comment",
        "z": "7a63b42f.d247ec",
        "name": "You will have 2 minutes to enter the 4-digit pin into Ecobee.com and authorize the application. (Ecobee disgards the 4-pin code after 10 minutes!)",
        "info": "",
        "x": 531.6190643310547,
        "y": 90.71428489685059,
        "wires": []
    },
    {
        "id": "dba0116d.6b0d2",
        "type": "comment",
        "z": "7a63b42f.d247ec",
        "name": "Display Ecobee Data to Freeboard",
        "info": "",
        "x": 165,
        "y": 1054.4444217681885,
        "wires": []
    },
    {
        "id": "54e0c61d.ae2078",
        "type": "json",
        "z": "7a63b42f.d247ec",
        "name": "",
        "x": 433.5555648803711,
        "y": 1176.4444026947021,
        "wires": [
            [
                "afc90cd9.6ef23"
            ]
        ]
    },
    {
        "id": "35176f75.7ae7f",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Define Access and Refresh Tokens",
        "func": "if (msg.payload.refresh_token!==null)\n{\n context.global.EcobeeRefreshToken = msg.payload.refresh_token;\n global.set('ecobeeRefToken', msg.payload.refresh_token)\n node.warn(\"Refresh Token as Global Context: \"+context.global.EcobeeRefreshToken);\n}\n\nnode.log(\"ecobee token refresh failed: \"+msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "bebc40a0.57af4"
            ]
        ]
    },
    {
        "id": "357f6ca9.dc6af4",
        "type": "inject",
        "z": "7a63b42f.d247ec",
        "name": "Step 2",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "none",
        "x": 118.61906433105469,
        "y": 236.7142848968506,
        "wires": [
            [
                "a1b75b7e.7ab0c8"
            ]
        ]
    },
    {
        "id": "e7599dce.7be2b",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Temp, Humidity JSON",
        "func": "//BDB Ecobee3 Function\n//Time Stamp Formatting\nvar now     = new Date(); \nvar year    = now.getFullYear();\nvar month   = now.getMonth()+1; \nvar day     = now.getDate();\nvar hour    = now.getHours();\nvar minute  = now.getMinutes();\nvar second  = now.getSeconds(); \nif(month.toString().length == 1) {\nvar month = '0'+month;\n}\nif(day.toString().length == 1) {\nvar day = '0'+day;\n}   \nif(hour.toString().length == 1) {\nvar hour = '0'+hour;\n}\nif(minute.toString().length == 1) {\nvar minute = '0'+minute;\n}\nif(second.toString().length == 1) {\nvar second = '0'+second;\n}   \ntime = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n//Ecobee Code Starts Here\nvar currentTemp=\"\";\nvar currentHumidity=\"\";\nvar currentruntime=\"\";\ncontext.global.EcobeeThermostats = {};\ncontext.global.EcobeeSensors = {};\nSensorCaps = {};\nfor(i = 0; i<msg.payload.thermostatList.length; i++) \n { \n if (msg.payload.thermostatList[i].modelNumber==\"athenaSmart\")\n {\n context.global.EcobeeThermostats[msg.payload.thermostatList[i].identifier] = {\n \"name\":msg.payload.thermostatList[i].name,\n \"connected\":msg.payload.thermostatList[i].runtime.connected,\n \"actualTemperature\": msg.payload.thermostatList[i].runtime.actualTemperature,\n \"actualHumidity\": msg.payload.thermostatList[i].runtime.actualHumidity,\n \"currentruntime\": msg.payload.thermostatList[i].runtime.runtimeInterval,\n \"desiredHeat\": msg.payload.thermostatList[i].runtime.desiredHeat,\n\t\t\t\t\"desiredCool\": msg.payload.thermostatList[i].runtime.desiredCool,\n\t\t\t\t\"desiredFanMode\": msg.payload.thermostatList[i].runtime.desiredFanMode\n };\n\t\t\tcurrentTemp=msg.payload.thermostatList[i].runtime.actualTemperature/10;\n\t\t\tcurrentHumidity=msg.payload.thermostatList[i].runtime.actualHumidity;\n\t\t\tcurrentruntime=msg.payload.thermostatList[i].runtime.runtimeInterval;\n for (j=0; j<msg.payload.thermostatList[i].remoteSensors.length; j++)\n {\n var SensorName=msg.payload.thermostatList[i].remoteSensors[j].name;\n var SensorInUse=msg.payload.thermostatList[i].remoteSensors[j].inUse;\n for (z=0; z<msg.payload.thermostatList[i].remoteSensors[j].capability.length; z++)\n {\n SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id] = {\n \"type\":msg.payload.thermostatList[i].remoteSensors[j].capability[z].type,\n \"value\":msg.payload.thermostatList[i].remoteSensors[j].capability[z].value\n };\n \n if (SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id].type==\"temperature\")\n {\n var SensorTemp=SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id].value;\n }\n if (SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id].type==\"occupancy\")\n {\n var SensorOccupancy=SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id].value;\n }\n \n context.global.EcobeeSensors[msg.payload.thermostatList[i].remoteSensors[j].name] = {\n \"name\":SensorName,\n \"inUse\":SensorInUse,\n \"sensorTemp\":SensorTemp,\n \"sensorOccupancy\":SensorOccupancy\n };\n }\n }\n }\n }\n\nvar ecobeeMsg = {\n    topic: \"ecobee\",\n    payload: {\n    timestamp: time, \n    currentTemp: currentTemp, \n    currentHumidity: currentHumidity,\n    runtime: currentruntime, \n    }\n}\n\nvar tempMsg={\n    payload: currentTemp,\n    timestamp: time, \n    currentTemp: currentTemp, \n    currentHumidity: currentHumidity,\n    runtime: currentruntime*5, \n};\nvar rhMsg={\n    payload: currentHumidity,\n    timestamp: time, \n    currentTemp: currentTemp, \n    currentHumidity: currentHumidity,\n    runtime: currentruntime*5, \n};\n\nreturn [ [ecobeeMsg], [tempMsg], [rhMsg] ];\n\n\n",
        "outputs": "3",
        "noerr": 0,
        "x": 980,
        "y": 640,
        "wires": [
            [
                "a3d3fe01.456e9"
            ],
            [
                "e2755fd2.2b269"
            ],
            [
                "ab2831cc.e072a"
            ]
        ]
    },
    {
        "id": "1b7d9393.9a9a1c",
        "type": "mongodb in",
        "z": "7a63b42f.d247ec",
        "mongodb": "b33a2c4c.c7ef",
        "name": "",
        "collection": "temp",
        "operation": "find",
        "x": 1500,
        "y": 940,
        "wires": [
            [
                "ba4fd3c.cb7433",
                "f52ebc68.ee0a1"
            ]
        ]
    },
    {
        "id": "1db585c4.06358a",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1850,
        "y": 1000,
        "wires": []
    },
    {
        "id": "b7e41762.a02088",
        "type": "inject",
        "z": "7a63b42f.d247ec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "\"db.temp.find()\"",
        "payloadType": "json",
        "x": 1100,
        "y": 920,
        "wires": [
            [
                "6fbe1b8c.6ffa34",
                "28b0ce9b.dfd3a2"
            ]
        ]
    },
    {
        "id": "6fbe1b8c.6ffa34",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 1270,
        "y": 900,
        "wires": []
    },
    {
        "id": "dbcb4a07.468a68",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Format Temp",
        "func": "var tempvalue = msg.payload.currentTemp;\nvar timestamp = msg.payload.time;\n\nreturn {topic:\"Ecobee3/temp\", payload: tempvalue + \",\" + timestamp};\n\n/*\nif (msg.payload >= 0){\nreturn {topic:\"Ecobee3/temp\", payload: tempvalue + \",\" + timestamp};}\nelse {\nreturn {topic:\"Ecobee3/temp\", payload:\"Temp go boom\"};\n}\nreturn msg;\n*/",
        "outputs": "1",
        "noerr": 0,
        "x": 1870,
        "y": 920,
        "wires": [
            [
                "a46b1244.913e6"
            ]
        ]
    },
    {
        "id": "befff415.56ff28",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Format RH",
        "func": "var rhvalue = msg.payload;\n\n//Time Stamp Formatting\nvar now     = new Date(); \nvar year    = now.getFullYear();\nvar month   = now.getMonth()+1; \nvar day     = now.getDate();\nvar hour    = now.getHours();\nvar minute  = now.getMinutes();\nvar second  = now.getSeconds(); \nif(month.toString().length == 1) {\nvar month = '0'+month;\n}\nif(day.toString().length == 1) {\nvar day = '0'+day;\n}   \nif(hour.toString().length == 1) {\nvar hour = '0'+hour;\n}\nif(minute.toString().length == 1) {\nvar minute = '0'+minute;\n}\nif(second.toString().length == 1) {\nvar second = '0'+second;\n}   \ntime = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n//Format Message\n\nif (msg.payload >= 0){\nreturn {topic:\"Ecobee3/RH\", payload: rhvalue, timestamp: time, humidity: rhvalue};}\nelse {\nreturn {topic:\"Ecobee3/RH\", payload:\"Humidity go boom\", timestamp: time};\n}\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 1870,
        "y": 880,
        "wires": [
            [
                "a46b1244.913e6"
            ]
        ]
    },
    {
        "id": "28b0ce9b.dfd3a2",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Query Temp",
        "func": "var TempQuery={\n    payload: \"db.temp.find()\",\n    limit: 1000,\n    skip: 0,\n};\nreturn TempQuery;\n\n\n\n\n/*\nvar TempQuery={\n    payload: db.getCollection('temp').find({})\n};\nreturn TempQuery;\n*/\n\n/*\nvar Msg1={\n payload:year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second + \" Main Floor Temp: \" + currentTemp + \"*F. Runtime: \" + currentruntime*5 \n};\nvar Msg2={\n payload:\"Humidity is \" + currentHumidity + \"%.\"\n};\nreturn [ [Msg1, Msg2 ] ];\n*/",
        "outputs": 1,
        "noerr": 0,
        "x": 1290,
        "y": 940,
        "wires": [
            [
                "1b7d9393.9a9a1c"
            ]
        ]
    },
    {
        "id": "ba4fd3c.cb7433",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1690,
        "y": 880,
        "wires": []
    },
    {
        "id": "b2007922.76b598",
        "type": "inject",
        "z": "7a63b42f.d247ec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1120,
        "y": 1020,
        "wires": [
            [
                "735f3996.8463a8"
            ]
        ]
    },
    {
        "id": "735f3996.8463a8",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Query Temp",
        "func": "var TempQuery1={\n    payload: \"db.temp.find({ payload: 65.4})\",\n    limit: 1,\n    skip: 0,\n};\nreturn TempQuery1;\n\n\n\n\n/*\nvar TempQuery={\n    payload: db.getCollection('temp').find({})\n};\nreturn TempQuery;\n*/\n\n/*\nvar Msg1={\n payload:year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second + \" Main Floor Temp: \" + currentTemp + \"*F. Runtime: \" + currentruntime*5 \n};\nvar Msg2={\n payload:\"Humidity is \" + currentHumidity + \"%.\"\n};\nreturn [ [Msg1, Msg2 ] ];\n*/",
        "outputs": 1,
        "noerr": 0,
        "x": 1290,
        "y": 1020,
        "wires": [
            [
                "1b7d9393.9a9a1c"
            ]
        ]
    },
    {
        "id": "f52ebc68.ee0a1",
        "type": "bigsplitter",
        "z": "7a63b42f.d247ec",
        "name": "",
        "property": "payload",
        "x": 1700,
        "y": 940,
        "wires": [
            [
                "dbcb4a07.468a68",
                "af1885fd.0aee28",
                "befff415.56ff28"
            ],
            [
                "1db585c4.06358a"
            ]
        ]
    },
    {
        "id": "a46b1244.913e6",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 2030,
        "y": 920,
        "wires": []
    },
    {
        "id": "af1885fd.0aee28",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Format Temp",
        "func": "var tempvalue = msg.payload.currentTemp;\nvar timestamp = msg.payload.time;\n\nreturn {topic:\"Ecobee3/temp\", payload: tempvalue};\n\n/*\nif (msg.payload >= 0){\nreturn {topic:\"Ecobee3/temp\", payload: tempvalue + \",\" + timestamp};}\nelse {\nreturn {topic:\"Ecobee3/temp\", payload:\"Temp go boom\"};\n}\nreturn msg;\n*/",
        "outputs": "1",
        "noerr": 0,
        "x": 1870,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "e2755fd2.2b269",
        "type": "ui_chart",
        "z": "7a63b42f.d247ec",
        "name": "Main Temp",
        "group": "2701b769.447d98",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Ecobee3 Temp",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": "48",
        "removeOlderPoints": "500",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "outputs": 2,
        "x": 1210,
        "y": 640,
        "wires": [
            [
                "fa06a8e.ea9fb58"
            ],
            []
        ]
    },
    {
        "id": "ab2831cc.e072a",
        "type": "ui_chart",
        "z": "7a63b42f.d247ec",
        "name": "Ecobee 3 RH",
        "group": "2701b769.447d98",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Ecobee 3 RH",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": "48",
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "outputs": 2,
        "x": 1210,
        "y": 680,
        "wires": [
            [
                "fa06a8e.ea9fb58"
            ],
            []
        ]
    },
    {
        "id": "fa06a8e.ea9fb58",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 1390,
        "y": 640,
        "wires": []
    },
    {
        "id": "e117688b.5daba8",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1550,
        "y": 600,
        "wires": []
    },
    {
        "id": "bebc40a0.57af4",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1270,
        "y": 380,
        "wires": []
    },
    {
        "id": "b9e56fcc.e2eac",
        "type": "switch",
        "z": "1fb0f65a.416e0a",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "zwave/update/",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "zwave/temp/#",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "zwave/notification/#",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "zwave/event",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 410,
        "y": 160,
        "wires": [
            [
                "23a3b0a3.d37df"
            ],
            [
                "4d75554b.1fefbc"
            ],
            [
                "9af85131.6a9e3"
            ],
            [
                "b204adc0.19f7c"
            ],
            [
                "ac4a6756.7a4d08"
            ]
        ]
    },
    {
        "id": "ac4a6756.7a4d08",
        "type": "debug",
        "z": "1fb0f65a.416e0a",
        "name": "otherwise",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 580,
        "y": 240,
        "wires": []
    },
    {
        "id": "4409f4a4.09e38c",
        "type": "cepAggr",
        "z": "1fb0f65a.416e0a",
        "filters": [],
        "property": "payload",
        "windowType": "count",
        "windowParam": 0,
        "fieldsList": [
            {}
        ],
        "aggrOpList": [
            {}
        ],
        "x": 630,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "4d75554b.1fefbc",
        "type": "debug",
        "z": "1fb0f65a.416e0a",
        "name": "zwave/temp/#",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "5f6bdaac.cf93f4",
        "type": "mqtt in",
        "z": "1fb0f65a.416e0a",
        "name": "",
        "topic": "darksky",
        "qos": "2",
        "broker": "d211c5e.e794238",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "1f554fd7.8abd6"
            ]
        ]
    },
    {
        "id": "af080f7a.7e0af",
        "type": "debug",
        "z": "1fb0f65a.416e0a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 390,
        "y": 360,
        "wires": []
    },
    {
        "id": "13b4c363.90a4ad",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 950,
        "y": 580,
        "wires": []
    },
    {
        "id": "1f554fd7.8abd6",
        "type": "json",
        "z": "1fb0f65a.416e0a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 360,
        "wires": [
            [
                "af080f7a.7e0af"
            ]
        ]
    },
    {
        "id": "bef619.be3ab9e8",
        "type": "exec",
        "z": "7a63b42f.d247ec",
        "command": "pwd",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 300,
        "y": 1360,
        "wires": [
            [
                "dd9f5385.0c2c2"
            ],
            [],
            []
        ]
    },
    {
        "id": "dd9f5385.0c2c2",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": true,
        "console": "true",
        "complete": "true",
        "x": 450,
        "y": 1320,
        "wires": []
    },
    {
        "id": "b07e36db.0f7d88",
        "type": "inject",
        "z": "7a63b42f.d247ec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1360,
        "wires": [
            [
                "bef619.be3ab9e8"
            ]
        ]
    },
    {
        "id": "b204adc0.19f7c",
        "type": "debug",
        "z": "1fb0f65a.416e0a",
        "name": "zwave/event/#",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 600,
        "y": 200,
        "wires": []
    },
    {
        "id": "9af85131.6a9e3",
        "type": "debug",
        "z": "1fb0f65a.416e0a",
        "name": "zwave/notification/#",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 620,
        "y": 160,
        "wires": []
    },
    {
        "id": "2c27220a.8b6e8e",
        "type": "debug",
        "z": "e25331a6.a6639",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 650,
        "y": 400,
        "wires": []
    },
    {
        "id": "1f8d16ad.e5c3e9",
        "type": "function",
        "z": "e25331a6.a6639",
        "name": "elsys-lora.io",
        "func": "/**\n \n\tIn this editor, you can define your custom javascript code to parse the incoming data.\t\n\t\n\tThe following variables are available:\n\t\n\tdata     : hex string of the data\n\tp\t     : array of bytes represented as string of 2 hex digits \n\tv        : array of bytes represented as integers\n\tmsg.EUI  : device EUI\n\tmsg.fcnt : message frame counter\n\tmsg.port : message port field\n\tmsg.ts   : message timestamp as number (epoch)\n\t\n\tLast line of your script will be printed to the data payload column.\n \n*/\n/*\n  ______ _       _______     _______ \n |  ____| |     / ____\\ \\   / / ____|\n | |__  | |    | (___  \\ \\_/ / (___  \n |  __| | |     \\___ \\  \\   / \\___ \\ \n | |____| |____ ____) |  | |  ____) |\n |______|______|_____/   |_| |_____/ \n \n  ELSYS simple payload decoder. \n  Use it as it is or remove the bugs :)\n  www.elsys.se\n  peter@elsys.se\n*/\nconst TYPE_TEMP    \t=0x01; //temp 2 bytes -3276.8°C -->3276.7°C\nconst TYPE_RH\t\t=0x02; //Humidity 1 byte  0-100%\nconst TYPE_ACC\t\t=0x03; //acceleration 3 bytes X,Y,Z -128 --> 127 +/-63=1G\nconst TYPE_LIGHT\t=0x04; //Light 2 bytes 0-->65535 Lux\nconst TYPE_MOTION\t=0x05; //No of motion 1 byte  0-255\nconst TYPE_CO2\t\t=0x06; //Co2 2 bytes 0-65535 ppm \nconst TYPE_VDD\t\t=0x07; //VDD 2byte 0-65535mV\nconst TYPE_ANALOG1  =0x08; //VDD 2byte 0-65535mV\nconst TYPE_GPS      =0x09; //3bytes lat 3bytes long binary\nconst TYPE_PULSE1   =0x0A; //2bytes relative pulse count\n \nfunction bin16dec(bin) {\n    var num=bin&0xFFFF;\n    if (0x8000 & num)\n        num = - (0x010000 - num);\n    return num;\n}\nfunction bin8dec(bin) {\n    var num=bin&0xFF;\n    if (0x80 & num) \n        num = - (0x0100 - num);\n    return num;\n}\nfunction hexToBytes(hex) {\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n}\n \nfunction DecodeElsysPayload(data){\n    var obj ={};\n    for(i=0;i<data.length;i++){\n        switch(data[i]){\n            case TYPE_TEMP: //Temperature\n                var temp=(data[i+1]<<8)|(data[i+2]);\n                temp=bin16dec(temp);\n                obj.temperature=temp;\n                i+=2;\n            break;\n            case TYPE_RH: //Humidity\n                var rh=(data[i+1]);\n                obj.humidity=rh;\n                i+=1;\n            break;\n            case TYPE_ACC: //Acceleration\n                obj.x=bin8dec(data[i+1]);\n                obj.y=bin8dec(data[i+2]);\n                obj.z=bin8dec(data[i+3]);\n                i+=3;\n            break;\n            case TYPE_LIGHT: //Light\n                var light=(data[i+1]<<8)|(data[i+2]);\n                obj.light=light;\n                i+=2;\n            break;\n            case TYPE_MOTION: //Motion sensor(PIR)\n                var motion=(data[i+1]);\n                obj.motion=motion;\n                i+=1;\n            break;\n            case TYPE_CO2: //CO2\n                var co2=(data[i+1]<<8)|(data[i+2]);\n                obj.co2=co2;\n                i+=2;\n            break;\n            case TYPE_VDD: //Battery level\n                var vdd=(data[i+1]<<8)|(data[i+2]);\n                obj.vdd=vdd;\n                i+=2;\n            break;\n            case TYPE_ANALOG1: //Analog input 1\n                var analog1=(data[i+1]<<8)|(data[i+2]);\n                obj.analog1=analog1;\n                i+=2;\n            break;\n            case TYPE_GPS: //gps\n                obj.lat=(data[i+1]<<16)|(data[i+2]<<8)|(data[i+3]);\n                obj.long=(data[i+4]<<16)|(data[i+5]<<8)|(data[i+6]);\n                i+=6;\n            break;\n            case TYPE_PULSE1: //Pulse input 1\n                var pulse1=(data[i+1]<<8)|(data[i+2]);\n                obj.pulse1=pulse1;\n                i+=2;\n            break;\n        }\n    }\n    return {payload: obj};\n}\n//var res=DecodeElsysPayload(hexToBytes(data));\n//var json=JSON.stringify(res,null,4);\n//json;\n\n//return {payload: json};",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5f71cb5.b142434",
        "type": "function",
        "z": "e25331a6.a6639",
        "name": "Test Elsys",
        "func": "var buf = new Buffer(msg.payload.raw, 'base64'); // put in msg.payload the payload raw data stored initially as Base64\nvar node = msg.devEUI;\n\ntemp = buf[2] * 255 + buf[3];\nhum = buf[0] * 255 + buf[1];\n\n// construct a new object to store the data message\nvar data = {\npayload : [\n    [{\n        numValue: temp/10.0,\n        time: new Date(msg.metadata.server_time).getTime()\n    },\n    {\n        tag1:\"temp\",\n        sensor:node\n    }],\n    [{\n        numValue: hum/10.0,\n        time: new Date(msg.metadata.server_time).getTime()\n    },\n    {\n        tag1:\"hum\",\n        sensor:node\n    }]\n]};\nreturn data;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e39399f3.efaa08",
        "type": "mqtt in",
        "z": "e25331a6.a6639",
        "name": "",
        "topic": "lorabytes",
        "qos": "2",
        "broker": "d211c5e.e794238",
        "x": 440,
        "y": 400,
        "wires": [
            [
                "2c27220a.8b6e8e"
            ]
        ]
    },
    {
        "id": "d28f946a.0434a8",
        "type": "mqtt out",
        "z": "7a63b42f.d247ec",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "d211c5e.e794238",
        "x": 1550,
        "y": 520,
        "wires": []
    },
    {
        "id": "8b5f9374.fbad1",
        "type": "mqtt in",
        "z": "e25331a6.a6639",
        "name": "",
        "topic": "gateway/#",
        "qos": "2",
        "broker": "d211c5e.e794238",
        "x": 210,
        "y": 600,
        "wires": [
            [
                "210001cb.caf16e"
            ]
        ]
    },
    {
        "id": "4f2a082e.a51de8",
        "type": "debug",
        "z": "e25331a6.a6639",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 490,
        "y": 600,
        "wires": []
    },
    {
        "id": "210001cb.caf16e",
        "type": "json",
        "z": "e25331a6.a6639",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 600,
        "wires": [
            [
                "4f2a082e.a51de8"
            ]
        ]
    },
    {
        "id": "e7d91b13.fe72b8",
        "type": "mqtt in",
        "z": "e25331a6.a6639",
        "name": "",
        "topic": "application/#",
        "qos": "2",
        "broker": "d211c5e.e794238",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "c104496d.341648"
            ]
        ]
    },
    {
        "id": "90a7e4ad.6c9258",
        "type": "debug",
        "z": "e25331a6.a6639",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 490,
        "y": 500,
        "wires": []
    },
    {
        "id": "c104496d.341648",
        "type": "json",
        "z": "e25331a6.a6639",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 500,
        "wires": [
            [
                "90a7e4ad.6c9258"
            ]
        ]
    },
    {
        "id": "52d29407.8f4fac",
        "type": "mqtt in",
        "z": "e25331a6.a6639",
        "name": "",
        "topic": "application/2/device/008000000000fa94/rx",
        "qos": "2",
        "broker": "d211c5e.e794238",
        "x": 310,
        "y": 780,
        "wires": [
            [
                "66a2e4d2.3dd70c"
            ]
        ]
    },
    {
        "id": "1390bf01.78c661",
        "type": "debug",
        "z": "e25331a6.a6639",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 710,
        "y": 780,
        "wires": []
    },
    {
        "id": "63c00670.f1f4f8",
        "type": "influxdb in",
        "z": "d75475bd.f0fa48",
        "influxdb": "9fd8514d.4e93e",
        "name": "time query",
        "query": "select * from test;",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 4270,
        "y": 920,
        "wires": [
            [
                "96e34e1e.877ab"
            ]
        ]
    },
    {
        "id": "fa2c2ba3.32bfd8",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4119,
        "y": 920,
        "wires": [
            [
                "63c00670.f1f4f8"
            ]
        ]
    },
    {
        "id": "96e34e1e.877ab",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4452,
        "y": 920,
        "wires": []
    },
    {
        "id": "16495cf5.f5d4b3",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "9fd8514d.4e93e",
        "name": "",
        "measurement": "test",
        "precision": "",
        "retentionPolicy": "",
        "x": 4510,
        "y": 1080,
        "wires": []
    },
    {
        "id": "60fef7c1.484bf8",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "single value",
        "func": "msg.payload = Math.random()*10;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4330,
        "y": 1080,
        "wires": [
            [
                "16495cf5.f5d4b3"
            ]
        ]
    },
    {
        "id": "c359f96c.197838",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4160,
        "y": 1080,
        "wires": [
            [
                "60fef7c1.484bf8"
            ]
        ]
    },
    {
        "id": "a3d3fe01.456e9",
        "type": "simpletime",
        "z": "7a63b42f.d247ec",
        "name": "",
        "x": 1210,
        "y": 580,
        "wires": [
            [
                "8904a3.b59d9b6"
            ]
        ]
    },
    {
        "id": "f201c125.25ea8",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Temp, Humidity JSON",
        "func": "//BDB Ecobee3 Function\n//Time Stamp Formatting\nvar now     = new Date(); \nvar year    = now.getFullYear();\nvar month   = now.getMonth()+1; \nvar day     = now.getDate();\nvar hour    = now.getHours();\nvar minute  = now.getMinutes();\nvar second  = now.getSeconds(); \nif(month.toString().length == 1) {\nvar month = '0'+month;\n}\nif(day.toString().length == 1) {\nvar day = '0'+day;\n}   \nif(hour.toString().length == 1) {\nvar hour = '0'+hour;\n}\nif(minute.toString().length == 1) {\nvar minute = '0'+minute;\n}\nif(second.toString().length == 1) {\nvar second = '0'+second;\n}   \ntime = year+'-'+month+'-'+day+' '+hour+':'+minute+':'+second;\n\n//Ecobee Code Starts Here\nvar currentTemp=\"\";\nvar currentHumidity=\"\";\nvar currentruntime=\"\";\ncontext.global.EcobeeThermostats = {};\ncontext.global.EcobeeSensors = {};\nSensorCaps = {};\nfor(i = 0; i<msg.payload.thermostatList.length; i++) \n { \n if (msg.payload.thermostatList[i].modelNumber==\"athenaSmart\")\n {\n context.global.EcobeeThermostats[msg.payload.thermostatList[i].identifier] = {\n \"name\":msg.payload.thermostatList[i].name,\n \"connected\":msg.payload.thermostatList[i].runtime.connected,\n \"actualTemperature\": msg.payload.thermostatList[i].runtime.actualTemperature,\n \"actualHumidity\": msg.payload.thermostatList[i].runtime.actualHumidity,\n \"currentruntime\": msg.payload.thermostatList[i].runtime.runtimeInterval,\n \"desiredHeat\": msg.payload.thermostatList[i].runtime.desiredHeat,\n\t\t\t\t\"desiredCool\": msg.payload.thermostatList[i].runtime.desiredCool,\n\t\t\t\t\"desiredFanMode\": msg.payload.thermostatList[i].runtime.desiredFanMode\n };\n\t\t\tcurrentTemp=msg.payload.thermostatList[i].runtime.actualTemperature/10;\n\t\t\tcurrentHumidity=msg.payload.thermostatList[i].runtime.actualHumidity;\n\t\t\tcurrentruntime=msg.payload.thermostatList[i].runtime.runtimeInterval;\n for (j=0; j<msg.payload.thermostatList[i].remoteSensors.length; j++)\n {\n var SensorName=msg.payload.thermostatList[i].remoteSensors[j].name;\n var SensorInUse=msg.payload.thermostatList[i].remoteSensors[j].inUse;\n for (z=0; z<msg.payload.thermostatList[i].remoteSensors[j].capability.length; z++)\n {\n SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id] = {\n \"type\":msg.payload.thermostatList[i].remoteSensors[j].capability[z].type,\n \"value\":msg.payload.thermostatList[i].remoteSensors[j].capability[z].value\n };\n \n if (SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id].type==\"temperature\")\n {\n var SensorTemp=SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id].value;\n }\n if (SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id].type==\"occupancy\")\n {\n var SensorOccupancy=SensorCaps[msg.payload.thermostatList[i].remoteSensors[j].capability[z].id].value;\n }\n \n context.global.EcobeeSensors[msg.payload.thermostatList[i].remoteSensors[j].name] = {\n \"name\":SensorName,\n \"inUse\":SensorInUse,\n \"sensorTemp\":SensorTemp,\n \"sensorOccupancy\":SensorOccupancy\n };\n }\n }\n }\n }\n\nvar ecobeeMsg = {\n    topic: \"ecobee\",\n    payload: {\n    timestamp: time, \n    currentTemp: currentTemp, \n    currentHumidity: currentHumidity,\n    runtime: currentruntime, \n    }\n}\n\nvar tempMsg={\n    payload: currentTemp,\n    timestamp: time, \n    currentTemp: currentTemp, \n    currentHumidity: currentHumidity,\n    runtime: currentruntime*5, \n};\nvar rhMsg={\n    payload: currentHumidity,\n    timestamp: time, \n    currentTemp: currentTemp, \n    currentHumidity: currentHumidity,\n    runtime: currentruntime*5, \n};\n\nreturn [ [ecobeeMsg], [tempMsg], [rhMsg] ];\n\n\n",
        "outputs": "3",
        "noerr": 0,
        "x": 980,
        "y": 720,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "8904a3.b59d9b6",
        "type": "change",
        "z": "7a63b42f.d247ec",
        "name": "add epoch",
        "rules": [
            {
                "t": "set",
                "p": "payload.epoch",
                "pt": "msg",
                "to": "myepoch",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 580,
        "wires": [
            [
                "e117688b.5daba8",
                "d28f946a.0434a8"
            ]
        ]
    },
    {
        "id": "1a7749d2.e572d6",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "5059026f.4e2d5c",
        "name": "ecobee influxdb",
        "measurement": "mainfloor",
        "precision": "",
        "retentionPolicy": "",
        "x": 660,
        "y": 240,
        "wires": []
    },
    {
        "id": "fc684dcd.2fb33",
        "type": "mqtt in",
        "z": "d75475bd.f0fa48",
        "name": "",
        "topic": "ecobee",
        "qos": "2",
        "datatype": "auto",
        "broker": "d211c5e.e794238",
        "nl": false,
        "rap": false,
        "x": 170,
        "y": 240,
        "wires": [
            [
                "7065a989.250088"
            ]
        ]
    },
    {
        "id": "48470d5d.68add4",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 630,
        "y": 180,
        "wires": []
    },
    {
        "id": "7065a989.250088",
        "type": "json",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "53326efb.d3491"
            ]
        ]
    },
    {
        "id": "5622f2dc.aa710c",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4120,
        "y": 1280,
        "wires": [
            [
                "e10eb78e.b2f118"
            ]
        ]
    },
    {
        "id": "e10eb78e.b2f118",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "simple query",
        "func": "msg.query=\"select * from test;\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4280,
        "y": 1280,
        "wires": [
            [
                "def882d3.ca3fd"
            ]
        ]
    },
    {
        "id": "def882d3.ca3fd",
        "type": "influxdb in",
        "z": "d75475bd.f0fa48",
        "influxdb": "9fd8514d.4e93e",
        "name": "time query",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 4443,
        "y": 1280,
        "wires": [
            [
                "899fbd6d.49903"
            ]
        ]
    },
    {
        "id": "899fbd6d.49903",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 4601,
        "y": 1280,
        "wires": []
    },
    {
        "id": "ad0623f5.15699",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4160,
        "y": 1500,
        "wires": [
            [
                "85439744.2ef3d8"
            ]
        ]
    },
    {
        "id": "85439744.2ef3d8",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "Fields",
        "func": "msg.payload = {\n    numValue: 123.0,\n    strValue: \"message\",\n    randomValue: Math.random()*10\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4308,
        "y": 1500,
        "wires": [
            [
                "abe2d307.a3049"
            ]
        ]
    },
    {
        "id": "abe2d307.a3049",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "9fd8514d.4e93e",
        "name": "",
        "measurement": "test",
        "precision": "",
        "retentionPolicy": "",
        "x": 4478,
        "y": 1500,
        "wires": []
    },
    {
        "id": "53326efb.d3491",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload.epoch",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.timestamp",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 240,
        "wires": [
            [
                "48470d5d.68add4",
                "1a7749d2.e572d6"
            ]
        ]
    },
    {
        "id": "f482e218.afc45",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 4140,
        "y": 1620,
        "wires": [
            [
                "f20a5cab.82fcf"
            ]
        ]
    },
    {
        "id": "f20a5cab.82fcf",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "Fields and Tags",
        "func": "msg.payload = [{\n    numValue: 12,\n    randomValue: Math.random()*10,\n    strValue: \"message2\"\n},\n{\n    tag1:\"sensor1\",\n    tag2:\"device2\"\n}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4311,
        "y": 1620,
        "wires": [
            [
                "c9d944d2.768028"
            ]
        ]
    },
    {
        "id": "52f364a9.a4bf5c",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "9fd8514d.4e93e",
        "name": "",
        "measurement": "test",
        "precision": "",
        "retentionPolicy": "",
        "x": 4570,
        "y": 1620,
        "wires": []
    },
    {
        "id": "c9d944d2.768028",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 4470,
        "y": 1680,
        "wires": []
    },
    {
        "id": "6b0707e0.efcd68",
        "type": "mqtt in",
        "z": "d75475bd.f0fa48",
        "name": "",
        "topic": "zwave/cov",
        "qos": "2",
        "broker": "d211c5e.e794238",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "474ca5cb.de226c"
            ]
        ]
    },
    {
        "id": "474ca5cb.de226c",
        "type": "json",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 500,
        "wires": [
            [
                "559737f9.8a1c08"
            ]
        ]
    },
    {
        "id": "493c7acb.a66124",
        "type": "comment",
        "z": "d75475bd.f0fa48",
        "name": "Ecobee Thermostat",
        "info": "",
        "x": 210,
        "y": 140,
        "wires": []
    },
    {
        "id": "66a2e4d2.3dd70c",
        "type": "json",
        "z": "e25331a6.a6639",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 780,
        "wires": [
            [
                "1390bf01.78c661"
            ]
        ]
    },
    {
        "id": "274a1412.81f19c",
        "type": "mqtt in",
        "z": "d75475bd.f0fa48",
        "name": "008000000000fa94",
        "topic": "application/2/device/008000000000fa94/rx",
        "qos": "2",
        "broker": "d211c5e.e794238",
        "x": 1170,
        "y": 200,
        "wires": [
            [
                "3bf33cf4.fbe654"
            ]
        ]
    },
    {
        "id": "3bf33cf4.fbe654",
        "type": "json",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1330,
        "y": 200,
        "wires": [
            [
                "72bb9f6b.d4803"
            ]
        ]
    },
    {
        "id": "fceb5dc0.a80b8",
        "type": "comment",
        "z": "d75475bd.f0fa48",
        "name": "Multitech MBox",
        "info": "",
        "x": 1160,
        "y": 140,
        "wires": []
    },
    {
        "id": "72bb9f6b.d4803",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "",
        "func": "lux = msg.payload.object.lux;\nmoisture = msg.payload.object.moisture;\ntemp = msg.payload.object.temp_f;\nx_acc = msg.payload.object.x_acc;\ny_acc = msg.payload.object.y_acc;\nz_acc = msg.payload.object.z_acc;\n\nreturn { payload: {\n    lux: lux,\n    moisture: moisture,\n    temp: temp,\n    x_acc: x_acc,\n    y_acc: y_acc,\n    z_acc: z_acc,\n    }\n}\n\n/*\nreturn { payload: [{\n    lux: lux,\n    moisture: moisture,\n    temp: temp,\n    x_acc: x_acc,\n    y_acc: y_acc,\n    z_acc: z_acc,\n    },{\n    tag1: \"008000000000fa94\",\n    }]\n}\n*/\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1450,
        "y": 200,
        "wires": [
            [
                "1b42b72b.0922a9"
            ]
        ]
    },
    {
        "id": "1b42b72b.0922a9",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "da295c2b.76a85",
        "name": "008000000000fa94",
        "measurement": "008000000000fa94",
        "precision": "",
        "retentionPolicy": "",
        "x": 1610,
        "y": 200,
        "wires": []
    },
    {
        "id": "8d924bc9.491c98",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "measurement",
                "pt": "msg",
                "to": "msg.payload.label",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "payload.value",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.cmdclass",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.cmdidx",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload.instance",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload.currState",
                "pt": "msg",
                "to": "$number(payload.currState)",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.oldState",
                "pt": "msg",
                "to": "$number(payload.oldState)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 600,
        "wires": [
            [
                "a6e2816d.3ae6c"
            ]
        ]
    },
    {
        "id": "246af166.50229e",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "f8ce23bb.23857",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1300,
        "y": 700,
        "wires": []
    },
    {
        "id": "559737f9.8a1c08",
        "type": "switch",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload.label",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Temperature",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Relative Humidity",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Battery Level",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Alarm Level",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Alarm Type",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Switch",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Level",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Luminance",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 470,
        "y": 500,
        "wires": [
            [
                "7066abd4.acf854"
            ],
            [
                "45055a6a.ac42d4"
            ],
            [
                "a7055134.dac49"
            ],
            [
                "74c33191.47452"
            ],
            [
                "48e5d936.febaf8"
            ],
            [
                "2899bd7b.9f6a62"
            ],
            [
                "71902a79.2f2c64"
            ],
            [
                "142b2f01.dc76e1"
            ],
            [
                "ebf86302.a6c7c"
            ]
        ]
    },
    {
        "id": "45055a6a.ac42d4",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "RH",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "RH",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 380,
        "wires": [
            [
                "8d924bc9.491c98"
            ]
        ]
    },
    {
        "id": "a6e2816d.3ae6c",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "Add Tag",
        "func": "nodeid = msg.payload.nodeid;\noldState = msg.payload.oldState;\ncurrState = msg.payload.currState;\n\n//Fix Alarm Type label\nlabel = msg.payload.label;\nunits = msg.payload.units;\nuuid = msg.payload.uuid;\n\n\nmsg.payload = [{\n    oldState: oldState,\n    currState: currState,\n    label: label,\n    units: units,\n    uuid: uuid\n},\n{\n    nodeid: nodeid\n}];\n\nmsg.measurement = label\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1000,
        "y": 600,
        "wires": [
            [
                "aa0beef4.b569e",
                "246af166.50229e"
            ]
        ]
    },
    {
        "id": "2800cd98.a6cdc2",
        "type": "mqtt in",
        "z": "524fa936.044d78",
        "name": "",
        "topic": "zwave/cov",
        "qos": "2",
        "broker": "d211c5e.e794238",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "6452b1d5.fd21f"
            ]
        ]
    },
    {
        "id": "6452b1d5.fd21f",
        "type": "json",
        "z": "524fa936.044d78",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 280,
        "y": 120,
        "wires": [
            [
                "b4768df0.95387"
            ]
        ]
    },
    {
        "id": "b4768df0.95387",
        "type": "mongodb out",
        "z": "524fa936.044d78",
        "mongodb": "705e49f4.ec4728",
        "name": "",
        "collection": "multisensor",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "aa0beef4.b569e",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1130,
        "y": 560,
        "wires": []
    },
    {
        "id": "4b2378ab.7105f8",
        "type": "mongodb in",
        "z": "d75475bd.f0fa48",
        "mongodb": "705e49f4.ec4728",
        "name": "",
        "collection": "multisensor",
        "operation": "find",
        "x": 390,
        "y": 1200,
        "wires": [
            [
                "1b983aed.b23235"
            ]
        ]
    },
    {
        "id": "26dd9190.c4110e",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"select * from multisensor\"",
        "payloadType": "str",
        "x": 180,
        "y": 1200,
        "wires": [
            [
                "4b2378ab.7105f8"
            ]
        ]
    },
    {
        "id": "1b983aed.b23235",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 600,
        "y": 1200,
        "wires": []
    },
    {
        "id": "a7055134.dac49",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "Battery",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "Battery",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 420,
        "wires": [
            [
                "8d924bc9.491c98"
            ]
        ]
    },
    {
        "id": "74c33191.47452",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "Alarm",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "Alarm",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 460,
        "wires": [
            [
                "8d924bc9.491c98"
            ]
        ]
    },
    {
        "id": "48e5d936.febaf8",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "Alarm",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "AlarmType",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 500,
        "wires": [
            [
                "8d924bc9.491c98"
            ]
        ]
    },
    {
        "id": "2a5d302d.cd2fe",
        "type": "comment",
        "z": "d75475bd.f0fa48",
        "name": "Zwave Sensors",
        "info": "",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "ba459182.879bd",
        "type": "json",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 800,
        "wires": [
            [
                "b9a1f7b1.305908"
            ]
        ]
    },
    {
        "id": "2899bd7b.9f6a62",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "Switch",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "Switch",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 540,
        "wires": [
            [
                "8d924bc9.491c98"
            ]
        ]
    },
    {
        "id": "494c87b7.d877c8",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "measurement",
                "pt": "msg",
                "to": "msg.payload.label",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "payload.help",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 800,
        "wires": [
            [
                "a63831ed.1d46"
            ]
        ]
    },
    {
        "id": "b9a1f7b1.305908",
        "type": "switch",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload.help",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Notification - Node Awake",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Notification - Node Asleep",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 530,
        "y": 800,
        "wires": [
            [
                "97c97ece.b123a"
            ],
            [
                "9cd0a165.d3ad7"
            ],
            []
        ]
    },
    {
        "id": "97c97ece.b123a",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "Awake",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "NodeStatus",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.status",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "Awake",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 780,
        "wires": [
            [
                "494c87b7.d877c8"
            ]
        ]
    },
    {
        "id": "9cd0a165.d3ad7",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "Asleep",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "NodeStatus",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.status",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "Asleep",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 820,
        "wires": [
            [
                "494c87b7.d877c8"
            ]
        ]
    },
    {
        "id": "cc89078f.553208",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1190,
        "y": 840,
        "wires": []
    },
    {
        "id": "a63831ed.1d46",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "Add Tag",
        "func": "nodeid = msg.payload.nodeid;\nnotification = msg.payload.notification;\nlabel = msg.payload.label;\nuuid = msg.payload.uuid;\nstatus = msg.payload.status;\nvalue = msg.payload.value;\n\nmsg.payload = [{\n    status: status,\n    notification: notification,\n    label: label,\n    uuid: uuid\n},\n{\n    nodeid: nodeid,\n    value: value,\n\n}];\n\nmsg.measurement = label\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1060,
        "y": 800,
        "wires": [
            [
                "246af166.50229e",
                "cc89078f.553208"
            ]
        ]
    },
    {
        "id": "ebf86302.a6c7c",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 630,
        "y": 660,
        "wires": []
    },
    {
        "id": "71902a79.2f2c64",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "Level",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "Level",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 580,
        "wires": [
            [
                "8d924bc9.491c98"
            ]
        ]
    },
    {
        "id": "7066abd4.acf854",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "Temperature",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "Temperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 340,
        "wires": [
            [
                "8d924bc9.491c98"
            ]
        ]
    },
    {
        "id": "80e6b702.9f85d8",
        "type": "mqtt in",
        "z": "d75475bd.f0fa48",
        "name": "",
        "topic": "darkSky",
        "qos": "2",
        "broker": "d211c5e.e794238",
        "x": 1920,
        "y": 200,
        "wires": [
            [
                "faa74614.539df8"
            ]
        ]
    },
    {
        "id": "faa74614.539df8",
        "type": "json",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2070,
        "y": 200,
        "wires": [
            [
                "6ef47229.fc87cc"
            ]
        ]
    },
    {
        "id": "6ef47229.fc87cc",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 2190,
        "y": 140,
        "wires": []
    },
    {
        "id": "142b2f01.dc76e1",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "Lux",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "Lux",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 620,
        "wires": [
            [
                "8d924bc9.491c98"
            ]
        ]
    },
    {
        "id": "5828fa46.970b04",
        "type": "debug",
        "z": "7a63b42f.d247ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 750,
        "y": 360,
        "wires": []
    },
    {
        "id": "9827f3a8.afda",
        "type": "function",
        "z": "7a63b42f.d247ec",
        "name": "Refresh Token",
        "func": "context.global.EcobeeClientID=\"bygh7q8PMFCM9FFTY3ED0mE7MdAG2yYp\";\n\n\n\n\n//context.global.EcobeeRefreshToken=\"\";\nvar newMsg ={\n \"url\":\"https://api.ecobee.com/token?grant_type=refresh_token&code=\"+context.global.EcobeeRefreshToken+\"&client_id=\"+context.global.EcobeeClientID+\"\",\n \"method\": \"POST\",\n headers: {\n }\n};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "e1f63e44.10b8d",
        "type": "ttn event",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "app": "6f408d8b.005a54",
        "dev_id": "",
        "event": "#",
        "x": 180,
        "y": 940,
        "wires": [
            [
                "dd20ef4a.051bf"
            ]
        ]
    },
    {
        "id": "dd20ef4a.051bf",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 350,
        "y": 940,
        "wires": []
    },
    {
        "id": "5a2d8ece.9c55a",
        "type": "ttn uplink",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "app": "6f408d8b.005a54",
        "dev_id": "",
        "field": "",
        "x": 180,
        "y": 560,
        "wires": [
            [
                "4a66209c.69761",
                "f2788143.c8d68"
            ]
        ]
    },
    {
        "id": "ab865dca.b0f48",
        "type": "mqtt in",
        "z": "d75475bd.f0fa48",
        "name": "",
        "topic": "darksky/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "d211c5e.e794238",
        "x": 160,
        "y": 1560,
        "wires": [
            [
                "f247d4e2.62d798"
            ]
        ]
    },
    {
        "id": "28eb4730.a82d88",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 600,
        "y": 1520,
        "wires": []
    },
    {
        "id": "f247d4e2.62d798",
        "type": "json",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 300,
        "y": 1560,
        "wires": [
            [
                "97e1fe04.b407b"
            ]
        ]
    },
    {
        "id": "c3032e33.9c9df",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "Radio Bridge Codec",
        "func": "//function Decoder(bytes, port) {\n  // Decode an uplink message from a buffer\n  // (array) of bytes to an object of fields.\n//  var decoded = {};\n\n  // if (port === 1) decoded.led = bytes[0];\n\n//  return decoded;\n//}\n\n\n//Decode = function(fPort, bytes) {\n\nfunction Decoder(bytes, port) {\nvar return_object = {};\nvar event_array = [];\nreturn_object.port = port;\nreturn_object.radio_bridge_protocol_version = bytes[0] >> 4; // first nibble is always 0x1 for Radio Bridge as that is the protocol version\nreturn_object.radio_bridge_packet_count = bytes[0] & 0xF; // second nibble is the packet count (should go up by 1 each time an uplink is sent...even if the uplink is sent 6 times it should increment 6 times)\nvar message_type = bytes[1]; // Radio Bridge differentiates sensors and other common messages based on this byte\nreturn_object.message_type = message_type;\n switch(message_type) {\n    case 0x03: {\n if (bytes.length == 3) {\n        var magnet_present_event = {};\n var magnet_sensor_state = Boolean(bytes[2]); // 0x01 means the magnet is NOT present, 0x00 means there IS a magnet\n magnet_present_event.n = \"magnet_present\";\n magnet_present_event.vb = !magnet_sensor_state;\n event_array.push(magnet_present_event);\n }\n break;\n } // end case 0x03 (door/window sensor)\n    case 0x0A: {\n      if (bytes.length == 4) {\n         var tilt_event = {};\n         var tilt_sensor_state = Boolean(bytes[2]); //\n      }\n      break;\n    }\n    case 0x00: { // 0x00 is the reset message (5 bytes)\n         if (bytes.length == 8) {\n         /* Not using right now....should use later\n         var sensor_type_codes = {\n             0x00: \"undefined sensor_type_code\",\n             0x01: \"Door/Window\",\n             0x02: \"Door/Window High Security\",\n             0x03: \"Contact\",\n             0x04: \"Temperature No-Probe\",\n             0x05: \"Temperature External Probe\",\n             0x06: \"Single Push Button\",\n             0x07: \"Dual Push Button\",\n             0x0E: \"Air Temperature and Humidity\",\n              0x0A: \"Tilt Sensor\",\n         };\n         */\n         var reset_event = {};\n         reset_event.n = \"device_reset_event\";\n         reset_event.vd = '' + bytes;\n         /* These are not used right now, but could be used in the future\n         var sensor_type_code = bytes[2];\n         var hardware_version = bytes[3];\n         var firmware_version_major = bytes[4];\n         var firmware_version_minor = bytes[5];\n         var reset_code_major = bytes[6];\n         var reset_code_minor = bytes[7];\n         */\n         event_array.push(reset_event);\n         }\n         break;\n     } // end case 0x00\n     case 0x01: { // 0x01 is the status payload for supervisory messages\n         if (bytes.length == 5) {\n         var supervisory_error_event = {};\n         var supervisory_error_codes = bytes[2];//TODO make enums for this\n         supervisory_error_event.n = \"supervisory_error_codes\";\n         supervisory_error_event.vd = '' + supervisory_error_codes; // TODO make different events for this\n         event_array.push(supervisory_error_event);\n    \n         var supervisory_sensor_state = bytes[3];\n         var supervisory_sensor_state_event = {};\n         supervisory_sensor_state_event.n = \"supervisory_sensor_state\";\n         supervisory_sensor_state_event.v = supervisory_sensor_state; // TODO make different events for this\n         event_array.push(supervisory_sensor_state_event);\n    \n         var battery_event = {};\n         var battery_voltage_integer = bytes[4] >>> 4; // integer is highest 4 bits\n         var battery_voltage_decimal = (bytes[4] & 0x0F)/10; // decimal is lowest 4 bits\n         battery_event.v = battery_voltage_integer + battery_voltage_decimal;\n         battery_event.n = \"battery_voltage\";\n         battery_event.u = \"V\";\n         event_array.push(battery_event);\n         }\n         break;\n     } // end case 0x01\n     case 0x02: { // 0x02 is the status payload for tamper event messages\n         if (bytes.length == 3) {\n         var tamper_switch_event = {};\n         var tamper_switch_closed = Boolean(bytes[2]); // closed means the device is in a secure state. Opened means the case was removed or the sensor was removed from the wall\n         tamper_switch_event.n = \"tamper_switch_closed\";\n         tamper_switch_event.vb = tamper_switch_closed; // 0x00 = tamper switch released, 0x01 = tamper switch pressed\n         event_array.push(tamper_switch_event);\n         }\n         break;\n     } // end case 0x02\n     case 0xfd: { // 0xfd is the test message\n         var magnet_event = {}; \n         magnet_event.n = \"magnet_device_test\";\n         magnet_event.v = bytes[2]; // some sensors have more than one byte for status\n         event_array.push(magnet_event);\n         break;\n     } // end case 0xfd\n     default: {\n         break;\n     } // end default case\n     } // end switch(message_type)\n     if (event_array.length === 0) {\n     var unknown_event = {};\n     unknown_event.n = \"unknown_event\";\n     unknown_event.vd = '' + bytes;\n     event_array.push(unknown_event);\n     }\n     var raw_data_event = {};\n     raw_data_event.n = \"raw_data\";\n     raw_data_event.vd = '' + bytes;\n     event_array.push(raw_data_event);\n     return_object.events = event_array;\n     return return_object;\n};\n    \n    // console.log(Decode(0x02, [20,6,3,0]));\n    // module.exports = Decode;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1880,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "c1198623.027748",
        "type": "ui_form",
        "z": "dd7a06b0.e5b738",
        "name": "",
        "label": "",
        "group": "9d46f6ed.e49c68",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "devEUI",
                "value": "input",
                "type": "text",
                "required": true
            },
            {
                "label": "serial",
                "value": "number",
                "type": "number",
                "required": true
            },
            {
                "label": "model",
                "value": "number",
                "type": "text",
                "required": true
            }
        ],
        "formValue": {
            "input": "",
            "number": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "c7d7ac2b.a2bee"
            ]
        ]
    },
    {
        "id": "c7d7ac2b.a2bee",
        "type": "debug",
        "z": "dd7a06b0.e5b738",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "1228482a.ba9a98",
        "type": "inject",
        "z": "6cb4651f.c079fc",
        "name": "inject",
        "repeat": "21600",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "1bedada7.2f5a42"
            ]
        ]
    },
    {
        "id": "bc253bd.6ff82c8",
        "type": "function",
        "z": "6cb4651f.c079fc",
        "name": "",
        "func": "var ip = msg.payload.publicIPv4;\nvar publicIPv4 = flow.get('publicIPv4');\n\nif (ip === publicIPv4) {\n    return [{payload: publicIPv4},null]\n} else {\n    msg.url = \"https://domains.google.com/nic/update?hostname=pines.edgewoods.net&myip=\"+ip;\n    msg.method = \"POST\";\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "x": 550,
        "y": 140,
        "wires": [
            [
                "580f5c8.a5d3da4"
            ],
            [
                "c30a39b5.fd5368"
            ]
        ]
    },
    {
        "id": "c30a39b5.fd5368",
        "type": "http request",
        "z": "6cb4651f.c079fc",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "basic",
        "x": 730,
        "y": 200,
        "wires": [
            [
                "7611995e.76b0d8"
            ]
        ]
    },
    {
        "id": "1bedada7.2f5a42",
        "type": "ip",
        "z": "6cb4651f.c079fc",
        "name": "ip",
        "https": false,
        "timeout": "5000",
        "internalIPv4": true,
        "internalIPv6": false,
        "publicIPv4": true,
        "publicIPv6": false,
        "x": 270,
        "y": 140,
        "wires": [
            [
                "9044b5fb.e12b08"
            ]
        ]
    },
    {
        "id": "7611995e.76b0d8",
        "type": "debug",
        "z": "6cb4651f.c079fc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "9044b5fb.e12b08",
        "type": "change",
        "z": "6cb4651f.c079fc",
        "name": "publicIPv4",
        "rules": [
            {
                "t": "set",
                "p": "publicIPv4",
                "pt": "flow",
                "to": "payload.publicIPv4",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 140,
        "wires": [
            [
                "bc253bd.6ff82c8"
            ]
        ]
    },
    {
        "id": "580f5c8.a5d3da4",
        "type": "debug",
        "z": "6cb4651f.c079fc",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 710,
        "y": 80,
        "wires": []
    },
    {
        "id": "97e1fe04.b407b",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "Add Tag",
        "func": "\nvar nearestStormDistance = msg.payload.nearestStormDistance;\nvar nearestStormBearing = msg.payload.nearestStormBearing;\nvar precipIntensity = msg.payload.precipIntensity;\nvar temperature = msg.payload.temperature;\nvar dewPoint = msg.payload.dewPoint;\nvar humidity = msg.payload.humidity;\nvar pressure = msg.payload.pressure;\nvar windSpeed = msg.payload.windSpeed;\nvar windGust = msg.payload.windGust;\nvar windBearing = msg.payload.windBearing;\nvar cloudCover = msg.payload.cloudCover;\nvar uvIndex = msg.payload.uvIndex;\nvar visibility = msg.payload.visibility;\nvar ozone = msg.payload.ozone;\n\nvar label = \"darksky\";\n\nmsg.payload = [{\n        nearestStormDistance: nearestStormDistance,\n    nearestStormBearing: nearestStormBearing,\n    precipIntensity: precipIntensity,\n    temperature: temperature,\n    dewPoint: dewPoint,\n    humidity: humidity,\n    pressure: pressure,\n    windSpeed: windSpeed,\n    windGust: windGust,\n    windBearing: windBearing,\n    cloudCover: cloudCover,\n    uvIndex: uvIndex,\n    visibility: visibility, \n    ozone: ozone,\n\n},\n{\n    nearestStormDistance: nearestStormDistance,\n    nearestStormBearing: nearestStormBearing,\n    precipIntensity: precipIntensity,\n    temperature: temperature,\n    dewPoint: dewPoint,\n    humidity: humidity,\n    pressure: pressure,\n    windSpeed: windSpeed,\n    windGust: windGust,\n    windBearing: windBearing,\n    cloudCover: cloudCover,\n    uvIndex: uvIndex,\n    visibility: visibility, \n    ozone: ozone,\n \n}];\n\nmsg.measurement = label\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 1560,
        "wires": [
            [
                "28eb4730.a82d88",
                "9472560c.91b758"
            ]
        ]
    },
    {
        "id": "9472560c.91b758",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "312f7cbd.c028a4",
        "name": "",
        "measurement": "weather",
        "precision": "",
        "retentionPolicy": "",
        "x": 680,
        "y": 1560,
        "wires": []
    },
    {
        "id": "5027a0e.1ea556",
        "type": "mqtt in",
        "z": "d75475bd.f0fa48",
        "name": "",
        "topic": "zwave/lux/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "d211c5e.e794238",
        "x": 190,
        "y": 980,
        "wires": [
            [
                "fafc82d7.1ed05"
            ]
        ]
    },
    {
        "id": "fafc82d7.1ed05",
        "type": "json",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 980,
        "wires": [
            [
                "e4c0e436.980568"
            ]
        ]
    },
    {
        "id": "e4c0e436.980568",
        "type": "switch",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "zwave/lux/main",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "zwave/lux/basement",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 530,
        "y": 980,
        "wires": [
            [
                "4c3b5bdf.fc41d4"
            ],
            [],
            []
        ]
    },
    {
        "id": "1ed74165.5d801f",
        "type": "ttn downlink",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "app": "6f408d8b.005a54",
        "dev_id": "temp-rh-1",
        "port": "2",
        "confirmed": true,
        "schedule": "replace",
        "x": 1670,
        "y": 140,
        "wires": []
    },
    {
        "id": "d4c152d5.52b77",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0d0085111218232d",
        "payloadType": "str",
        "x": 1400,
        "y": 140,
        "wires": [
            [
                "1ed74165.5d801f"
            ]
        ]
    },
    {
        "id": "a2c468d2.017848",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 690,
        "y": 580,
        "wires": []
    },
    {
        "id": "4a66209c.69761",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 390,
        "y": 680,
        "wires": []
    },
    {
        "id": "daf6146b.fcd778",
        "type": "moment",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "America/Chicago",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "en_US",
        "output": "timestamp",
        "outputType": "msg",
        "outTz": "Africa/Abidjan",
        "x": 1880,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "25f1d56b.9d61ea",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "Loop Example",
        "func": "var timestamp = \"xxx\";\n\nvar relative_humidity = '';\nvar temperature_cel = '';\nvar battery_life = '';\n\n \n\nvar events = msg.payload.object.events;\nvar events_list = [];\nvar eventsList = [];\n\n \n\nfor (var i = 0 ; i < msg.payload.object.events.length; i++) {\n    events_list.push(msg.payload.object.events[i].n + \",\" + msg.payload.object.events[i].u  + \",\" + msg.payload.object.events[i].v);\n    //eventsList.push(msg.payload.object.events[i].n);\n    //eventsList.push(msg.payload.object.events[i].u);\n    //eventsList.push(msg.payload.object.events[i].v);\n}\n\n \n\nfor (var i = 0 ; i < msg.payload.object.events.length; i++) {\n    if (msg.payload.object.events[i].n === \"temperature\") {\n        var temperature_cel = msg.payload.object.events[i].v;\n\n    }\n    else{\n    if (msg.payload.object.events[i].n === \"relative_humidity\") {\n        var relative_humidity = msg.payload.object.events[i].v;\n    }\n    else {\n    if (msg.payload.object.events[i].n === \"battery_percentage_remaining\") {   \n        var battery_life = msg.payload.object.events[i].v;\n}}}}\n\n \n\nreturn {payload: {events_list: events_list, temperatureC: temperature_cel, rh: relative_humidity, batteryLevel: battery_life, timestamp: timestamp}};",
        "outputs": 1,
        "noerr": 0,
        "x": 1860,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "46acc3fa.0e350c",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "Loop",
        "func": "let dev_id = msg.dev_id;\nlet hardware_serial = msg.hardware_serial;\nlet app_id = msg.app_id;\nlet counter = msg.counter;\nlet events = msg.payload.events;\nlet influxMsg = {};\n\n\n/*\nTO Do...  when unknown_event is passed through to influxdb, it throws 400 bad request error.\nHow can I filter out using an array of bad events in my if statement most efficeintly?\nmap filter?\n\nlet exclusion_list = ['unknown_event', 'raw_data'];\n*/\ninfluxMsg.measurement = \"radio_bridge\";\n//var influxMsg = [];\n\n//if (msg.payload.object.events[i].n === \"temperature\") {\n\n/*\n122719 bdb - Doing a couple things here intentionally:  \n\n1) Stripping off raw_data packets - Already caputring them in mongodb if needed.  \n2) defining influxdb measurement equal to the name of the event from the codec.\n3) defining events[i].n \n\n*/\n\n\nfor (var i = 0 ; i < events.length; i++) {\n    //if (events[i].n !=[\"raw_data\", \"unknown_event\"] ){\n    //if (events[i].n != \"raw_data\" || events[i].n != \"unknown_event\" ) {\n    if (events[i].n != \"raw_data\") {\n        influxMsg = [{\n            measurement: events[i].n,\n            payload: [{\n            dev_id: dev_id,\n            dev_eui: hardware_serial,\n            msg_counter: counter,\n            n: events[i].n,\n            u: events[i].u,\n            v: events[i].v,\n        },{\n            app_id: app_id,\n            device_id: dev_id,\n            event_name: events[i].n\n        }],}];\n        node.send(influxMsg);\n    } else {}\n}    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 500,
        "wires": [
            [
                "a2c468d2.017848",
                "ec29ed1.8c1291",
                "30af0c89.c3a304"
            ]
        ]
    },
    {
        "id": "f130f339.e745b",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "dewpoint",
        "func": "/**\n * File dew.js\n * Copyright 2003 Wolfgang Kuehn\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *       http://www.apache.org/licenses/LICENSE-2.0\n */\n\nvar KELVIN = 0;\nvar CELSIUS = 1;\nvar FAHRENHEIT = 2;\n\nvar C_OFFSET = 273.15;\nvar F_C = 9.0/5.0;\n\nvar RELATIVE = 1;\nvar ABSOLUTE = 2;\n\nfunction Temperatures() {\n  this.array = new Array();\n}\n\nTemperatures.prototype.add = function(t) {\n  if (t.value!=null)\n    this.array[this.array.length] = t;\n}\n\nvar temps = new Temperatures();\n\nTemperatures.prototype.syncronize = function() {\n  for (var e in this.array) {\n    var t = this.array[e];\n    if (t.value!=null)\n      t.onChange();\n  }\n}\n\nTemperatures.prototype.setScale = function(scale) {\n  for (var e in this.array)\n    this.array[e].setScale(scale);\n}\n\nfunction Temperature(value, scale, elem) {\n  this.value;\n  this.scale = scale;\n  this.element = elem;\n  this.set(value);\n  temps.add(this);\n}\n\nTemperature.prototype.onChange = function() {\n  var v = stringToFloat(this.element.value);\n  this.set(v);\n}\n\nTemperature.prototype.update = function() {\n  if (this.element!=null)\n    this.element.value = truncate(this.get(),2,ABSOLUTE);\n}\n\nTemperature.prototype.setScale = function(scale) {\n  this.scale = scale;\n  this.update(); \n}\n\nTemperature.prototype.getScale = function() {\n  return this.scale;\n}\n\nTemperature.prototype.getKelvin = function() {\n  return this.value;\n}\n\nTemperature.prototype.setKelvin = function(value) {\n  this.value = value;\n  this.update();\n}\n\nTemperature.prototype.get = function() {\n  var v = this.value;\n  if (this.scale==CELSIUS)\n    v -= C_OFFSET;\n  else if (this.scale==FAHRENHEIT)\n    v = 32+(v-C_OFFSET)*F_C;\n  return v;\n}\n\nTemperature.prototype.set = function(value) {\n  this.value = value;\n  if (this.scale==CELSIUS)\n    this.value += C_OFFSET;\n  else if (this.scale==FAHRENHEIT)\n    this.value = (this.value-32)/F_C+C_OFFSET;\n  this.update();\n}\n\nTemperature.prototype.setElement = function(element) {\n  this.element = element;\n  this.update();\n}\n\nfunction TemperatureChange(value, scale, element) {\n  this.scale = scale;\n  this.element = element;\n  this.set(value);\n  temps.add(this);\n}\n\nTemperatureChange.prototype = new Temperature();\n\nTemperatureChange.prototype.get = function() {\n  var v = this.value;\n  if (this.scale==FAHRENHEIT)\n    v = v*F_C;\n  return v;\n}\n\nTemperatureChange.prototype.set = function(value) {\n  this.value = value;\n  if (this.scale==FAHRENHEIT)\n    this.value = this.value/F_C;\n  this.update();\n}\n\n\nvar minT = 173; // -100 Deg. C.\nvar maxT = 678;\n\n/*\n * Saturation Vapor Pressure formula for range -100..0 Deg. C.\n * This is taken from\n *   ITS-90 Formulations for Vapor Pressure, Frostpoint Temperature,\n *   Dewpoint Temperature, and Enhancement Factors in the Range 100 to +100 C\n * by Bob Hardy\n * as published in \"The Proceedings of the Third International Symposium on Humidity & Moisture\",\n * Teddington, London, England, April 1998\n*/\nvar k0 = -5.8666426e3;\nvar k1 = 2.232870244e1;\nvar k2 = 1.39387003e-2;\nvar k3 = -3.4262402e-5;\nvar k4 = 2.7040955e-8;\nvar k5 = 6.7063522e-1;\n\nfunction pvsIce(T) {\n  lnP = k0/T + k1 + (k2 + (k3 + (k4*T))*T)*T + k5*Math.log(T);\n  return Math.exp(lnP);\n}\n\n/**\n * Saturation Vapor Pressure formula for range 273..678 Deg. K.\n * This is taken from the\n *   Release on the IAPWS Industrial Formulation 1997\n *   for the Thermodynamic Properties of Water and Steam\n * by IAPWS (International Association for the Properties of Water and Steam),\n * Erlangen, Germany, September 1997.\n *\n * This is Equation (30) in Section 8.1 \"The Saturation-Pressure Equation (Basic Equation)\"\n*/\n\nvar n1 = 0.11670521452767e4;\nvar n6 = 0.14915108613530e2;\nvar n2 = -0.72421316703206e6;\nvar n7 = -0.48232657361591e4;\nvar n3 = -0.17073846940092e2;\nvar n8 = 0.40511340542057e6;\nvar n4 = 0.12020824702470e5;\nvar n9 = -0.23855557567849;\nvar n5 = -0.32325550322333e7;\nvar n10 = 0.65017534844798e3;\n\nfunction pvsWater(T) {\n  var th = T+n9/(T-n10);\n  var A = (th+n1)*th+n2;\n  var B = (n3*th+n4)*th+n5;\n  var C = (n6*th+n7)*th+n8;\n\n  var p = 2*C/(-B+Math.sqrt(B*B-4*A*C));\n  p *= p;\n  p *= p;\n  return p*1e6;\n}\n\n/**\n * Compute Saturation Vapor Pressure for minT<T[Deg.K]<maxT.\n */\nfunction PVS(T) {\n  if (T<minT || T>maxT) return NaN;\n  else if (T<C_OFFSET)\n    return pvsIce(T);\n  else\n    return pvsWater(T);\n}\n\n/**\n * Compute dewPoint for given relative humidity RH[%] and temperature T[Deg.K].\n */\nfunction dewPoint(RH,T) {\n  return solve(PVS, RH/100*PVS(T), T);\n}\n\n/**\n * Newton's Method to solve f(x)=y for x with an initial guess of x0.\n */\nfunction solve(f,y,x0) {\n  var x = x0;\n  var maxCount = 10;\n  var count = 0;\n  do {\n    var xNew;\n    var dx = x/1000; \n    var z=f(x);\n    xNew = x + dx*(y-z)/(f(x+dx)-z);\n    if (Math.abs((xNew-x)/xNew)<0.0001) \n      return xNew;\n    else if (count>maxCount) {\n      xnew=NaN; \n      throw new Error(1, \"Solver does not converge.\");\n      break; \n    }\n    x = xNew;\n    count ++;\n  } while (true);\n}\n\nfunction truncate(x, precision, mode) {\n  if (x==0)\n    return 0;\n  var magnitude;\n  if (mode==RELATIVE)\n    magnitude = Math.round(Math.log(Math.abs(x))/Math.LN10);\n  else\n    magnitude = 0;\n  var scale = Math.pow(10,precision-magnitude);\n  return Math.round(x*scale)/scale;\n}\n\nfunction stringToFloat(s) {\n  if (s.search(/^\\s*(\\+|\\-)?\\d*(\\.\\d*)?\\s*$/)==-1)\n    throw new Error(\"'\"+s+\"' is not a valid number\", \"'\"+s+\"' is not a valid number\");\n  return parseFloat(s);\n}\n\nfunction convert () {\n  var scale;\n  if (document.FORM.TScale[1].checked)\n    scale = 1;\n  else if (document.FORM.TScale[2].checked)\n    scale = 2;\n  else\n    scale = 0;\n\n  this.temps.setScale(scale);\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1840,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "9d787256.2aba5",
        "type": "comment",
        "z": "ec6d74c6.c4cc58",
        "name": "edgewood-radiobridge",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "7f1c0d8.6afdaf4",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3480,
        "y": 340,
        "wires": [
            [
                "eca698ec.7227b8"
            ]
        ]
    },
    {
        "id": "eca698ec.7227b8",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3650,
        "y": 340,
        "wires": [
            [
                "8bf144c1.c0e188"
            ]
        ]
    },
    {
        "id": "8bf144c1.c0e188",
        "type": "http request",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "authType": "",
        "x": 3810,
        "y": 340,
        "wires": [
            [
                "5ae0207c.14bf9"
            ]
        ]
    },
    {
        "id": "5ae0207c.14bf9",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 3990,
        "y": 340,
        "wires": []
    },
    {
        "id": "1dd7679a.6f0008",
        "type": "http response",
        "z": "1fb0f65a.416e0a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 420,
        "y": 700,
        "wires": []
    },
    {
        "id": "f45bf366.e4d24",
        "type": "http in",
        "z": "1fb0f65a.416e0a",
        "name": "",
        "url": "/alerts",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 190,
        "y": 720,
        "wires": [
            [
                "92e23c2.3c595c",
                "1dd7679a.6f0008",
                "a3c5204.942a2e"
            ]
        ]
    },
    {
        "id": "92e23c2.3c595c",
        "type": "debug",
        "z": "1fb0f65a.416e0a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 410,
        "y": 800,
        "wires": []
    },
    {
        "id": "4021b97b.680d08",
        "type": "comment",
        "z": "f0a81a8c.fdbd88",
        "name": "Get Bearer Token from Identity 2.0 - Non Prod",
        "info": "",
        "x": 210,
        "y": 780,
        "wires": []
    },
    {
        "id": "69121873.bfec48",
        "type": "function",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "func": "msg.url = \"https://oauth.iam.perf.target.com/auth/oauth/v2/token?\";\n//msg.url = \"https://oauth.iam.target.com/auth/oauth/v2/token?\";\nmsg.method = \"POST\"\nmsg.headers = {\n     ['Content-Type']: 'application/x-www-form-urlencoded'\n }\nuser = msg.user;\npassword = msg.password;\nmsg.payload = \"grant_type=password&username=\"+user+\"&password=\"+password+\"&scope=profile%20email%20openid\";  \n\nreturn msg;\n\n/*\nvar newMsg ={\n \"url\":\"https://oauth.iam.perf.target.com/auth/oauth/v2/token?\",\n \"method\": \"POST\",\n headers: {\n     ['Content-Type']: 'application/x-www-form-urlencoded'\n }\n payload: \"grant_type=password&username=smrtmaxawo&password=v.cR!@]cX@#9{tD&scope=profile%20email%20openid\";  \n  \n \n};\n\n\nreturn newMsg;\n\n*/\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 860,
        "wires": [
            [
                "3aa044df.91f17c"
            ]
        ]
    },
    {
        "id": "a773ca9b.67d378",
        "type": "inject",
        "z": "f0a81a8c.fdbd88",
        "name": "Refresh Token",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "d75b8ef2.e89f7"
            ]
        ]
    },
    {
        "id": "f2b5ec79.b5fd2",
        "type": "debug",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1050,
        "y": 860,
        "wires": []
    },
    {
        "id": "3aa044df.91f17c",
        "type": "http request",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "d15f51f5.84dab",
        "proxy": "",
        "authType": "basic",
        "x": 600,
        "y": 860,
        "wires": [
            [
                "ca03314b.483ec"
            ]
        ]
    },
    {
        "id": "484fd9a.1ddd728",
        "type": "function",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "func": "global.set('stg_access_token', msg.payload.access_token)\nglobal.set('stg_token_expires_in', msg.payload.expires_in)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 930,
        "y": 860,
        "wires": [
            [
                "f2b5ec79.b5fd2"
            ]
        ]
    },
    {
        "id": "b2801519.96e678",
        "type": "inject",
        "z": "f0a81a8c.fdbd88",
        "name": "Show Token",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "d96d58de.fa6988"
            ]
        ]
    },
    {
        "id": "d96d58de.fa6988",
        "type": "function",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "func": "access_token = global.get('stg_access_token');\nexpires_in = global.get('stg_token_expires_in');\nreturn {\npayload: access_token\n};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 920,
        "wires": [
            [
                "14c84aff.359da5"
            ]
        ]
    },
    {
        "id": "14c84aff.359da5",
        "type": "debug",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 430,
        "y": 920,
        "wires": []
    },
    {
        "id": "3f4919e6.999106",
        "type": "comment",
        "z": "f0a81a8c.fdbd88",
        "name": "Get Bearer Token from Identity 2.0 - Prod",
        "info": "",
        "x": 200,
        "y": 420,
        "wires": []
    },
    {
        "id": "b6200f3b.8c73c",
        "type": "function",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "func": "//Get Prod OAUTH2 Token\n//msg.url = \"https://oauth.iam.com/auth/oauth/v2/token?\";\n\n//msg.url = \"https://account.thethingsnetwork.org/users/token\";\n//msg.url = \"https://discovery.thethingsnetwork.org\";\nmsg.url = \"http://us-west.thethings.network:8084/applications/edgewood-radiobridge/devices\"\nmsg.method = \"GET\"\nmsg.headers = {\n     //['Content-Type']: 'application/x-www-form-urlencoded'\n ['Content-Type']: 'application/json',\n ['Authorization']: 'Key ttn-account-v2.-YkDLtt2CsWBuCE4pdcL1T7R0Aca7o7waUrHXURfbT0'\n    \n}\nuser = msg.user;\npassword = msg.password;\n//msg.payload = \"grant_type=password&username=\"+user+\"&password=\"+password+\"&scope=profile%20email%20openid\";  \n\n/*msg.payload = {\n  grant_type: 'password',\n  username: user,\n  password: password,\n  /*scope: [\n    'apps:app_id',\n    'gateways:gateway_id',\n    'components:component_id'\n  ]*/\n\n//};\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 500,
        "wires": [
            [
                "65a44495.7a194c"
            ]
        ]
    },
    {
        "id": "d0d9e6b3.908ff8",
        "type": "inject",
        "z": "f0a81a8c.fdbd88",
        "name": "Refresh Token",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "c8aac3ac.1c3a5"
            ]
        ]
    },
    {
        "id": "ff126b33.d85178",
        "type": "debug",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1110,
        "y": 600,
        "wires": []
    },
    {
        "id": "65a44495.7a194c",
        "type": "http request",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "d15f51f5.84dab",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 620,
        "y": 500,
        "wires": [
            [
                "7168bed.d78ce4"
            ]
        ]
    },
    {
        "id": "95e3bc1f.15da3",
        "type": "function",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "func": "global.set('prd_access_token', msg.payload.access_token)\nglobal.set('prd_token_expires_in', msg.payload.expires_in)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 990,
        "y": 600,
        "wires": [
            [
                "ff126b33.d85178"
            ]
        ]
    },
    {
        "id": "f493d409.b41528",
        "type": "inject",
        "z": "f0a81a8c.fdbd88",
        "name": "Show Token",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "16d58cf0.34d363"
            ]
        ]
    },
    {
        "id": "16d58cf0.34d363",
        "type": "function",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "func": "access_token = global.get('prd_access_token')\nexpires_in = global.get('prd_token_expires_in')\nreturn {\npayload: access_token\n};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 560,
        "wires": [
            [
                "b8d1a8b5.763138"
            ]
        ]
    },
    {
        "id": "b8d1a8b5.763138",
        "type": "debug",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 430,
        "y": 560,
        "wires": []
    },
    {
        "id": "d75b8ef2.e89f7",
        "type": "credentials",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "props": [
            {
                "value": "user",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            }
        ],
        "x": 310,
        "y": 860,
        "wires": [
            [
                "69121873.bfec48"
            ]
        ]
    },
    {
        "id": "ca03314b.483ec",
        "type": "change",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "user",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "password",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 860,
        "wires": [
            [
                "484fd9a.1ddd728"
            ]
        ]
    },
    {
        "id": "c8aac3ac.1c3a5",
        "type": "credentials",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "props": [
            {
                "value": "user",
                "type": "msg"
            },
            {
                "value": "password",
                "type": "msg"
            },
            {
                "value": "api_key_prod",
                "type": "global"
            }
        ],
        "x": 310,
        "y": 500,
        "wires": [
            [
                "b6200f3b.8c73c"
            ]
        ]
    },
    {
        "id": "7d9580b.d97db8",
        "type": "change",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "user",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "password",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 600,
        "wires": [
            [
                "95e3bc1f.15da3"
            ]
        ]
    },
    {
        "id": "e2ccc85b.9b9bb8",
        "type": "http in",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "url": "/ttn_callback",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "7cc13e27.edf92",
                "8db89cd1.cd43c"
            ]
        ]
    },
    {
        "id": "8db89cd1.cd43c",
        "type": "http response",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "7cc13e27.edf92",
        "type": "debug",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "7168bed.d78ce4",
        "type": "debug",
        "z": "f0a81a8c.fdbd88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 460,
        "wires": []
    },
    {
        "id": "a5e4ddbc.c0c65",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "store",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 80,
        "wires": [
            [
                "f37298a3.0dcca8"
            ]
        ]
    },
    {
        "id": "f37298a3.0dcca8",
        "type": "change",
        "z": "ec6d74c6.c4cc58",
        "name": "TTN Access Key",
        "rules": [
            {
                "t": "set",
                "p": "ttn_access_key",
                "pt": "flow",
                "to": "Key ttn-account-v2.-YkDLtt2CsWBuCE4pdcL1T7R0Aca7o7waUrHXURfbT0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e668ed62.169d2",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "func": "var ttn_access_key = flow.get('ttn_access_key');\n\nmsg.url = \"http://us-west.thethings.network:8084/applications/edgewood-radiobridge/devices\"\nmsg.method = \"GET\"\nmsg.headers = {\n ['Authorization']: 'Key ttn-account-v2.-YkDLtt2CsWBuCE4pdcL1T7R0Aca7o7waUrHXURfbT0',\n ['Content-Type']: 'application/json',\n}\n//ttn-account-v2.-YkDLtt2CsWBuCE4pdcL1T7R0Aca7o7waUrHXURfbT0\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2200,
        "y": 260,
        "wires": [
            [
                "80319f00.bc71b"
            ]
        ]
    },
    {
        "id": "e64723e6.d472",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "store",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2050,
        "y": 260,
        "wires": [
            [
                "e668ed62.169d2"
            ]
        ]
    },
    {
        "id": "80319f00.bc71b",
        "type": "http request",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2370,
        "y": 260,
        "wires": [
            [
                "24c31bd3.2815a4"
            ]
        ]
    },
    {
        "id": "4dd48e57.f62ec",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2650,
        "y": 260,
        "wires": []
    },
    {
        "id": "24c31bd3.2815a4",
        "type": "json",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2510,
        "y": 260,
        "wires": [
            [
                "4dd48e57.f62ec"
            ]
        ]
    },
    {
        "id": "4ded6e4a.a7b12",
        "type": "mqtt in",
        "z": "d75475bd.f0fa48",
        "name": "",
        "topic": "fail2ban",
        "qos": "2",
        "datatype": "auto",
        "broker": "d211c5e.e794238",
        "x": 190,
        "y": 3040,
        "wires": [
            [
                "398fce3e.cd6682"
            ]
        ]
    },
    {
        "id": "6b61c805.33b068",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 730,
        "y": 3000,
        "wires": []
    },
    {
        "id": "398fce3e.cd6682",
        "type": "json",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 3040,
        "wires": [
            [
                "9483efde.8dd9c"
            ]
        ]
    },
    {
        "id": "7707f44c.5cae1c",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "",
        "func": "let key = msg.payload.key;\nlet latitude = msg.payload.latitude;\nlet longitude = msg.payload.longitude;\nlet name = msg.payload.name;\nlet geohash = msg.payload.geohash;\n\nlet timezone = msg.payload.timezone;\nlet ip = msg.payload.ip;\nlet region = msg.payload.region;\nlet city = msg.payload.city;\nlet zip = msg.payload.zip;\n\nlet measurement = 'geoloc'\n\n\ninfluxMsg = [{\n    measurement: measurement,\n        payload: [{\n            key: key,\n            latitude: latitude,\n            longitude: longitude,\n            name: name,\n            geohash: geohash,\n            ip_address: ip\n        },{\n        country: key,\n        country_name: name,\n        region: region,\n        ip: ip\n        }],}]\n\n\n\nreturn influxMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 3040,
        "wires": [
            [
                "c950885.2d96478",
                "6b61c805.33b068",
                "ea510d2a.d80a5"
            ]
        ]
    },
    {
        "id": "c950885.2d96478",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "3208e3f3.e7db9c",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 790,
        "y": 3040,
        "wires": []
    },
    {
        "id": "9483efde.8dd9c",
        "type": "geohash",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "x": 440,
        "y": 3040,
        "wires": [
            [
                "7707f44c.5cae1c"
            ]
        ]
    },
    {
        "id": "ebb3f0e7.5f033",
        "type": "comment",
        "z": "d75475bd.f0fa48",
        "name": "Fail2Ban",
        "info": "",
        "x": 200,
        "y": 2960,
        "wires": []
    },
    {
        "id": "ea510d2a.d80a5",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 730,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "8d02ab1a.33a988",
        "type": "ttn uplink",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "app": "8be518d1.d9d1c8",
        "dev_id": "",
        "field": "",
        "x": 220,
        "y": 1440,
        "wires": [
            [
                "7f570de8.443464",
                "e57f053a.a6ec48",
                "878519f3.342c88"
            ]
        ]
    },
    {
        "id": "ec619516.779fb8",
        "type": "function",
        "z": "e25331a6.a6639",
        "name": "mbox",
        "func": "if ( context.global.evb_info[msg.eui] == null) {\n  context.global.evb_info[msg.eui] = { msg_counter: 0 };\n  \n}\n\nvar evb_info = context.global.evb_info ;\nvar evb_sensors = {};\n\n/*\n * Evaluation board properties.\n */\nvar EVB_TYPE = {\n  none: 0,\n  led_1: 1,\n  led_2: 2,\n  lux_max: 3,\n  lux_min: 4,\n  lux: 5,\n  barometer_max: 6,\n  barometer_min: 7,\n  barometer: 8,\n  temperature_max: 9,\n  temperature__min: 10,\n  temperature: 11,\n  accelerometer_max: 12,\n  accelerometer_min: 13,\n  accelerometer: 14,\n  tx_interval: 15,\n  amps_max: 16,\n  amps_min: 17,\n  amps: 18,\n  m2x_device: 19,\n  m2x_key: 20,\n};\n\n/*\n * Process the EVB LoRa payload.\n *\n * EVB payload contains one or more TLV fields.\n *\n * [<type: accelerometer><length: 6><x-high><x-low><y-high><y-low><z-high><z-low>]\n * [<type: barometer><length: 3><byte2><byte1><byte0>]\n * [<type: temperature><length: 2><byte-high><byte-low>]\n * \n */\nfor (var index = 0; index < msg.payload.length; ) {\n  var type = msg.payload[index++];\n//   var length = msg.payload[index++];\n  var value;\n  console.log(\"type: \" + type + \" length: \" );\n\n  switch (type) {\n  case EVB_TYPE.lux:\n    if (typeof(evb_sensors.light) == \"undefined\") {\n      evb_sensors.light = {};\n    }\n\n    value = msg.payload[index++] << 8;\n    value |= msg.payload[index++];\n    value = value * 0.24;\n\n    evb_sensors.light.lux = value;\n    break;\n  case EVB_TYPE.barometer:\n    if (typeof(evb_sensors.barometer) == \"undefined\") {\n      evb_sensors.barometer = {};\n    }\n\n    value = msg.payload[index++] << 16;\n    value |= msg.payload[index++] << 8;\n    value |= msg.payload[index++];\n    value = value * 0.00025;\n\n    evb_sensors.barometer.pa = value;\n    break;\n  case EVB_TYPE.accelerometer:\n    if (typeof(evb_sensors.accelerometer) == \"undefined\") {\n      evb_sensors.accelerometer = {};\n    }\n    // evb_sensors.accelerometer.x = (msg.payload[index++] << 24) >> 16;\n    var x1 = evb_sensors.accelerometer.x = msg.payload[index++] ;\n    // x1 = ~x1 ; \n    // x1 = ( x1 + 1 ) % 256; \n    evb_sensors.accelerometer.x = x1 * 0.0625//; / 15;\n    // evb_sensors.accelerometer.y = (msg.payload[index++] << 24) >> 16;\n    var y1 = evb_sensors.accelerometer.y = msg.payload[index++] ;\n    // y1 = ~ y1 ; \n    // y1 = ( y1 + 1 ) % 256;\n    \n    var y1 = evb_sensors.accelerometer.y = y1 * 0.0625 ; // / 15 ;\n\n    // evb_sensors.accelerometer.z = (msg.payload[index++] << 24) >> 16;\n    var z1 = evb_sensors.accelerometer.z = msg.payload[index++] ;\n    // z1 = ~ z1 ; \n    // z1 = ( z1 + 1 ) % 256; \n    // z1 = z1 - 128;\n    var z1 = evb_sensors.accelerometer.z = z1 * 0.0625; // / 15;\n    break;\n  case EVB_TYPE.temperature:\n    if (typeof(evb_sensors.temperature) == \"undefined\") {\n      evb_sensors.temperature = {};\n    }\n\n    value = (msg.payload[index++] << 24) >> 16;\n    value |= msg.payload[index++];\n    value = value * 0.0625;\n\n    evb_sensors.temperature.c = value;\n    break;\n  case EVB_TYPE.tx_interval:\n    evb_sensors.tx_timer = msg.payload[index++];\n    break;\n  case EVB_TYPE.m2x_device:\n    value = msg.payload.slice(index, index + length);\n    evb_info[msg.eui].m2x_device = \"\";\n    for (var j = 0; j < length; j++) {\n      evb_info[msg.eui].m2x_device += String.fromCharCode(value[j]);\n    }\n    break;\n  case EVB_TYPE.m2x_key:\n    value = msg.payload.slice(index, index + length);\n    evb_info[msg.eui].m2x_key = \"\";\n    for (var j = 0; j < length; j++) {\n      evb_info[msg.eui].m2x_key += String.fromCharCode(value[j]);\n    }\n    break;\n  default:\n    index += length;\n    break;\n  }\n}\n\nif (typeof(evb_info[msg.eui].m2x_device) == \"undefined\") {\n  console.log(\"No m2x_device registered for \" + msg.eui);\n//   return null;\n}\nif (typeof(evb_info[msg.eui].m2x_key) == \"undefined\") {\n  console.log(\"No m2x_key registered for \" + msg.eui);\n//   return null;\n}\nmsg.m2x_device = evb_info[msg.eui].m2x_device;\nmsg.m2x_key = evb_info[msg.eui].m2x_key;\nmsg.evb = evb_sensors;\n\n/*\n * Return msg to continue the flow\n */\nif (typeof msg.evb != \"undefined\"){\n  return msg;     \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "8dcecbd9.cdbbe8",
        "type": "comment",
        "z": "ec6d74c6.c4cc58",
        "name": "http TTN",
        "info": "",
        "x": 2040,
        "y": 180,
        "wires": []
    },
    {
        "id": "c31034c9.52aa08",
        "type": "trigger",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 980,
        "y": 1520,
        "wires": [
            [
                "4fa6bad9.438c44"
            ]
        ]
    },
    {
        "id": "4fa6bad9.438c44",
        "type": "ui_gauge",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "group": "7f2ebed0.9fcd3",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "ping",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1150,
        "y": 1520,
        "wires": []
    },
    {
        "id": "7f570de8.443464",
        "type": "switch",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "property": "payload.measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "LoRa_demo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GPS_survey",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 1440,
        "wires": [
            [
                "55fd3b1e.39ce74",
                "6bd0cdb7.3986b4",
                "de6f17c0.a78da8",
                "98ccd05b.4dd4b",
                "d0066b2d.7b1918",
                "37234500.9c946c",
                "3d0033b5.0ddfbc",
                "92c164a6.a5e438"
            ],
            [
                "467cbadf.d25174",
                "3e45b65d.ff3aaa",
                "56a7c4cd.562f5c",
                "c31034c9.52aa08",
                "8fe302c4.bfbf4"
            ]
        ]
    },
    {
        "id": "56a7c4cd.562f5c",
        "type": "ui_text",
        "z": "ec6d74c6.c4cc58",
        "group": "7f2ebed0.9fcd3",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload.temp_f}}",
        "layout": "row-spread",
        "x": 990,
        "y": 1640,
        "wires": []
    },
    {
        "id": "467cbadf.d25174",
        "type": "ui_text",
        "z": "ec6d74c6.c4cc58",
        "group": "7f2ebed0.9fcd3",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Latitude",
        "format": "{{msg.payload.latitude}}",
        "layout": "row-spread",
        "x": 980,
        "y": 1560,
        "wires": []
    },
    {
        "id": "3e45b65d.ff3aaa",
        "type": "ui_text",
        "z": "ec6d74c6.c4cc58",
        "group": "7f2ebed0.9fcd3",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Longitude",
        "format": "{{msg.payload.longitude}}",
        "layout": "row-spread",
        "x": 980,
        "y": 1600,
        "wires": []
    },
    {
        "id": "e57f053a.a6ec48",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 390,
        "y": 1320,
        "wires": []
    },
    {
        "id": "55fd3b1e.39ce74",
        "type": "ui_text",
        "z": "ec6d74c6.c4cc58",
        "group": "87d11ec8.ee325",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Lux",
        "format": "{{msg.payload.lux}}",
        "layout": "row-spread",
        "x": 970,
        "y": 1280,
        "wires": []
    },
    {
        "id": "6bd0cdb7.3986b4",
        "type": "ui_text",
        "z": "ec6d74c6.c4cc58",
        "group": "87d11ec8.ee325",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Moisture",
        "format": "{{msg.payload.moisture}}",
        "layout": "row-spread",
        "x": 980,
        "y": 1320,
        "wires": []
    },
    {
        "id": "de6f17c0.a78da8",
        "type": "ui_text",
        "z": "ec6d74c6.c4cc58",
        "group": "87d11ec8.ee325",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload.temp_f}}",
        "layout": "row-spread",
        "x": 990,
        "y": 1240,
        "wires": []
    },
    {
        "id": "98ccd05b.4dd4b",
        "type": "ui_text",
        "z": "ec6d74c6.c4cc58",
        "group": "87d11ec8.ee325",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "X_Acc",
        "format": "{{msg.payload.x_acc}}",
        "layout": "row-spread",
        "x": 970,
        "y": 1360,
        "wires": []
    },
    {
        "id": "d0066b2d.7b1918",
        "type": "ui_text",
        "z": "ec6d74c6.c4cc58",
        "group": "87d11ec8.ee325",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Y_Acc",
        "format": "{{msg.payload.y_acc}}",
        "layout": "row-spread",
        "x": 970,
        "y": 1400,
        "wires": []
    },
    {
        "id": "37234500.9c946c",
        "type": "ui_text",
        "z": "ec6d74c6.c4cc58",
        "group": "87d11ec8.ee325",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Z_Acc",
        "format": "{{msg.payload.z_acc}}",
        "layout": "row-spread",
        "x": 970,
        "y": 1440,
        "wires": []
    },
    {
        "id": "3d0033b5.0ddfbc",
        "type": "trigger",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 980,
        "y": 1480,
        "wires": [
            [
                "a79c555b.d6b1b8"
            ]
        ]
    },
    {
        "id": "a79c555b.d6b1b8",
        "type": "ui_gauge",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "group": "87d11ec8.ee325",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "ping",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 1150,
        "y": 1480,
        "wires": []
    },
    {
        "id": "68558be6.2aeb44",
        "type": "inject",
        "z": "d785d216.3d84",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0E07020D08060C2105000D0B015D",
        "payloadType": "bin",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "64bedf57.8a0d4",
                "54dd38b1.17f798"
            ]
        ]
    },
    {
        "id": "64bedf57.8a0d4",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 310,
        "y": 160,
        "wires": []
    },
    {
        "id": "54dd38b1.17f798",
        "type": "function",
        "z": "d785d216.3d84",
        "name": "",
        "func": "var bytes = msg.payload;\n\n\n\nif (bytes.length == 14){\n  var event_array = []; \n  var evb_sensors = {};\n  var EVB_TYPE = {\n    none: 0,\n    led_1: 1,\n    led_2: 2,\n    lux_max: 3,\n    lux_min: 4,\n    lux: 5,\n    barometer_max: 6,\n    barometer_min: 7,\n    barometer: 8,\n    temperature_max: 9,\n    temperature__min: 10,\n    temperature: 11,\n    accelerometer_max: 12,\n    accelerometer_min: 13,\n    accelerometer: 14,\n    tx_interval: 15,\n    amps_max: 16,\n    amps_min: 17,\n    amps: 18,\n    m2x_device: 19,\n    m2x_key: 20,\n  };\n\n/*\n * Process the EVB LoRa payload.\n *\n * EVB payload contains one or more TLV fields.\n *\n * [<type: accelerometer><length: 6><x-high><x-low><y-high><y-low><z-high><z-low>]\n * [<type: barometer><length: 3><byte2><byte1><byte0>]\n * [<type: temperature><length: 2><byte-high><byte-low>]\n * \n */\n  for (var index = 0; index < bytes.length; ) {\n    var type = bytes[index++];\n  //   var length = bytes[index++];\n    var value;\n    console.log(\"type: \" + type + \" length: \" );\n\n    switch (type) {\n    case EVB_TYPE.lux:\n      if (typeof(evb_sensors.light) == \"undefined\") {\n        evb_sensors.light = {};\n      }\n      value = bytes[index++] << 8;\n      value |= bytes[index++];\n      value = value * 0.24;\n      //evb_sensors.light.lux = value;\n      var lux = value; \n      //web of things event array payload\n      var lux_lighting_event = {};\n      lux_lighting_event.n = \"lux_level\";\n      lux_lighting_event.u = \"lx\";\n      lux_lighting_event.v = lux;\n      event_array.push(lux_lighting_event);\n      break;\n    case EVB_TYPE.barometer:\n      if (typeof(evb_sensors.barometer) == \"undefined\") {\n        evb_sensors.barometer = {};\n      }\n      value = bytes[index++] << 16;\n      value |= bytes[index++] << 8;\n      value |= bytes[index++];\n      value = value * 0.00025;\n      evb_sensors.barometer.pa = value;\n      var barometer = value;\n\n     //web of things event array payload\n      var relative_humidity_event = {};\n      relative_humidity_event.n = \"relative_humidity\";\n      relative_humidity_event.u = \"%RH\";\n      relative_humidity_event.v = barometer;\n      event_array.push(relative_humidity_event);\n      break;\n    case EVB_TYPE.temperature:\n      if (typeof(evb_sensors.temperature) == \"undefined\") {\n      evb_sensors.temperature = {};\n      }\n      value = (bytes[index++] << 24) >> 16;\n      value |= bytes[index++];\n      value = value * 0.0625;\n      evb_sensors.temperature.c = value;\n      evb_sensors.temperature.f =  evb_sensors.temperature.c * 9 / 5 + 32; \n      //web of things event array payload\n      var air_temp_event = {};\n      air_temp_event.n = \"temperature\";\n      air_temp_event.u = \"Fah\";\n      air_temp_event.v = evb_sensors.temperature.f;\n      event_array.push(air_temp_event);\n      break;\n \n    case EVB_TYPE.accelerometer:\n      if (typeof(evb_sensors.accelerometer) == \"undefined\") {\n      evb_sensors.accelerometer = {};\n      }\n      // evb_sensors.accelerometer.x = (bytes[index++] << 24) >> 16;\n      var x1 = evb_sensors.accelerometer.x = bytes[index++] ;\n      // x1 = ~x1 ; \n      // x1 = ( x1 + 1 ) % 256; \n      evb_sensors.accelerometer.x = x1 * 0.0625;//; / 15;\n      var accelerometer_x = x1 * 0.0625;//; / 15;\n      // evb_sensors.accelerometer.y = (bytes[index++] << 24) >> 16;\n      var y1 = evb_sensors.accelerometer.y = bytes[index++] ;\n      // y1 = ~ y1 ; \n      // y1 = ( y1 + 1 ) % 256;\n        \n      y1 = evb_sensors.accelerometer.y = y1 * 0.0625 ; // / 15 ;\n      // evb_sensors.accelerometer.z = (bytes[index++] << 24) >> 16;\n      var z1 = evb_sensors.accelerometer.z = bytes[index++] ;\n      // z1 = ~ z1 ; \n      // z1 = ( z1 + 1 ) % 256; \n      // z1 = z1 - 128;\n      z1 = evb_sensors.accelerometer.z = z1 * 0.0625; // / 15;\n      //web of things event array payload\n      accelerometer_x_event = {};\n      accelerometer_x_event.n = \"x\";\n      accelerometer_x_event.u = \"axis\";\n      accelerometer_x_event.n = accelerometer_x;\n      event_array.push(accelerometer_x_event);\n      \n      accelerometer_y_event = {};\n      accelerometer_y_event.n = \"\";\n      accelerometer_y_event.u = \"axis\";\n      accelerometer_y_event.n = accelerometer_y;\n      event_array.push(accelerometer_y_event);\n    \n      accelerometer_z_event = {};\n      accelerometer_z_event.n = \"z\";\n      accelerometer_z_event.u = \"axis\";\n      accelerometer_z_event.n = accelerometer_z;\n      event_array.push(accelerometer_z_event);\n      break;    \n      \n      }\n     return {\n      //temp_c: evb_sensors.temperature.c,\n      measurement: \"LoRa_demo\",\n      temp_f: temperature_fah,\n      barometer: barometer,\n      lux: lux,\n      //x_acc: accelerometer_x,\n      //y_acc: accelerometer_y,\n      //z_acc: accelerometer_z,\n      payload: {events: event_array},\n  };\n\n\n  }\n\n} else if (bytes.length == 11) {\n\n/*\nGPS Survey Sweep Payload\nByte 0 is 0\nByte 1 is temperature in Celsius\nByte 2 is 0\nByte 3-6 is GPS Latitude\nByte 7-10 is GPS Longitude\nBytes 10+ is padding with 0\n*/  \n\n  var temp_c = bytes[1];\n  temp_f = 1.8 * temp_c + 32; //\n  //web of things event array\n  var gps_air_temp_event = {};\n  gps_air_temp_event.n = \"temperature\";\n  gps_air_temp_event.u = \"Fah\";\n  gps_air_temp_event.v = temp_f;\n  gps_event_array.push(lair_temp_event);\n\n  var latitude = ((bytes[3] << 24) | (bytes[4] << 16) | (bytes[5] << 8 ) | bytes[6])  / 2147483648*90; // 2^31 * 90\n  let gps_latitude_event = {};\n  gps_latitude_event.n = \"latitude\";\n  gps_latitude_event.u = \"deg\";\n  gps_latitude_event.v = latitude;\n  gps_event_array.push(gps_latitude_event);\n\n  var longitude = ((bytes[7] << 24) | (bytes[8] << 16) | (bytes[9] << 8 ) | bytes[10]) / 2147483648*180; // 2^31 * 180\n  var gps_longitude_event = {};\n  gps_longitude_event.n = \"longitude\";\n  gps_longitude_event.u = \"deg\";\n  gps_longitude_event.v = longitude;\n  gps_event_array.push(gps_longitude_event);\n\n // if (port === 1) decoded.led = bytes[0];\n\n  return {\n    measurement: \"GPS_survey\",\n    temperature_f: temperature_fah,\n    latitude: latitude,\n    longitude: longitude,\n    events: gps_event_array,\n  };\n} else {\nreturn { payload: \"unexpected byte length\"};  \n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 260,
        "wires": [
            [
                "2fb86440.877f8c"
            ]
        ]
    },
    {
        "id": "2fb86440.877f8c",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 430,
        "y": 260,
        "wires": []
    },
    {
        "id": "f2730c07.eb44d",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 790,
        "y": 1640,
        "wires": []
    },
    {
        "id": "878519f3.342c88",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "TTN Mbox Codec",
        "func": "//function Decoder(bytes, port) {\n  // Decode an uplink message from a buffer\n  // (array) of bytes to an object of fields.\n  //var decoded = {};\n\n  // if (port === 1) decoded.led = bytes[0];\n\n  //return decoded;\n//}\n//function Decode(fPort, bytes) {\n\n\n//function Decoder(bytes, port) {\nvar bytes = msg.payload_raw;\n\n\nif (bytes.length == 14){  \n  var event_array = [];\n  var evb_sensors = {};\n  var EVB_TYPE = {\n    none: 0,\n    led_1: 1,\n    led_2: 2,\n    lux_max: 3,\n    lux_min: 4,\n    lux: 5,\n    barometer_max: 6,\n    barometer_min: 7,\n    barometer: 8,\n    temperature_max: 9,\n    temperature__min: 10,\n    temperature: 11,\n    accelerometer_max: 12,\n    accelerometer_min: 13,\n    accelerometer: 14,\n    tx_interval: 15,\n    amps_max: 16,\n    amps_min: 17,\n    amps: 18,\n    m2x_device: 19,\n    m2x_key: 20,\n  };\n\n/*\n * Process the EVB LoRa payload.\n *\n * EVB payload contains one or more TLV fields.\n *\n * [<type: accelerometer><length: 6><x-high><x-low><y-high><y-low><z-high><z-low>]\n * [<type: barometer><length: 3><byte2><byte1><byte0>]\n * [<type: temperature><length: 2><byte-high><byte-low>]\n * \n */\n  for (var index = 0; index < bytes.length; ) {\n    var type = bytes[index++];\n  //   var length = bytes[index++];\n    var value;\n    console.log(\"type: \" + type + \" length: \" );\n\n    switch (type) {\n    case EVB_TYPE.lux:\n      if (typeof(evb_sensors.light) == \"undefined\") {\n        evb_sensors.light = {};\n      }\n      value = bytes[index++] << 8;\n      value |= bytes[index++];\n      value = value * 0.24;\n      evb_sensors.light.lux = value;\n      // web of things \n      var lux_lighting_event = {};\n      lux_lighting_event.n = \"lux_level\";\n      lux_lighting_event.u = \"lx\";\n      lux_lighting_event.v = evb_sensors.light.lux;\n      event_array.push(lux_lighting_event);\n      break;\n    case EVB_TYPE.barometer:\n      if (typeof(evb_sensors.barometer) == \"undefined\") {\n        evb_sensors.barometer = {};\n      }\n      value = bytes[index++] << 16;\n      value |= bytes[index++] << 8;\n      value |= bytes[index++];\n      value = value * 0.00025;\n      evb_sensors.barometer.pa = value;\n      \n      //web of things event array payload\n      var relative_humidity_event = {};\n      relative_humidity_event.n = \"relative_humidity\";\n      relative_humidity_event.u = \"%RH\";\n      relative_humidity_event.v = evb_sensors.barometer.pa;\n      event_array.push(relative_humidity_event);\n      \n      break;\n    case EVB_TYPE.temperature:\n      if (typeof(evb_sensors.temperature) == \"undefined\") {\n      evb_sensors.temperature = {};\n      }\n      value = (bytes[index++] << 24) >> 16;\n      value |= bytes[index++];\n      value = value * 0.0625;\n      evb_sensors.temperature.c = value;\n      evb_sensors.temperature.f =  value * 9 / 5 + 32; \n      //web of things event array payload\n      var air_temp_event = {};\n      air_temp_event.n = \"temperature\";\n      air_temp_event.u = \"Fah\";\n      air_temp_event.v = evb_sensors.temperature.f;\n      event_array.push(air_temp_event);\n      \n      break;\n    case EVB_TYPE.accelerometer:\n      if (typeof(evb_sensors.accelerometer) == \"undefined\") {\n      evb_sensors.accelerometer = {};\n      }\n      // evb_sensors.accelerometer.x = (bytes[index++] << 24) >> 16;\n      var x1 = evb_sensors.accelerometer.x = bytes[index++] ;\n      // x1 = ~x1 ; \n      // x1 = ( x1 + 1 ) % 256; \n      evb_sensors.accelerometer.x = x1 * 0.0625;//; / 15;\n      // evb_sensors.accelerometer.y = (bytes[index++] << 24) >> 16;\n      var y1 = evb_sensors.accelerometer.y = bytes[index++] ;\n      // y1 = ~ y1 ; \n      // y1 = ( y1 + 1 ) % 256;\n        \n      y1 = evb_sensors.accelerometer.y = y1 * 0.0625 ; // / 15 ;\n      // evb_sensors.accelerometer.z = (bytes[index++] << 24) >> 16;\n      var z1 = evb_sensors.accelerometer.z = bytes[index++] ;\n      // z1 = ~ z1 ; \n      // z1 = ( z1 + 1 ) % 256; \n      // z1 = z1 - 128;\n      z1 = evb_sensors.accelerometer.z = z1 * 0.0625; // / 15;\n      //web of things event array payload\n      var accelerometer_x_event = {};\n      accelerometer_x_event.n = \"x\";\n      accelerometer_x_event.u = \"axis\";\n      accelerometer_x_event.n = evb_sensors.accelerometer.x;\n      event_array.push(accelerometer_x_event);\n      \n      var accelerometer_y_event = {};\n      accelerometer_y_event.n = \"\";\n      accelerometer_y_event.u = \"axis\";\n      accelerometer_y_event.n = evb_sensors.accelerometer.y;\n      event_array.push(accelerometer_y_event);\n      \n      var accelerometer_z_event = {};\n      accelerometer_z_event.n = \"z\";\n      accelerometer_z_event.u = \"axis\";\n      accelerometer_z_event.n = evb_sensors.accelerometer.z;\n      event_array.push(accelerometer_z_event);\n      break;    \n      }\n  }\n  return {\n    //temp_c: evb_sensors.temperature.c,\n    measurement: \"LoRa_demo\",\n    temp_f: evb_sensors.temperature.f,\n    moisture: evb_sensors.barometer.pa,\n    lux: evb_sensors.light.lux,\n    x_acc: evb_sensors.accelerometer.x,\n    y_acc: evb_sensors.accelerometer.y,\n    z_acc: evb_sensors.accelerometer.z,\n    events: event_array,\n  };\n} \n\nif (bytes.length == 11) {\n\n/*\n * Process the EVB LoRa GPS Survey Sweep payload.\n * \n * Byte 0 is 0\n * Byte 1 is temperature in Celsius\n * Byte 2 is 0\n * Byte 3-6 is GPS Latitude\n * Byte 7-10 is GPS Longitude\n * Bytes 10+ is padding with 0\n * \n*/  \n  var gps_event_array = [];\n  \n  var temp_c = bytes[1];\n  var temp_f = 1.8 * temp_c + 32;\n  //web of things event array payload\n  var gps_air_temp_event = {};\n  gps_air_temp_event.n = \"temperature\";\n  gps_air_temp_event.u = \"Fah\";\n  gps_air_temp_event.v = temp_f;\n  gps_event_array.push(gps_air_temp_event);\n  \n  var latitude = ((bytes[3] << 24) | (bytes[4] << 16) | (bytes[5] << 8 ) | bytes[6])  / 2147483648*90; // 2^31 * 90\n  //web of things event array payload\n  var gps_latitude_event = {};\n  gps_latitude_event.n = \"latitude\";\n  gps_latitude_event.u = \"deg\";\n  gps_latitude_event.v = latitude;\n  gps_event_array.push(gps_latitude_event);\n  \n  var longitude = ((bytes[7] << 24) | (bytes[8] << 16) | (bytes[9] << 8 ) | bytes[10]) / 2147483648*180; // 2^31 * 180\n  //web of things event array payload\n  var gps_longitude_event = {};\n  gps_longitude_event.n = \"longitude\";\n  gps_longitude_event.u = \"deg\";\n  gps_longitude_event.v = longitude;\n  gps_event_array.push(gps_longitude_event);  \n  \n // if (port === 1) decoded.led = bytes[0];\n  return {\n    measurement: \"GPS_survey\",\n    events: gps_event_array,\n    temp_f: temp_f,\n    latitude: latitude,\n    longitude: longitude,\n  };\n} else { return { payload: \"unexpected byte length\"};  \n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 1640,
        "wires": [
            [
                "f2730c07.eb44d"
            ]
        ]
    },
    {
        "id": "ec29ed1.8c1291",
        "type": "link out",
        "z": "ec6d74c6.c4cc58",
        "name": "radioBridgeLoop",
        "links": [
            "30abf79f.0ec348"
        ],
        "x": 635,
        "y": 500,
        "wires": []
    },
    {
        "id": "f176a108.7a96d",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "1adb25b4.af776a",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 510,
        "y": 2460,
        "wires": []
    },
    {
        "id": "30abf79f.0ec348",
        "type": "link in",
        "z": "d75475bd.f0fa48",
        "name": "radioBridgeLoopIn",
        "links": [
            "ec29ed1.8c1291",
            "77043666.4d5d48",
            "c2cf5c70.aaab",
            "e6a2374a.5ee028"
        ],
        "x": 215,
        "y": 2380,
        "wires": [
            [
                "f176a108.7a96d"
            ]
        ]
    },
    {
        "id": "92c164a6.a5e438",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "Loop",
        "func": "let dev_id = msg.dev_id;\nlet hardware_serial = msg.hardware_serial;\nlet app_id = msg.app_id;\nlet counter = msg.counter;\nlet events = msg.payload.events;\nlet influxMsg = {};\n\n\n/*\nTO Do...  when unknown_event is passed through to influxdb, it throws 400 bad request error.\nHow can I filter out using an array of bad events in my if statement most efficeintly?\nmap filter?\n\nlet exclusion_list = ['unknown_event', 'raw_data'];\n*/\ninfluxMsg.measurement = \"radio_bridge\";\n//var influxMsg = [];\n\n//if (msg.payload.object.events[i].n === \"temperature\") {\n\n/*\n122719 bdb - Doing a couple things here intentionally:  \n\n1) Stripping off raw_data packets - Already caputring them in mongodb if needed.  \n2) defining influxdb measurement equal to the name of the event from the codec.\n3) defining events[i].n \n\n*/\n\n\nfor (var i = 0 ; i < events.length; i++) {\n    //if (events[i].n !=[\"raw_data\", \"unknown_event\"] ){\n    if (events[i].n != \"raw_data\") {\n        influxMsg = [{\n            measurement: events[i].n,\n            payload: [{\n            dev_id: dev_id,\n            dev_eui: hardware_serial,\n            msg_counter: counter,\n            n: events[i].n,\n            u: events[i].u,\n            v: events[i].v,\n        },{\n            app_id: app_id,\n            device_id: dev_id,\n            event_name: events[i].n\n        }],}];\n        node.send(influxMsg);\n    } else {}\n}    \n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 1200,
        "wires": [
            [
                "7f05c1bb.5f016"
            ]
        ]
    },
    {
        "id": "7f05c1bb.5f016",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1150,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8fe302c4.bfbf4",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "func": "let dev_id = msg.dev_id;\nlet hardware_serial = msg.hardware_serial;\nlet app_id = msg.app_id;\nlet counter = msg.counter;\nlet events = msg.payload.events;\nlet influxMsg = {};\n\nlet latitude = msg.payload.latitude;\nlet longitude = msg.payload.longitude;\nlet temp_f = msg.payload.temp_f;\nlet frequency = msg.metadata.frequency;\nlet data_rate = msg.metadata.data_rate\nlet airtime = msg.metadata.airtime;\n\n\nlet measurement = msg.payload.measurement;\nlet geoloc = \"mbox gps survey\"\n\ninfluxMsg = [{\nmeasurement: measurement,\npayload: [{\n    dev_id: dev_id,\n    dev_eui: hardware_serial,\n    msg_counter: counter,\n    latitude: latitude,\n    longitude: longitude,\n    temp_f: temp_f,\n    frequency: frequency,\n    data_rate: data_rate,\n    airtime: airtime,\n    },{\n    app_id: app_id,\n    device_id: dev_id,\n    event_name: geoloc,\n    }],}];\n\nreturn influxMsg;    ",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 1680,
        "wires": [
            [
                "ab76c53c.5b4f78",
                "761461.a7a63ba"
            ]
        ]
    },
    {
        "id": "d622c24d.b2d",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1230,
        "y": 1800,
        "wires": []
    },
    {
        "id": "e7228b7d.dfabb8",
        "type": "link out",
        "z": "ec6d74c6.c4cc58",
        "name": "mboxTTN",
        "links": [
            "56a1fccf.ecb884",
            "d43cfd50.963c4"
        ],
        "x": 1315,
        "y": 1680,
        "wires": []
    },
    {
        "id": "56a1fccf.ecb884",
        "type": "link in",
        "z": "d75475bd.f0fa48",
        "name": "mboxTTNin",
        "links": [
            "e7228b7d.dfabb8"
        ],
        "x": 215,
        "y": 2500,
        "wires": [
            [
                "f176a108.7a96d"
            ]
        ]
    },
    {
        "id": "d43cfd50.963c4",
        "type": "link in",
        "z": "524fa936.044d78",
        "name": "gpsSurveyMongo",
        "links": [
            "e7228b7d.dfabb8"
        ],
        "x": 195,
        "y": 700,
        "wires": [
            [
                "f2b54818.50dcb8"
            ]
        ]
    },
    {
        "id": "f2b54818.50dcb8",
        "type": "mongodb out",
        "z": "524fa936.044d78",
        "mongodb": "705e49f4.ec4728",
        "name": "",
        "collection": "gps_survey",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 535,
        "y": 700,
        "wires": []
    },
    {
        "id": "66d0b681.4b50a8",
        "type": "mongodb in",
        "z": "524fa936.044d78",
        "mongodb": "705e49f4.ec4728",
        "name": "",
        "collection": "bdb_mbox",
        "operation": "find",
        "x": 530,
        "y": 800,
        "wires": [
            [
                "e7446218.c6a45"
            ]
        ]
    },
    {
        "id": "eb35736.9f13a9",
        "type": "inject",
        "z": "524fa936.044d78",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 800,
        "wires": [
            [
                "a8c02d81.9f2fd"
            ]
        ]
    },
    {
        "id": "a8c02d81.9f2fd",
        "type": "function",
        "z": "524fa936.044d78",
        "name": "",
        "func": "msg.query = \"select * from gps_survey\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 800,
        "wires": [
            [
                "66d0b681.4b50a8"
            ]
        ]
    },
    {
        "id": "840bde45.6de3e",
        "type": "debug",
        "z": "524fa936.044d78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1090,
        "y": 800,
        "wires": []
    },
    {
        "id": "d23271fe.20f68",
        "type": "comment",
        "z": "524fa936.044d78",
        "name": "LoRaWAN Survey Sweep GPS db",
        "info": "",
        "x": 220,
        "y": 660,
        "wires": []
    },
    {
        "id": "e747cd63.154c1",
        "type": "function",
        "z": "d785d216.3d84",
        "name": "Prometheus OpenMetrics ",
        "func": "\n\n\n/*\n# HELP metric_name Description of the metric\n# TYPE metric_name type\n# Comment that's not parsed by prometheus\nhttp_requests_total{method=\"post\",code=\"400\"}  3   1395066363000\n*/\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ab76c53c.5b4f78",
        "type": "geohash",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "property": "payload.events",
        "x": 1080,
        "y": 1800,
        "wires": [
            [
                "d622c24d.b2d"
            ]
        ]
    },
    {
        "id": "d66ec734.e963e8",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1350,
        "y": 1620,
        "wires": []
    },
    {
        "id": "4d504261.43ad5c",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2120,
        "y": 1700,
        "wires": [
            [
                "1603a11b.64cfdf"
            ]
        ]
    },
    {
        "id": "1603a11b.64cfdf",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "",
        "func": "msg.url = 'https://10.0.0.205:8080/api/apiVer'\nmsg.method = 'GET'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2290,
        "y": 1700,
        "wires": [
            [
                "337ae6ba.01d52a"
            ]
        ]
    },
    {
        "id": "79e3d845.e64948",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2770,
        "y": 1700,
        "wires": []
    },
    {
        "id": "337ae6ba.01d52a",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2450,
        "y": 1700,
        "wires": [
            [
                "3204d6f2.0995ba"
            ]
        ]
    },
    {
        "id": "3204d6f2.0995ba",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2590,
        "y": 1700,
        "wires": [
            [
                "79e3d845.e64948"
            ]
        ]
    },
    {
        "id": "c3f0f185.5992",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "f1bbe200.adbf9"
            ]
        ]
    },
    {
        "id": "f1bbe200.adbf9",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "",
        "func": "let hostname = flow.get('rainMachine_ip')\n\nmsg.url = 'https://'+hostname+':8080/api/4/auth/login'\nmsg.method = 'POST'\nmsg.payload = {\n    \"pwd\": \"happyhour\", \n    \"remember\":0\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 330,
        "y": 320,
        "wires": [
            [
                "33c710e7.72b7f"
            ]
        ]
    },
    {
        "id": "b12fed07.189f4",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 870,
        "y": 260,
        "wires": []
    },
    {
        "id": "33c710e7.72b7f",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 570,
        "y": 320,
        "wires": [
            [
                "d6e3e0a8.3fd48"
            ]
        ]
    },
    {
        "id": "d6e3e0a8.3fd48",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 710,
        "y": 320,
        "wires": [
            [
                "b12fed07.189f4",
                "69152718.fa36b8"
            ]
        ]
    },
    {
        "id": "69152718.fa36b8",
        "type": "change",
        "z": "171b21f.9e6efde",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "rainMachine_access_token",
                "pt": "flow",
                "to": "payload.access_token",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "rainMachine_token_expiration",
                "pt": "flow",
                "to": "payload.expiration",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "29a2d12d.7ef01e",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2060,
        "y": 1080,
        "wires": [
            [
                "8fadb99e.a53238"
            ]
        ]
    },
    {
        "id": "8fadb99e.a53238",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "",
        "func": "var token = flow.get('rainMachine_access_token');\nmsg.url = 'https://10.0.0.205:8080/api/4/dailystats?access_token='+token;\nmsg.method = 'GET'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2230,
        "y": 1080,
        "wires": [
            [
                "cac0b660.2fa4f8"
            ]
        ]
    },
    {
        "id": "6a904f99.d457c",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2710,
        "y": 1080,
        "wires": []
    },
    {
        "id": "cac0b660.2fa4f8",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2390,
        "y": 1080,
        "wires": [
            [
                "c617cecc.c8b65"
            ]
        ]
    },
    {
        "id": "c617cecc.c8b65",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2530,
        "y": 1080,
        "wires": [
            [
                "6a904f99.d457c"
            ]
        ]
    },
    {
        "id": "4b636090.1cd92",
        "type": "function",
        "z": "e25331a6.a6639",
        "name": "Zurn",
        "func": "var rmsg = {};\nrmsg.payload = {};\n\nvar payloadBuffer = msg.payload;\n\n// Convert the bytes in payloadBuffer to an array.\nvar bArray = [];\n\nfor ( var i = 0; i < payloadBuffer.length; i++ )\n{\n    var code = payloadBuffer.charCodeAt(i);\n\n    bArray.push(code & 0xff);\n}\n\nnode.warn( bArray) ;\n\n// If the payloadBuffer is 11 bytes in length, assume Zurn valve.  \n\nif ( bArray.length >= 11 )\n{\n    // Compute the sensorId (from the first 4 bytes)\n    var sensorId = 0;\n    \n    for ( var i = 0; i < 4; i++ )\n        sensorId = (sensorId * 0x100) + bArray[i];\n\n    // MessageNum and commandId are just the 5th and\n    // 6th byte\n    var messageNum = bArray[4];\n    var commandId = bArray[5];\n    \n    // Copy the fields to an array\n    var fields = [];\n    \n    for ( var i = 6; i < 10; i++ )\n        fields.push(bArray[i]);\n    \n    // CRC is the 11th byte\n    var crc = bArray[10];\n    \n    rmsg.payload.sensorId = sensorId;\n    rmsg.payload.messageNum = messageNum;\n    rmsg.payload.commandId = commandId;\n    rmsg.payload.fields = fields;\n    rmsg.payload.crc = crc;\n    \n    rmsg.topic = \"tgtlora/smartbuildings/watervalve\";\n}\nelse if ( bArray.length > 11 ) \n{\n    var lux = bArray[5];\n}\nelse\n{\n    rmsg.payload.payload_raw = payloadBuffer;\n    \n    rmsg.topic = \"tgt/smartbuildings/json\";\n}\n\n// Timestamp is part of the original msg, not the payload string\nrmsg.payload.timestamp = msg.timestamp;\n\nreturn rmsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "3228c77f.863658",
        "type": "moment",
        "z": "d785d216.3d84",
        "name": "",
        "topic": "",
        "input": "payload",
        "inputType": "msg",
        "inTz": "America/Chicago",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "",
        "locale": "en_US",
        "output": "timestamp",
        "outputType": "msg",
        "outTz": "America/Chicago",
        "x": 860,
        "y": 120,
        "wires": [
            [
                "505df277.c5eb6c"
            ]
        ]
    },
    {
        "id": "59fe2442.11800c",
        "type": "inject",
        "z": "d785d216.3d84",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 660,
        "y": 120,
        "wires": [
            [
                "3228c77f.863658"
            ]
        ]
    },
    {
        "id": "505df277.c5eb6c",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1050,
        "y": 120,
        "wires": []
    },
    {
        "id": "f163cbf1.8ece38",
        "type": "comment",
        "z": "171b21f.9e6efde",
        "name": "AUTH",
        "info": "",
        "x": 130,
        "y": 260,
        "wires": []
    },
    {
        "id": "e8716492.b5a9f8",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "82800",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10.0.0.207",
        "payloadType": "str",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "e8d22fe3.98463"
            ]
        ]
    },
    {
        "id": "e8d22fe3.98463",
        "type": "change",
        "z": "171b21f.9e6efde",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "rainMachine_ip",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e04789c1.e93e28",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "provision",
        "func": "let hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/provision?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2120,
        "y": 200,
        "wires": [
            [
                "71c77090.a990d"
            ]
        ]
    },
    {
        "id": "d98d49a2.584a98",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2710,
        "y": 200,
        "wires": []
    },
    {
        "id": "71c77090.a990d",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2390,
        "y": 200,
        "wires": [
            [
                "a06c0610.ac6a28"
            ]
        ]
    },
    {
        "id": "a06c0610.ac6a28",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2530,
        "y": 200,
        "wires": [
            [
                "d98d49a2.584a98"
            ]
        ]
    },
    {
        "id": "abdf86f5.3d5188",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1960,
        "y": 200,
        "wires": [
            [
                "e04789c1.e93e28"
            ]
        ]
    },
    {
        "id": "d42103bf.50ec5",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "zone/start",
        "func": "let zone_id = msg.payload;\nlet hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/zone/'+zone_id+'/start?access_token='+access_token;\nmsg.method = 'POST';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2140,
        "y": 360,
        "wires": [
            [
                "cc08aa7e.376148"
            ]
        ]
    },
    {
        "id": "272864b2.8693fc",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2730,
        "y": 360,
        "wires": []
    },
    {
        "id": "cc08aa7e.376148",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2410,
        "y": 360,
        "wires": [
            [
                "26c1fd3.96dd502"
            ]
        ]
    },
    {
        "id": "26c1fd3.96dd502",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2590,
        "y": 360,
        "wires": [
            [
                "272864b2.8693fc"
            ]
        ]
    },
    {
        "id": "90a726bd.f74118",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 1970,
        "y": 360,
        "wires": [
            [
                "d42103bf.50ec5"
            ]
        ]
    },
    {
        "id": "71788fc7.f6874",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "zone/stop",
        "func": "let zone_id = msg.payload;\nlet hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/zone/'+zone_id+'/stop?access_token='+access_token;\nmsg.method = 'POST';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2140,
        "y": 440,
        "wires": [
            [
                "82e699cc.03a248"
            ]
        ]
    },
    {
        "id": "165d61ef.ef135e",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2730,
        "y": 440,
        "wires": []
    },
    {
        "id": "82e699cc.03a248",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2410,
        "y": 440,
        "wires": [
            [
                "11f90b0b.737995"
            ]
        ]
    },
    {
        "id": "11f90b0b.737995",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2590,
        "y": 440,
        "wires": [
            [
                "165d61ef.ef135e"
            ]
        ]
    },
    {
        "id": "4701d5a8.f51bec",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 1970,
        "y": 440,
        "wires": [
            [
                "71788fc7.f6874"
            ]
        ]
    },
    {
        "id": "d3604b0b.5e1d38",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "watering/zone",
        "func": "let zone_id = msg.payload;\nlet hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/watering/zone?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2160,
        "y": 540,
        "wires": [
            [
                "dac86e37.11b34"
            ]
        ]
    },
    {
        "id": "83e6042f.8bbb08",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2890,
        "y": 540,
        "wires": []
    },
    {
        "id": "dac86e37.11b34",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2410,
        "y": 540,
        "wires": [
            [
                "9b5cfaf6.706558"
            ]
        ]
    },
    {
        "id": "9b5cfaf6.706558",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2590,
        "y": 540,
        "wires": [
            [
                "831ca230.193fb"
            ]
        ]
    },
    {
        "id": "f8e3c9d.2583238",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "inject",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1970,
        "y": 540,
        "wires": [
            [
                "d3604b0b.5e1d38"
            ]
        ]
    },
    {
        "id": "831ca230.193fb",
        "type": "bigsplitter",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload.zones",
        "x": 2740,
        "y": 540,
        "wires": [
            [
                "83e6042f.8bbb08"
            ],
            []
        ]
    },
    {
        "id": "cc875c80.5e815",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "watering/log",
        "func": "let zone_id = msg.payload;\nlet hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/watering/log?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2150,
        "y": 720,
        "wires": [
            [
                "fd656c16.2b292"
            ]
        ]
    },
    {
        "id": "3af60ceb.a0b564",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2890,
        "y": 720,
        "wires": []
    },
    {
        "id": "fd656c16.2b292",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2410,
        "y": 720,
        "wires": [
            [
                "be33fef3.83c7f"
            ]
        ]
    },
    {
        "id": "be33fef3.83c7f",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2590,
        "y": 720,
        "wires": [
            [
                "43aac5a3.e47aac"
            ]
        ]
    },
    {
        "id": "72f6ee63.cdc31",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "inject",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 1970,
        "y": 720,
        "wires": [
            [
                "cc875c80.5e815"
            ]
        ]
    },
    {
        "id": "e0c87058.3944f",
        "type": "bigsplitter",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload.zones",
        "x": 2740,
        "y": 720,
        "wires": [
            [
                "3af60ceb.a0b564"
            ],
            []
        ]
    },
    {
        "id": "43aac5a3.e47aac",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2730,
        "y": 760,
        "wires": []
    },
    {
        "id": "85c8fe4d.ce6b2",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "zone",
        "func": "let hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/zone?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 540,
        "wires": [
            [
                "cc735508.ae8b28"
            ]
        ]
    },
    {
        "id": "cd86f017.fbcae",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 910,
        "y": 540,
        "wires": []
    },
    {
        "id": "cc735508.ae8b28",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 590,
        "y": 540,
        "wires": [
            [
                "a242ed47.cc4e3"
            ]
        ]
    },
    {
        "id": "a242ed47.cc4e3",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 770,
        "y": 540,
        "wires": [
            [
                "cd86f017.fbcae"
            ]
        ]
    },
    {
        "id": "64bbad1.ee1f954",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "85c8fe4d.ce6b2"
            ]
        ]
    },
    {
        "id": "e4aab55.7912d48",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "zone/properties",
        "func": "let hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/zone/properties?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 480,
        "wires": [
            [
                "b6faeb40.3d6288"
            ]
        ]
    },
    {
        "id": "274a7a5f.6f9536",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1090,
        "y": 480,
        "wires": []
    },
    {
        "id": "b6faeb40.3d6288",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 590,
        "y": 480,
        "wires": [
            [
                "ccdda0bb.0e14b"
            ]
        ]
    },
    {
        "id": "ccdda0bb.0e14b",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 770,
        "y": 480,
        "wires": [
            [
                "611099e8.560828"
            ]
        ]
    },
    {
        "id": "5e16fc49.04fed4",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": "30",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "e4aab55.7912d48"
            ]
        ]
    },
    {
        "id": "611099e8.560828",
        "type": "change",
        "z": "171b21f.9e6efde",
        "name": "persist zones",
        "rules": [
            {
                "t": "set",
                "p": "zones",
                "pt": "flow",
                "to": "payload.zones",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 480,
        "wires": [
            [
                "274a7a5f.6f9536"
            ]
        ]
    },
    {
        "id": "6beda2aa.6bc38c",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "provision",
        "payloadType": "str",
        "x": 2160,
        "y": 1920,
        "wires": [
            [
                "8c51405.678f3c"
            ]
        ]
    },
    {
        "id": "8c51405.678f3c",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "",
        "func": "var token = flow.get('rainMachine_access_token');\nlet api = msg.payload\n\nmsg.url = 'https://10.0.0.205:8080/api/4/'+api+'?access_token='+token;\n\n\n\nmsg.method = 'GET'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2350,
        "y": 1980,
        "wires": [
            [
                "5cbdb22.506cb4c"
            ]
        ]
    },
    {
        "id": "9da599fd.7c97e8",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2770,
        "y": 1980,
        "wires": []
    },
    {
        "id": "5cbdb22.506cb4c",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2510,
        "y": 1980,
        "wires": [
            [
                "5cab8d8a.2e5b34",
                "57692dd4.1d36e4"
            ]
        ]
    },
    {
        "id": "5cab8d8a.2e5b34",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2650,
        "y": 1980,
        "wires": [
            [
                "9da599fd.7c97e8"
            ]
        ]
    },
    {
        "id": "e904d760.e055f8",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "/watering/zone",
        "payloadType": "str",
        "x": 2140,
        "y": 1980,
        "wires": [
            [
                "8c51405.678f3c"
            ]
        ]
    },
    {
        "id": "57d7f5c5.9a138c",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "/zone/simulate",
        "payloadType": "str",
        "x": 2140,
        "y": 2040,
        "wires": [
            [
                "8c51405.678f3c"
            ]
        ]
    },
    {
        "id": "57692dd4.1d36e4",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2650,
        "y": 1920,
        "wires": []
    },
    {
        "id": "b0cf0f61.32df6",
        "type": "comment",
        "z": "171b21f.9e6efde",
        "name": "Zone Properties",
        "info": "",
        "x": 160,
        "y": 420,
        "wires": []
    },
    {
        "id": "bd08e4b5.a06308",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "watering/zone",
        "func": "let hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/watering/zone?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 740,
        "wires": [
            [
                "9f36b157.2fff1"
            ]
        ]
    },
    {
        "id": "8959d509.b31648",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1090,
        "y": 740,
        "wires": []
    },
    {
        "id": "9f36b157.2fff1",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 570,
        "y": 740,
        "wires": [
            [
                "2dc30878.2b0b68"
            ]
        ]
    },
    {
        "id": "2dc30878.2b0b68",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 750,
        "y": 740,
        "wires": [
            [
                "309971dd.ab635e"
            ]
        ]
    },
    {
        "id": "f337e883.90d9b8",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 740,
        "wires": [
            [
                "bd08e4b5.a06308"
            ]
        ]
    },
    {
        "id": "309971dd.ab635e",
        "type": "bigsplitter",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload.zones",
        "x": 920,
        "y": 740,
        "wires": [
            [
                "8959d509.b31648"
            ],
            []
        ]
    },
    {
        "id": "4250c104.ba224",
        "type": "comment",
        "z": "171b21f.9e6efde",
        "name": "Watering Zone Status",
        "info": "",
        "x": 160,
        "y": 680,
        "wires": []
    },
    {
        "id": "2d1afcc0.79cf24",
        "type": "comment",
        "z": "171b21f.9e6efde",
        "name": "Set IP Address",
        "info": "",
        "x": 160,
        "y": 60,
        "wires": []
    },
    {
        "id": "a70d1d90.e721e",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "watering/log",
        "func": "let hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/watering/log/2020-04-01/120?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 1360,
        "wires": [
            [
                "2cedc865.b48c18"
            ]
        ]
    },
    {
        "id": "b9906667.55f468",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1090,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2cedc865.b48c18",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 570,
        "y": 1360,
        "wires": [
            [
                "c01eceab.06356"
            ]
        ]
    },
    {
        "id": "c01eceab.06356",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 750,
        "y": 1360,
        "wires": [
            [
                "b9906667.55f468"
            ]
        ]
    },
    {
        "id": "c1275e5b.e7365",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1360,
        "wires": [
            [
                "a70d1d90.e721e"
            ]
        ]
    },
    {
        "id": "17e2682e.a00e78",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "restrictions/currently",
        "func": "let hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/restrictions/currently?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 860,
        "wires": [
            [
                "a3b942eb.5486b"
            ]
        ]
    },
    {
        "id": "a3b942eb.5486b",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 570,
        "y": 860,
        "wires": [
            [
                "7d330f93.53cb9"
            ]
        ]
    },
    {
        "id": "7d330f93.53cb9",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 750,
        "y": 860,
        "wires": [
            [
                "99208a36.7c4a58"
            ]
        ]
    },
    {
        "id": "2d83abe6.e58fd4",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 860,
        "wires": [
            [
                "17e2682e.a00e78"
            ]
        ]
    },
    {
        "id": "4bd60637.813e18",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "db11d248.010a3",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 380,
        "y": 2080,
        "wires": []
    },
    {
        "id": "877267c2.c87fe8",
        "type": "link in",
        "z": "d75475bd.f0fa48",
        "name": "irrigationRestrictionsInflux",
        "links": [
            "aa2e486d.02fd58"
        ],
        "x": 215,
        "y": 2080,
        "wires": [
            [
                "5581994.f2e4068",
                "4bd60637.813e18"
            ]
        ]
    },
    {
        "id": "5581994.f2e4068",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 330,
        "y": 2140,
        "wires": []
    },
    {
        "id": "99208a36.7c4a58",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "Format for Influx",
        "func": "let hourly = msg.payload.hourly;\nlet freeze = msg.payload.freeze;\nlet month = msg.payload.month;\nlet weekDay = msg.payload.weekDay;\nlet rainDelay = msg.payload.rainDelay;\nlet rainSensor = msg.payload.rainSensor;\nlet rainDelayCounter = msg.payload.rainDelayCounter;\nlet lastLeakDetected = msg.payload.lastLeakDetected;\n\nlet measurement = 'waterRestrictions';\n\nmsg.payload = [{\n    houlry: hourly,\n    freeze: freeze,\n    month: month,\n    weekDay: weekDay,\n    rainDelay: rainDelay,\n},\n{\n    controller: 'edgewood',\n}];\n\nmsg.measurement = measurement;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 940,
        "y": 860,
        "wires": [
            [
                "aa2e486d.02fd58"
            ]
        ]
    },
    {
        "id": "aa2e486d.02fd58",
        "type": "link out",
        "z": "171b21f.9e6efde",
        "name": "irrigationRestrictions",
        "links": [
            "877267c2.c87fe8"
        ],
        "x": 1075,
        "y": 860,
        "wires": []
    },
    {
        "id": "bbb9226b.9d3ed",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "get zone",
        "func": "let zone_id = msg.payload;\nlet hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/zone/'+zone_id+'/start?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2120,
        "y": 280,
        "wires": [
            [
                "bfe7fd87.ba332"
            ]
        ]
    },
    {
        "id": "c7e3ec64.f93a5",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2710,
        "y": 280,
        "wires": []
    },
    {
        "id": "bfe7fd87.ba332",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 2390,
        "y": 280,
        "wires": [
            [
                "d4f5635a.0da7c",
                "7e3fb47b.fe6aac"
            ]
        ]
    },
    {
        "id": "d4f5635a.0da7c",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2570,
        "y": 280,
        "wires": [
            [
                "c7e3ec64.f93a5"
            ]
        ]
    },
    {
        "id": "30139cb6.d25c04",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 1950,
        "y": 280,
        "wires": [
            [
                "bbb9226b.9d3ed"
            ]
        ]
    },
    {
        "id": "7e3fb47b.fe6aac",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2570,
        "y": 240,
        "wires": []
    },
    {
        "id": "a4afd38a.94ace",
        "type": "mqtt in",
        "z": "d785d216.3d84",
        "name": "",
        "topic": "sbux",
        "qos": "2",
        "datatype": "auto",
        "broker": "d211c5e.e794238",
        "x": 190,
        "y": 820,
        "wires": [
            [
                "87773490.8c7238"
            ]
        ]
    },
    {
        "id": "87773490.8c7238",
        "type": "json",
        "z": "d785d216.3d84",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 370,
        "y": 820,
        "wires": [
            [
                "43d46486.aa762c"
            ]
        ]
    },
    {
        "id": "43d46486.aa762c",
        "type": "switch",
        "z": "d785d216.3d84",
        "name": "message_type",
        "property": "payload.message_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device_heartbeat",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "edge_heartbeat",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "telemetry",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 580,
        "y": 820,
        "wires": [
            [
                "4fc30043.d2cdb"
            ],
            [
                "4fc30043.d2cdb"
            ],
            [
                "32fc829c.3c334e"
            ],
            [
                "426ea1d8.3fe06",
                "8d9c4e7b.b5f9d"
            ]
        ]
    },
    {
        "id": "4fc30043.d2cdb",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "heartbeats",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 790,
        "y": 740,
        "wires": []
    },
    {
        "id": "426ea1d8.3fe06",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 770,
        "y": 840,
        "wires": []
    },
    {
        "id": "8d9c4e7b.b5f9d",
        "type": "switch",
        "z": "d785d216.3d84",
        "name": "type",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device_store_information",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 920,
        "wires": [
            [
                "74af0964.e85958"
            ],
            [
                "37a0fa93.b6ecc6"
            ]
        ]
    },
    {
        "id": "74af0964.e85958",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "Store Info",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 920,
        "y": 900,
        "wires": []
    },
    {
        "id": "37a0fa93.b6ecc6",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "Store Info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 920,
        "y": 960,
        "wires": []
    },
    {
        "id": "32fc829c.3c334e",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "telemetry",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 780,
        "y": 800,
        "wires": []
    },
    {
        "id": "2a7ab9d1.6964f6",
        "type": "inject",
        "z": "4576b216.7dd43c",
        "name": "inject",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "c0f540ae.330ea"
            ]
        ]
    },
    {
        "id": "c0f540ae.330ea",
        "type": "function",
        "z": "4576b216.7dd43c",
        "name": "",
        "func": "//\"Authorization: Bearer eyJrIjoidTZUNGNFU3ZMd29jU0dJUmVJYVNwVVVCSEsyRlJiRE8iLCJuIjoibm9kZS1yZWQiLCJpZCI6MX0=\" https://10.0.0.10/grafana/api/dashboards/home\n\n\nlet bearer_token = 'Bearer eyJrIjoidTZUNGNFU3ZMd29jU0dJUmVJYVNwVVVCSEsyRlJiRE8iLCJuIjoibm9kZS1yZWQiLCJpZCI6MX0=';\n\n//msg.url = 'https://10.0.0.10/grafana/api/keys';\nmsg.url = 'https://10.0.0.10/grafana/api/dashboards/home';\nmsg.method = 'GET';\nmsg.headers = {\n    Accept: \"application/json\",\n    'Content-Type': \"application/json\",\n    Authorization: bearer_token,\n};\n\nmsg.payload = {};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 180,
        "wires": [
            [
                "ea03bf2b.36423",
                "495bbcfc.f8a4a4"
            ]
        ]
    },
    {
        "id": "88147ee.83f038",
        "type": "debug",
        "z": "4576b216.7dd43c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 620,
        "y": 180,
        "wires": []
    },
    {
        "id": "ea03bf2b.36423",
        "type": "http request",
        "z": "4576b216.7dd43c",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "d15f51f5.84dab",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "88147ee.83f038"
            ]
        ]
    },
    {
        "id": "495bbcfc.f8a4a4",
        "type": "debug",
        "z": "4576b216.7dd43c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 460,
        "y": 100,
        "wires": []
    },
    {
        "id": "7be4dda3.860c24",
        "type": "inject",
        "z": "4576b216.7dd43c",
        "name": "inject",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "9edaeb16.554698"
            ]
        ]
    },
    {
        "id": "9edaeb16.554698",
        "type": "function",
        "z": "4576b216.7dd43c",
        "name": "",
        "func": "//\"Authorization: Bearer eyJrIjoidTZUNGNFU3ZMd29jU0dJUmVJYVNwVVVCSEsyRlJiRE8iLCJuIjoibm9kZS1yZWQiLCJpZCI6MX0=\" https://10.0.0.10/grafana/api/dashboards/home\n\n\nlet bearer_token = 'Bearer eyJrIjoidTZUNGNFU3ZMd29jU0dJUmVJYVNwVVVCSEsyRlJiRE8iLCJuIjoibm9kZS1yZWQiLCJpZCI6MX0=';\n\nmsg.url = 'https://10.0.0.10/grafana/api/auth/keys';\nmsg.method = 'POST';\nmsg.headers = {\n    Accept: \"application/json\",\n    'Content-Type': \"application/json\",\n    Authorization: bearer_token,\n};\n\nmsg.payload = {\n  \"name\": \"node-red-key\",\n  \"role\": \"Admin\",\n  \"secondsToLive\": null\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 400,
        "wires": [
            [
                "68988a96.ceed24",
                "add540f0.7a4f1"
            ]
        ]
    },
    {
        "id": "bd59b2b1.1293c",
        "type": "debug",
        "z": "4576b216.7dd43c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 620,
        "y": 400,
        "wires": []
    },
    {
        "id": "68988a96.ceed24",
        "type": "http request",
        "z": "4576b216.7dd43c",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "d15f51f5.84dab",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 470,
        "y": 400,
        "wires": [
            [
                "bd59b2b1.1293c"
            ]
        ]
    },
    {
        "id": "add540f0.7a4f1",
        "type": "debug",
        "z": "4576b216.7dd43c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 460,
        "y": 320,
        "wires": []
    },
    {
        "id": "873d3542.8d17a8",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "dailystats",
        "func": "let hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/dailystats/2020-08-14?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 300,
        "y": 1040,
        "wires": [
            [
                "e94d60d9.76869"
            ]
        ]
    },
    {
        "id": "2dffe96.cf8ba16",
        "type": "debug",
        "z": "171b21f.9e6efde",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1090,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e94d60d9.76869",
        "type": "http request",
        "z": "171b21f.9e6efde",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "tls": "f21111d7.3018c",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 570,
        "y": 1040,
        "wires": [
            [
                "d9f0b464.eacef8"
            ]
        ]
    },
    {
        "id": "d9f0b464.eacef8",
        "type": "json",
        "z": "171b21f.9e6efde",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 750,
        "y": 1040,
        "wires": [
            [
                "2dffe96.cf8ba16"
            ]
        ]
    },
    {
        "id": "ae56d93e.27d4f8",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1040,
        "wires": [
            [
                "873d3542.8d17a8"
            ]
        ]
    },
    {
        "id": "bd45c0e8.d64d5",
        "type": "function",
        "z": "171b21f.9e6efde",
        "name": "watering/log/details",
        "func": "let hostname = flow.get('rainMachine_ip');\nlet access_token = flow.get('rainMachine_access_token');\n\n\nmsg.url = 'https://'+hostname+':8080/api/4/watering/log/details/2020-04-01/120?access_token='+access_token;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 330,
        "y": 1440,
        "wires": [
            [
                "2cedc865.b48c18"
            ]
        ]
    },
    {
        "id": "1a1694cc.fbeaeb",
        "type": "inject",
        "z": "171b21f.9e6efde",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1440,
        "wires": [
            [
                "bd45c0e8.d64d5"
            ]
        ]
    },
    {
        "id": "96283cb6.f2955",
        "type": "link out",
        "z": "2500c006.91d75",
        "name": "weatherOut",
        "links": [
            "ba2485bb.db73f8"
        ],
        "x": 675,
        "y": 120,
        "wires": []
    },
    {
        "id": "ba2485bb.db73f8",
        "type": "link in",
        "z": "d75475bd.f0fa48",
        "name": "",
        "links": [
            "96283cb6.f2955"
        ],
        "x": 195,
        "y": 1860,
        "wires": [
            [
                "ab3fc863.2ea098",
                "76ba7b8f.482f64",
                "1ccd779d.946288"
            ]
        ]
    },
    {
        "id": "ca11ca63.add948",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 590,
        "y": 1700,
        "wires": []
    },
    {
        "id": "cd972e22.548cf",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "",
        "func": "wind_speed = msg.payload.windSpeed;\n\ninfluxMsg = [{\n    measurement: events[i].n,\n    payload: [{\n    wind_speed: wind_speed,\n},{\n    event_name: events[i].n\n}],}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2000,
        "y": 3140,
        "wires": [
            []
        ]
    },
    {
        "id": "ab3fc863.2ea098",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "apparentTemperature",
        "func": "let value = msg.payload.currently.apparentTemperature;\nvar label = \"apparentTemperature\";\n\nmsg.payload = [{\n    apparentTemperature: value\n},\n{\n    measurement: label\n}];\n\nmsg.measurement = label;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 1800,
        "wires": [
            [
                "bfe1e10d.a1b1e",
                "ca11ca63.add948"
            ]
        ]
    },
    {
        "id": "bfe1e10d.a1b1e",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "db11d248.010a3",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 680,
        "y": 1840,
        "wires": []
    },
    {
        "id": "6f3deca1.5d8144",
        "type": "bigtimer",
        "z": "1600a05a.fc816",
        "outtopic": "kitchen",
        "outpayload1": "ON",
        "outpayload2": "OFF",
        "name": "Evening",
        "lat": "45.14176697",
        "lon": "-93.37486187",
        "starttime": "5004",
        "endtime": "60",
        "startoff": "-45",
        "endoff": 0,
        "offs": 0,
        "outtext1": "",
        "outtext2": "",
        "timeout": 1440,
        "sun": true,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "jan": true,
        "feb": true,
        "mar": true,
        "apr": false,
        "may": false,
        "jun": false,
        "jul": false,
        "aug": false,
        "sep": false,
        "oct": true,
        "nov": true,
        "dec": true,
        "day1": 0,
        "month1": 0,
        "day2": 0,
        "month2": 0,
        "day3": 0,
        "month3": 0,
        "day4": 0,
        "month4": 0,
        "day5": 0,
        "month5": 0,
        "day6": "",
        "month6": "",
        "d1": 0,
        "w1": 0,
        "d2": 0,
        "w2": 0,
        "d3": 0,
        "w3": 0,
        "d4": 0,
        "w4": 0,
        "d5": 0,
        "w5": 0,
        "d6": "",
        "w6": "",
        "xday1": "",
        "xmonth1": "0",
        "xday2": "",
        "xmonth2": "0",
        "xday3": "0",
        "xmonth3": "0",
        "xday4": "",
        "xmonth4": "0",
        "xday5": "",
        "xmonth5": "0",
        "xday6": "",
        "xmonth6": "0",
        "xd1": "",
        "xw1": "",
        "xd2": "",
        "xw2": "",
        "xd3": "",
        "xw3": "",
        "xd4": "",
        "xw4": "",
        "xd5": "",
        "xw5": "",
        "xd6": "",
        "xw6": "",
        "suspend": false,
        "random": true,
        "repeat": false,
        "atstart": true,
        "odd": false,
        "even": false,
        "x": 260,
        "y": 360,
        "wires": [
            [
                "34f1ba8c.5ef186"
            ],
            [],
            []
        ]
    },
    {
        "id": "dc3ad4e2.89f088",
        "type": "inject",
        "z": "1600a05a.fc816",
        "name": "On",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "x": 90,
        "y": 320,
        "wires": [
            [
                "6f3deca1.5d8144"
            ]
        ]
    },
    {
        "id": "d319ccc0.6a409",
        "type": "inject",
        "z": "1600a05a.fc816",
        "name": "Off",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 90,
        "y": 360,
        "wires": [
            [
                "6f3deca1.5d8144"
            ]
        ]
    },
    {
        "id": "a221bf5a.631ff",
        "type": "inject",
        "z": "1600a05a.fc816",
        "name": "Default",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "default",
        "payloadType": "str",
        "x": 90,
        "y": 400,
        "wires": [
            [
                "6f3deca1.5d8144"
            ]
        ]
    },
    {
        "id": "34f1ba8c.5ef186",
        "type": "switch",
        "z": "1600a05a.fc816",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ON",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OFF",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 360,
        "wires": [
            [
                "9a48b61b.78fa98"
            ],
            [
                "4bea1a27.89dc24"
            ]
        ]
    },
    {
        "id": "bbbd4cd5.d6b04",
        "type": "comment",
        "z": "1600a05a.fc816",
        "name": "twillo recovery code",
        "info": "vLjNMt_3dmUHAZ83QEr7n05TdZEENE2ixPgwI4iG",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "9a48b61b.78fa98",
        "type": "change",
        "z": "1600a05a.fc816",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Turn Kitchen Island ON",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 340,
        "wires": [
            [
                "6cd8401d.fc0af"
            ]
        ]
    },
    {
        "id": "4bea1a27.89dc24",
        "type": "change",
        "z": "1600a05a.fc816",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Turn Kitchen Island OFF",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "6cd8401d.fc0af",
        "type": "link out",
        "z": "1600a05a.fc816",
        "name": "darkKitchenIsland",
        "links": [
            "ffce84f4.46ae48"
        ],
        "x": 735,
        "y": 360,
        "wires": []
    },
    {
        "id": "ffce84f4.46ae48",
        "type": "link in",
        "z": "1600a05a.fc816",
        "name": "twillioIn",
        "links": [
            "6cd8401d.fc0af"
        ],
        "x": 155,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4c3b5bdf.fc41d4",
        "type": "change",
        "z": "d75475bd.f0fa48",
        "name": "mainLux",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "mainLux",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 940,
        "wires": [
            [
                "441ee599.6387cc"
            ]
        ]
    },
    {
        "id": "441ee599.6387cc",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 940,
        "wires": []
    },
    {
        "id": "76ba7b8f.482f64",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "pressure",
        "func": "let value = msg.payload.currently.pressure;\nvar label = \"pressure\";\n\nmsg.payload = [{\n    pressure: value\n},\n{\n    measurement: label\n}];\n\nmsg.measurement = label;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 1860,
        "wires": [
            [
                "bfe1e10d.a1b1e"
            ]
        ]
    },
    {
        "id": "1ccd779d.946288",
        "type": "function",
        "z": "d75475bd.f0fa48",
        "name": "windGust",
        "func": "let value = msg.payload.currently.windGust;\nvar label = \"pressure\";\n\nmsg.payload = [{\n    windGust: value\n},\n{\n    measurement: label\n}];\n\nmsg.measurement = label;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 360,
        "y": 1920,
        "wires": [
            [
                "bfe1e10d.a1b1e"
            ]
        ]
    },
    {
        "id": "af901fc7.e9269",
        "type": "influxdb in",
        "z": "d75475bd.f0fa48",
        "influxdb": "1adb25b4.af776a",
        "name": "TempRH last 1000",
        "query": "select * from TempRH limit 1000",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 1970,
        "y": 3220,
        "wires": [
            [
                "8bde0248.73843"
            ]
        ]
    },
    {
        "id": "2ce5fd37.e94112",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1730,
        "y": 3220,
        "wires": [
            [
                "af901fc7.e9269"
            ]
        ]
    },
    {
        "id": "8bde0248.73843",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 2160,
        "y": 3220,
        "wires": []
    },
    {
        "id": "79fc18a0.a97618",
        "type": "comment",
        "z": "d75475bd.f0fa48",
        "name": "Weather",
        "info": "",
        "x": 160,
        "y": 1420,
        "wires": []
    },
    {
        "id": "ea6e3347.6a4b5",
        "type": "comment",
        "z": "d75475bd.f0fa48",
        "name": "LoRaWAN",
        "info": "",
        "x": 140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "963a4ff6.0df9d",
        "type": "comment",
        "z": "d75475bd.f0fa48",
        "name": "Work In Progress / Sandbox",
        "info": "",
        "x": 4100,
        "y": 800,
        "wires": []
    },
    {
        "id": "f2788143.c8d68",
        "type": "switch",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "property": "payload.event_type.description",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Periodic Report",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Supervisory",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 380,
        "y": 560,
        "wires": [
            [
                "46acc3fa.0e350c"
            ],
            [
                "4ad77589.30ff7c"
            ],
            [
                "3fb33389.67384c"
            ]
        ]
    },
    {
        "id": "3fb33389.67384c",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "events",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 620,
        "wires": []
    },
    {
        "id": "a3c5204.942a2e",
        "type": "function",
        "z": "1fb0f65a.416e0a",
        "name": "",
        "func": "alert = msg.payload.ruleName;\n\nreturn {payload: {\n    alert\n}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "4574ac93.2a3224",
        "type": "link in",
        "z": "1600a05a.fc816",
        "name": "grafanaAlertIn",
        "links": [
            "9838d745.f0ade8"
        ],
        "x": 155,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "30af0c89.c3a304",
        "type": "switch",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "property": "measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "battery_voltage",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "e7f5e7b0.d97258",
                "eb0a71ce.4cc96"
            ],
            []
        ]
    },
    {
        "id": "e7f5e7b0.d97258",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 810,
        "y": 360,
        "wires": []
    },
    {
        "id": "41193467.0ed24c",
        "type": "link in",
        "z": "524fa936.044d78",
        "name": "batteryVoltage",
        "links": [
            "eb0a71ce.4cc96"
        ],
        "x": 155,
        "y": 360,
        "wires": [
            [
                "4bc7dd0e.3a3b54"
            ]
        ]
    },
    {
        "id": "4bc7dd0e.3a3b54",
        "type": "mongodb out",
        "z": "524fa936.044d78",
        "mongodb": "705e49f4.ec4728",
        "name": "",
        "collection": "battery_voltage",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 420,
        "y": 360,
        "wires": []
    },
    {
        "id": "eb0a71ce.4cc96",
        "type": "link out",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "links": [
            "41193467.0ed24c"
        ],
        "x": 775,
        "y": 300,
        "wires": []
    },
    {
        "id": "761461.a7a63ba",
        "type": "switch",
        "z": "ec6d74c6.c4cc58",
        "name": "Filter null GPS",
        "property": "payload[0].latitude",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 1680,
        "wires": [
            [
                "d66ec734.e963e8"
            ],
            [
                "e7228b7d.dfabb8",
                "56e4588c.c1c1d8"
            ]
        ]
    },
    {
        "id": "56e4588c.c1c1d8",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1350,
        "y": 1740,
        "wires": []
    },
    {
        "id": "dd4f97e8.94a898",
        "type": "mongodb out",
        "z": "524fa936.044d78",
        "mongodb": "705e49f4.ec4728",
        "name": "",
        "collection": "bdb_mbox",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 410,
        "y": 480,
        "wires": []
    },
    {
        "id": "de348c3a.6c4ae",
        "type": "comment",
        "z": "ec6d74c6.c4cc58",
        "name": "TTN Mbox Codec",
        "info": "//function Decoder(bytes, port) {\n  // Decode an uplink message from a buffer\n  // (array) of bytes to an object of fields.\n  //var decoded = {};\n\n  // if (port === 1) decoded.led = bytes[0];\n\n  //return decoded;\n//}\n//function Decode(fPort, bytes) {\n\n\nfunction Decoder(bytes, port) {\nif (bytes.length == 14){  \n  var event_array = [];\n  var evb_sensors = {};\n  var EVB_TYPE = {\n    none: 0,\n    led_1: 1,\n    led_2: 2,\n    lux_max: 3,\n    lux_min: 4,\n    lux: 5,\n    barometer_max: 6,\n    barometer_min: 7,\n    barometer: 8,\n    temperature_max: 9,\n    temperature__min: 10,\n    temperature: 11,\n    accelerometer_max: 12,\n    accelerometer_min: 13,\n    accelerometer: 14,\n    tx_interval: 15,\n    amps_max: 16,\n    amps_min: 17,\n    amps: 18,\n    m2x_device: 19,\n    m2x_key: 20,\n  };\n\n/*\n * Process the EVB LoRa payload.\n *\n * EVB payload contains one or more TLV fields.\n *\n * [<type: accelerometer><length: 6><x-high><x-low><y-high><y-low><z-high><z-low>]\n * [<type: barometer><length: 3><byte2><byte1><byte0>]\n * [<type: temperature><length: 2><byte-high><byte-low>]\n * \n */\n  for (var index = 0; index < bytes.length; ) {\n    var type = bytes[index++];\n  //   var length = bytes[index++];\n    var value;\n    console.log(\"type: \" + type + \" length: \" );\n\n    switch (type) {\n    case EVB_TYPE.lux:\n      if (typeof(evb_sensors.light) == \"undefined\") {\n        evb_sensors.light = {};\n      }\n      value = bytes[index++] << 8;\n      value |= bytes[index++];\n      value = value * 0.24;\n      evb_sensors.light.lux = value;\n      // web of things \n      var lux_lighting_event = {};\n      lux_lighting_event.n = \"lux_level\";\n      lux_lighting_event.u = \"lx\";\n      lux_lighting_event.v = evb_sensors.light.lux;\n      event_array.push(lux_lighting_event);\n      break;\n    case EVB_TYPE.barometer:\n      if (typeof(evb_sensors.barometer) == \"undefined\") {\n        evb_sensors.barometer = {};\n      }\n      value = bytes[index++] << 16;\n      value |= bytes[index++] << 8;\n      value |= bytes[index++];\n      value = value * 0.00025;\n      evb_sensors.barometer.pa = value;\n      \n      //web of things event array payload\n      var relative_humidity_event = {};\n      relative_humidity_event.n = \"relative_humidity\";\n      relative_humidity_event.u = \"%RH\";\n      relative_humidity_event.v = evb_sensors.barometer.pa;\n      event_array.push(relative_humidity_event);\n      \n      break;\n    case EVB_TYPE.temperature:\n      if (typeof(evb_sensors.temperature) == \"undefined\") {\n      evb_sensors.temperature = {};\n      }\n      value = (bytes[index++] << 24) >> 16;\n      value |= bytes[index++];\n      value = value * 0.0625;\n      evb_sensors.temperature.c = value;\n      evb_sensors.temperature.f =  value * 9 / 5 + 32; \n      //web of things event array payload\n      var air_temp_event = {};\n      air_temp_event.n = \"temperature\";\n      air_temp_event.u = \"Fah\";\n      air_temp_event.v = evb_sensors.temperature.f;\n      event_array.push(air_temp_event);\n      \n      break;\n    case EVB_TYPE.accelerometer:\n      if (typeof(evb_sensors.accelerometer) == \"undefined\") {\n      evb_sensors.accelerometer = {};\n      }\n      // evb_sensors.accelerometer.x = (bytes[index++] << 24) >> 16;\n      var x1 = evb_sensors.accelerometer.x = bytes[index++] ;\n      // x1 = ~x1 ; \n      // x1 = ( x1 + 1 ) % 256; \n      evb_sensors.accelerometer.x = x1 * 0.0625;//; / 15;\n      // evb_sensors.accelerometer.y = (bytes[index++] << 24) >> 16;\n      var y1 = evb_sensors.accelerometer.y = bytes[index++] ;\n      // y1 = ~ y1 ; \n      // y1 = ( y1 + 1 ) % 256;\n        \n      y1 = evb_sensors.accelerometer.y = y1 * 0.0625 ; // / 15 ;\n      // evb_sensors.accelerometer.z = (bytes[index++] << 24) >> 16;\n      var z1 = evb_sensors.accelerometer.z = bytes[index++] ;\n      // z1 = ~ z1 ; \n      // z1 = ( z1 + 1 ) % 256; \n      // z1 = z1 - 128;\n      z1 = evb_sensors.accelerometer.z = z1 * 0.0625; // / 15;\n      //web of things event array payload\n      var accelerometer_x_event = {};\n      accelerometer_x_event.n = \"x_axis\";\n      accelerometer_x_event.u = \"axis\";\n      accelerometer_x_event.v = evb_sensors.accelerometer.x;\n      event_array.push(accelerometer_x_event);\n      \n      var accelerometer_y_event = {};\n      accelerometer_y_event.n = \"y_axis\";\n      accelerometer_y_event.u = \"axis\";\n      accelerometer_y_event.v = evb_sensors.accelerometer.y;\n      event_array.push(accelerometer_y_event);\n      \n      var accelerometer_z_event = {};\n      accelerometer_z_event.n = \"z_axis\";\n      accelerometer_z_event.u = \"axis\";\n      accelerometer_z_event.v = evb_sensors.accelerometer.z;\n      event_array.push(accelerometer_z_event);\n      break;    \n      }\n  }\n  return {\n    //temp_c: evb_sensors.temperature.c,\n    measurement: \"LoRa_demo\",\n    temp_f: evb_sensors.temperature.f,\n    moisture: evb_sensors.barometer.pa,\n    lux: evb_sensors.light.lux,\n    x_acc: evb_sensors.accelerometer.x,\n    y_acc: evb_sensors.accelerometer.y,\n    z_acc: evb_sensors.accelerometer.z,\n    events: event_array,\n  };\n} \n\nif (bytes.length == 11) {\n\n/*\n * Process the EVB LoRa GPS Survey Sweep payload.\n * \n * Byte 0 is 0\n * Byte 1 is temperature in Celsius\n * Byte 2 is 0\n * Byte 3-6 is GPS Latitude\n * Byte 7-10 is GPS Longitude\n * Bytes 10+ is padding with 0\n * \n*/  \n  var gps_event_array = [];\n  \n  var temp_c = bytes[1];\n  var temp_f = 1.8 * temp_c + 32;\n  //web of things event array payload\n  var gps_air_temp_event = {};\n  gps_air_temp_event.n = \"temperature\";\n  gps_air_temp_event.u = \"Fah\";\n  gps_air_temp_event.v = temp_f;\n  gps_event_array.push(gps_air_temp_event);\n  \n  var latitude = ((bytes[3] << 24) | (bytes[4] << 16) | (bytes[5] << 8 ) | bytes[6])  / 2147483648*90; // 2^31 * 90\n  //web of things event array payload\n  var gps_latitude_event = {};\n  gps_latitude_event.n = \"latitude\";\n  gps_latitude_event.u = \"deg\";\n  gps_latitude_event.v = latitude;\n  gps_event_array.push(gps_latitude_event);\n  \n  var longitude = ((bytes[7] << 24) | (bytes[8] << 16) | (bytes[9] << 8 ) | bytes[10]) / 2147483648*180; // 2^31 * 180\n  //web of things event array payload\n  var gps_longitude_event = {};\n  gps_longitude_event.n = \"longitude\";\n  gps_longitude_event.u = \"deg\";\n  gps_longitude_event.v = longitude;\n  gps_event_array.push(gps_longitude_event);  \n  \n // if (port === 1) decoded.led = bytes[0];\n  return {\n    measurement: \"GPS_survey\",\n    events: gps_event_array,\n    temp_f: temp_f,\n    latitude: latitude,\n    longitude: longitude,\n  };\n} else { return { payload: \"unexpected byte length\"};  \n}\n}",
        "x": 190,
        "y": 1160,
        "wires": []
    },
    {
        "id": "10218224.206d6e",
        "type": "comment",
        "z": "ec6d74c6.c4cc58",
        "name": "TTN RadioBridge Codec",
        "info": "//   RADIO BRIDGE PACKET DECODER v1.0\n// (c) 2019 RadioBridge USA by John Sheldon\n\n// General defines used in decode\nvar RESET_EVENT = \"00\";\nvar SUPERVISORY_EVENT = \"01\";\nvar TAMPER_EVENT = \"02\";\nvar LINK_QUALITY_EVENT = \"FB\";\nvar RATE_LIMIT_EXCEEDED_EVENT = \"FC\";\nvar TEST_MESSAGE_EVENT = \"FD\";\nvar DOWNLINK_ACK_EVENT = \"FF\";\nvar DOOR_WINDOW_EVENT = \"03\";\nvar PUSH_BUTTON_EVENT = \"06\";\nvar CONTACT_EVENT = \"07\";\nvar WATER_EVENT = \"08\";\nvar TEMPERATURE_EVENT = \"09\";\nvar TILT_EVENT = \"0A\";\nvar ATH_EVENT = \"0D\";\nvar ABM_EVENT = \"0E\";\nvar TILT_HP_EVENT = \"0F\";\nvar ULTRASONIC_EVENT = \"10\";\nvar SENSOR420MA_EVENT = \"11\";\nvar THERMOCOUPLE_EVENT = \"13\";\nvar VOLTMETER_EVENT = \"14\";\nvar CUSTOM_SENSOR_EVENT = \"15\";\nvar GPS_EVENT = \"16\";\nvar HONEYWELL5800_EVENT = \"17\";\nvar MAGNETOMETER_EVENT = \"18\";\nvar VIBRATION_LB_EVENT = \"19\";\nvar VIBRATION_HB_EVENT = \"1A\";\n\n\n\n// Different network servers have different callback functions\n// Each of these is mapped to the generic decoder function\n\n// ----------------------------------------------\n\n// function called by ChirpStack\n//function Decode(fPort, bytes, variables) {\n//    return Generic_Decoder(bytes, fPort);\n//}\n\n// function called by TTN\nfunction Decoder(bytes, port) {\n    return Generic_Decoder(bytes, port);\n}\n\n// ----------------------------------------------\n\n\n\n// The generic decode function called by one of the above network server specific callbacks\nfunction Generic_Decoder(bytes, port) {\n\n    // data structure which contains decoded messages\n    var decoded = {};\n    var event_array = [];\n    // The first byte contains the protocol version (upper nibble) and packet counter (lower nibble)\n    ProtocolVersion = (bytes[0] >> 4) & 0x0f;\n    PacketCounter = bytes[0] & 0x0f;\n\n\n    // the event type is defined in the second byte\n    EventType = Hex(bytes[1]);\n\n    // the rest of the message decode is dependent on the type of event\n    switch (EventType) {\n\n        // ==================    RESET EVENT    ====================\n        case RESET_EVENT:\n\n            decoded.Message = \"Event: Reset\";\n\n            // third byte is device type, convert to hex format for case statement\n            DeviceTypeByte = Hex(bytes[2]);\n\n            // device types are enumerated below\n            switch (DeviceTypeByte) {\n                case \"01\": DeviceType = \"Door/Window Sensor\"; break;\n                case \"02\": DeviceType = \"Door/Window High Security\"; break;\n                case \"03\": DeviceType = \"Contact Sensor\"; break;\n                case \"04\": DeviceType = \"No-Probe Temperature Sensor\"; break;\n                case \"05\": DeviceType = \"External-Probe Temperature Sensor\"; break;\n                case \"06\": DeviceType = \"Single Push Button\"; break;\n                case \"07\": DeviceType = \"Dual Push Button\"; break;\n                case \"08\": DeviceType = \"Acceleration-Based Movement Sensor\"; break;\n                case \"09\": DeviceType = \"Tilt Sensor\"; break;\n                case \"0A\": DeviceType = \"Water Sensor\"; break;\n                case \"0B\": DeviceType = \"Tank Level Float Sensor\"; break;\n                case \"0C\": DeviceType = \"Glass Break Sensor\"; break;\n                case \"0D\": DeviceType = \"Ambient Light Sensor\"; break;\n                case \"0E\": DeviceType = \"Air Temperature and Humidity Sensor\"; break;\n                case \"0F\": DeviceType = \"High-Precision Tilt Sensor\"; break;\n                case \"10\": DeviceType = \"Ultrasonic Level Sensor\"; break;\n                case \"11\": DeviceType = \"4-20mA Current Loop Sensor\"; break;\n                case \"12\": DeviceType = \"Ext-Probe Air Temp and Humidity Sensor\"; break;\n                case \"13\": DeviceType = \"Thermocouple Temperature Sensor\"; break;\n                case \"14\": DeviceType = \"Voltage Sensor\"; break;\n                case \"15\": DeviceType = \"Custom Sensor\"; break;\n                case \"16\": DeviceType = \"GPS\"; break;\n                case \"17\": DeviceType = \"Honeywell 5800 Bridge\"; break;\n                case \"18\": DeviceType = \"Magnetometer\"; break;\n                case \"19\": DeviceType = \"Vibration Sensor - Low Frequency\"; break;\n                case \"1A\": DeviceType = \"Vibration Sensor - High Frequency\"; break;\n                default: DeviceType = \"Device Undefined\"; break;\n            }\n\n            decoded.Message += \", Device Type: \" + DeviceType;\n\n            // the hardware version has the major version in the upper nibble, and the minor version in the lower nibble\n            HardwareVersion = ((bytes[3] >> 4) & 0x0f) + \".\" + (bytes[3] & 0x0f);\n\n            decoded.Message += \", Hardware Version: v\" + HardwareVersion;\n\n            // the firmware version has two different formats depending on the most significant bit\n            FirmwareFormat = (bytes[4] >> 7) & 0x01;\n\n            // FirmwareFormat of 0 is old format, 1 is new format\n            // old format is has two sections x.y\n            // new format has three sections x.y.z\n            if (FirmwareFormat == 0)\n                FirmwareVerison = bytes[4] + \".\" + bytes[5];\n            else\n                FirmwareVerison = ((bytes[4] >> 2) & 0x1F) + \".\" + ((bytes[4] & 0x03) + ((bytes[5] >> 5) & 0x07)) + \".\" + (bytes[5] & 0x1F);\n\n            decoded.Message += \", Firmware Version: v\" + FirmwareVerison;\n\n            break;\n\n        // ================   SUPERVISORY EVENT   ==================\n\n        case SUPERVISORY_EVENT:\n            decoded.Message = \"Event: Supervisory\";\n\n            event_type = {description: \"Supervisory\"};\n            decoded.event_type = event_type;\n\n            // note that the sensor state in the supervisory message is being depreciated, so those are not decoded here\n\n            // battery voltage is in the format x.y volts where x is upper nibble and y is lower nibble\n            \n            BatteryLevel = ((bytes[4] >> 4) & 0x0f) + \".\" + (bytes[4] & 0x0f);\n        \n            var battery_event = {};\n                    battery_event.n = \"battery_voltage\";\n                    battery_event.u = \"V\";\n                    battery_event.v = BatteryLevel;\n            event_array.push(battery_event);\n\n            decoded.events = event_array;\n            decoded.Message += \", Battery Voltage: \" + BatteryLevel + \"V\";\n\n            // the accumulation count is a 16-bit value\n            AccumulationCount = (bytes[9] * 256) + bytes[10];\n            decoded.Message += \", Accumulation Count: \" + AccumulationCount;\n            var accumulation_event = {};\n                    accumulation_event.n = \"accumulation\";\n                    accumulation_event.u = \"ct\";\n                    accumulation_event.v = AccumulationCount;\n            event_array.push(accumulation_event);\n\n\n            // decode bits for error code byte\n            TamperSinceLastReset = (bytes[2] >> 4) & 0x01;\n            decoded.Message += \", Tamper Since Last Reset: \" + TamperSinceLastReset;\n            var tamper_reset_event = {};\n                    tamper_reset_event.n = \"tamper_last_reset\";\n                    tamper_reset_event.u = \"curr\";\n                    tamper_reset_event.v = TamperSinceLastReset;\n            event_array.push(tamper_reset_event);\n\n            CurrentTamperState = (bytes[2] >> 3) & 0x01;\n            decoded.Message += \", Current Tamper State: \" + CurrentTamperState;\n            var tamper_event = {};\n                    tamper_event.n = \"tamper_state\";\n                    tamper_event.u = \"curr\";\n                    tamper_event.v = CurrentTamperState;\n            event_array.push(tamper_event);\n\n\n\n            ErrorWithLastDownlink = (bytes[2] >> 2) & 0x01;\n            decoded.Message += \", Error With Last Downlink: \" + ErrorWithLastDownlink;\n            var downlink_error_event = {};\n                    downlink_error_event.n = \"downlink_error\";\n                    downlink_error_event.u = \"status\";\n                    downlink_error_event.v = ErrorWithLastDownlink;\n            event_array.push(downlink_error_event);\n\n            BatteryLow = (bytes[2] >> 1) & 0x01;\n            decoded.Message += \", Battery Low: \" + BatteryLow;\n\n            RadioCommError = bytes[2] & 0x01;\n            decoded.Message += \", Radio Comm Error: \" + RadioCommError;\n            var radio_error_event = {};\n                    radio_error_event.n = \"radio_error\";\n                    radio_error_event.u = \"status\";\n                    radio_error_event.v = RadioCommError;\n            event_array.push(radio_error_event);\n\n\n\n\n//bdb\n//            event_type = {};\n//                    event_type.description = \"Supervisory\";\n//                    event_array.push(event_type);\n\n\n\n\n          \n//bdb\n\n\n            break;\n\n        // ==================   TAMPER EVENT    ====================\n        case TAMPER_EVENT:\n            decoded.Message = \"Event: Tamper\";\n\n            TamperState = bytes[2];\n\n            // tamper state is 0 for open, 1 for closed\n            if (TamperState == 0)\n                decoded.Message += \", State: Open\";\n            else\n                decoded.Message += \", State: Closed\";\n\n            break;\n\n        // ==================   LINK QUALITY EVENT    ====================\n        case LINK_QUALITY_EVENT:\n            decoded.Message = \"Event: Link Quality\";\n\n            CurrentSubBand = bytes[2];\n            decoded.Message += \", Current Sub-Band: \" + CurrentSubBand;\n\n            RSSILastDownlink = bytes[3];\n            decoded.Message += \", RSSI of Last Downlink: \" + RSSILastDownlink;\n\n            SNRLastDownlink = bytes[4];\n            decoded.Message += \", SNR of Last Downlink: \" + SNRLastDownlink;\n\n            break;\n\n        // ==================   RATE LIMIT EXCEEDED EVENT    ====================\n        case RATE_LIMIT_EXCEEDED_EVENT:\n\n            // this feature is depreciated so it is not decoded here\n            decoded.Message = \"Event: Rate Limit Exceeded. Depreciated Event And Not Decoded Here\";\n\n            break;\n\n        // ==================   TEST MESSAGE EVENT    ====================\n        case TEST_MESSAGE_EVENT:\n\n            // this feature is depreciated so it is not decoded here\n            decoded.Message = \"Event: Test Message. Depreciated Event And Not Decoded Here\";\n\n            break;\n\n\n        // ================  DOOR/WINDOW EVENT  ====================\n        case DOOR_WINDOW_EVENT:\n\n            decoded.Message = \"Event: Door/Window\";\n\n            SensorState = bytes[2];\n\n            // 0 is closed, 1 is open\n            if (SensorState == 0)\n                decoded.Message += \", State: Closed\";\n            else\n                decoded.Message += \", State: Open\";\n\n            break;\n\n        // ===============  PUSH BUTTON EVENT   ===================\n        case PUSH_BUTTON_EVENT:\n\n            decoded.Message = \"Event: Push Button\";\n\n            ButtonID = Hex(bytes[2]);\n\n            switch (ButtonID) {\n                // 01 and 02 used on two button\n                case \"01\": ButtonReference = \"Button 1\"; break;\n                case \"02\": ButtonReference = \"Button 2\"; break;\n                // 03 is single button\n                case \"03\": ButtonReference = \"Button 1\"; break;\n                // 12 when both buttons pressed on two button\n                case \"12\": ButtonReference = \"Both Buttons\"; break;\n                default: ButtonReference = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Button ID: \" + ButtonReference;\n\n            ButtonState = bytes[3];\n\n            switch (ButtonState) {\n                case 0: SensorStateDescription = \"Pressed\"; break;\n                case 1: SensorStateDescription = \"Released\"; break;\n                case 2: SensorStateDescription = \"Held\"; break;\n                default: SensorStateDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Button State: \" + SensorStateDescription;\n\n            break;\n\n        // =================   CONTACT EVENT   =====================\n        case CONTACT_EVENT:\n\n            decoded.Message = \"Event: Dry Contact\";\n\n            ContactState = bytes[2];\n\n            // if state byte is 0 then shorted, if 1 then opened\n            if (ContactState == 0)\n                SensorState = \"Contacts Shorted\";\n            else\n                SensorState = \"Contacts Opened\";\n\n            decoded.Message += \", Sensor State: \" + SensorState;\n\n            break;\n\n        // ===================  WATER EVENT  =======================\n        case WATER_EVENT:\n\n            decoded.Message = \"Event: Water\";\n\n            SensorState = bytes[2];\n\n            if (SensorState == 0)\n                decoded.Message += \", State: Water Present\";\n            else\n                decoded.Message += \", State: Water Not Present\";\n\n            WaterRelativeResistance = bytes[3];\n\n            decoded.Message += \", Relative Resistance: \" + WaterRelativeResistance;\n\n            break;\n\n        // ================== TEMPERATURE EVENT ====================\n        case TEMPERATURE_EVENT:\n\n            decoded.Message = \"Event: Temperature\";\n\n            TemperatureEvent = bytes[2];\n\n            switch (TemperatureEvent) {\n                case 0: TemperatureEventDescription = \"Periodic Report\"; break;\n                case 1: TemperatureEventDescription = \"Temperature Over Upper Threshold\"; break;\n                case 2: TemperatureEventDescription = \"Temperature Under Lower Threshold\"; break;\n                case 3: TemperatureEventDescription = \"Temperature Report-on-Change Increase\"; break;\n                case 4: TemperatureEventDescription = \"Temperature Report-on-Change Decrease\"; break;\n                default: TemperatureEventDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Temperature Event: \" + TemperatureEventDescription;\n\n            // current temperature reading\n            CurrentTemperature = Convert(bytes[3], 0);\n            decoded.Message += \", Current Temperature: \" + CurrentTemperature;\n\n            // relative temp measurement for use with an alternative calibration table\n            RelativeMeasurement = Convert(bytes[4], 0);\n            decoded.Message += \", Relative Measurement: \" + RelativeMeasurement;\n\n//bdb\n            temperature_f = (CurrentTemperature * 9/5)+32;\n            event_type = {description: TemperatureEventDescription};\n            decoded.event_type = event_type;\n            var air_temp_event = {};\n                    air_temp_event.n = \"temperature\";\n                    air_temp_event.u = \"Fah\";\n                    air_temp_event.v= temperature_f;\n            event_array.push(air_temp_event);\n\n            decoded.events = event_array;\n\n//bdb\n            break;\n\n        // ====================  TILT EVENT  =======================\n        case TILT_EVENT:\n\n            decoded.Message = \"Event: Tilt\";\n\n            TiltEvent = bytes[2];\n\n            switch (TiltEvent) {\n                case 0: TiltEventDescription = \"Transitioned to Vertical\"; break;\n                case 1: TiltEventDescription = \"Transitioned to Horizontal\"; break;\n                case 2: TiltEventDescription = \"Report-on-Change Toward Vertical\"; break;\n                case 3: TiltEventDescription = \"Report-on-Change Toward Horizontal\"; break;\n                default: TiltEventDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Tilt Event: \" + TiltEventDescription;\n\n            TiltAngle = bytes[3];\n\n            decoded.Message += \", Tilt Angle: \" + TiltAngle;\n//bdb\n\n            event_type = {};\n                    event_type.description = TiltEventDescription;\n            event_array.push(event_type);\n            var tilt_event = {};\n                    tilt_event.n = \"tilt\";\n                    tilt_event.u = \"deg\";\n                    tilt.v= TiltAngle;\n            event_array.push(tilt_event);\n\n            decoded.events = event_array;\n//bdb\n            break;\n\n        // =============  AIR TEMP & HUMIDITY EVENT  ===============\n        case ATH_EVENT:\n\n            decoded.Message = \"Event: Air Temperature/Humidity\";\n\n            ATHEvent = bytes[2];\n\n            switch (ATHEvent) {\n                case 0: ATHDescription = \"Periodic Report\"; break;\n                case 1: ATHDescription = \"Temperature has Risen Above Upper Threshold\"; break;\n                case 2: ATHDescription = \"Temperature has Fallen Below Lower Threshold\"; break;\n                case 3: ATHDescription = \"Temperature Report-on-Change Increase\"; break;\n                case 4: ATHDescription = \"Temperature Report-on-Change Decrease\"; break;\n                case 5: ATHDescription = \"Humidity has Risen Above Upper Threshold\"; break;\n                case 6: ATHDescription = \"Humidity has Fallen Below Lower Threshold\"; break;\n                case 7: ATHDescription = \"Humidity Report-on-Change Increase\"; break;\n                case 8: ATHDescription = \"Humidity Report-on-Change Decrease\"; break;\n                default: ATHDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", ATH Event: \" + ATHDescription;\n\n            // integer and fractional values between two bytes\n            Temperature = Convert((bytes[3]) + ((bytes[4] >> 4) / 10), 1);\n            decoded.Message += \", Temperature: \" + Temperature;\n\n            // integer and fractional values between two bytes\n            Humidity = +(bytes[5] + ((bytes[6]>>4) / 10)).toFixed(1);\n            decoded.Message += \", Humidity: \" + Humidity;\n//bdb\n\n            temperature_f = (Temperature * 9/5)+32;\n//            event_type = {};\n//                    event_type.description = ATHDescription;\n//            event_array.push(event_type);\n              event_type = {description: ATHDescription};\n              decoded.event_type = event_type;\n\n            var air_temp_event = {};\n                    air_temp_event.n = \"temperature\";\n                    air_temp_event.u = \"Fah\";\n                    air_temp_event.v= temperature_f;\n            event_array.push(air_temp_event);\n\n            var air_humidity_event = {};\n                    air_humidity_event.n = \"relative_humidity\";\n                    air_humidity_event.u = \"%RH\";\n                    air_humidity_event.v = Humidity;\n            event_array.push(air_humidity_event);\n\n            decoded.events = event_array;\n\n//bdb\n\n            break;\n\n        // ============  ACCELERATION MOVEMENT EVENT  ==============\n        case ABM_EVENT:\n\n            decoded.Message = \"Event: Acceleration-Based Movement\";\n\n            ABMEvent = bytes[2];\n\n            if (ABMEvent == 0)\n                ABMEventDescription = \"Movement Started\";\n            else\n                ABMEventDescription = \"Movement Stopped\";\n\n            decoded.Message += \", ABM Event: \" + ABMEventDescription;\n\n            break;\n\n        // =============  HIGH-PRECISION TILT EVENT  ===============\n        case TILT_HP_EVENT:\n\n            decoded.Message = \"Event: High-Precision Tilt\";\n\n            TiltEvent = bytes[2];\n\n            switch (TiltEvent) {\n                case 0: TiltEventDescription = \"Periodic Report\"; break;\n                case 1: TiltEventDescription = \"Transitioned Toward 0-Degree Vertical Orientation\"; break;\n                case 2: TiltEventDescription = \"Transitioned Away From 0-Degree Vertical Orientation\"; break;\n                case 3: TiltEventDescription = \"Report-on-Change Toward 0-Degree Vertical Orientation\"; break;\n                case 4: TiltEventDescription = \"Report-on-Change Away From 0-Degree Vertical Orientation\"; break;\n                default: TiltEventDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Tilt HP Event: \" + TiltEventDescription;\n\n            // integer and fractional values between two bytes\n            Angle = +(bytes[3] + (bytes[4] / 10)).toFixed(1);\n            decoded.Message = \", Angle: \" + Angle;\n\n            Temperature = Convert(bytes[5], 0);\n            decoded.Message = \", Temperature: \" + Temperature;\n\n            break;\n\n        // ===============  ULTRASONIC LEVEL EVENT  ================\n        case ULTRASONIC_EVENT:\n\n            decoded.Message = \"Event: Ultrasonic Level\";\n\n            UltrasonicEvent = bytes[2];\n\n            switch (UltrasonicEvent) {\n                case 0: UltrasonicEventDescription = \"Periodic Report\"; break;\n                case 1: UltrasonicEventDescription = \"Distance has Risen Above Upper Threshold\"; break;\n                case 2: UltrasonicEventDescription = \"Distance has Fallen Below Lower Threshold\"; break;\n                case 3: UltrasonicEventDescription = \"Report-on-Change Increase\"; break;\n                case 4: UltrasonicEventDescription = \"Report-on-Change Decrease\"; break;\n                default: UltrasonicEventDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Ultrasonic Event: \" + UltrasonicEventDescription;\n\n            // distance is calculated across 16-bits\n            Distance = ((bytes[3] * 256) + bytes[4]);\n\n            decoded.Message += \", Distance: \" + Distance;\n            break;\n\n        // ================  4-20mA ANALOG EVENT  ==================\n        case SENSOR420MA_EVENT:\n\n            decoded.Message = \"Event: 4-20mA\";\n\n            Sensor420mAEvent = bytes[2];\n\n            switch (Sensor420mAEvent) {\n                case 0: Sensor420mAEventDescription = \"Periodic Report\"; break;\n                case 1: Sensor420mAEventDescription = \"Analog Value has Risen Above Upper Threshold\"; break;\n                case 2: Sensor420mAEventDescription = \"Analog Value has Fallen Below Lower Threshold\"; break;\n                case 3: Sensor420mAEventDescription = \"Report on Change Increase\"; break;\n                case 4: Sensor420mAEventDescription = \"Report on Change Decrease\"; break;\n                default: Sensor420mAEventDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", 4-20mA Event: \" + Sensor420mAEventDescription;\n\n            // calculatec across 16-bits, convert from units of 10uA to mA\n            Analog420Measurement = ((bytes[3] * 256) + bytes[4]) / 100;\n\n            decoded.Message += \", Current Measurement in mA: \" + Analog420Measurement;\n\n            break;\n\n        // =================  THERMOCOUPLE EVENT  ==================\n        case THERMOCOUPLE_EVENT:\n\n            decoded.Message = \"Event: Thermocouple\";\n\n            ThermocoupleEvent = bytes[2];\n\n            switch (ThermocoupleEvent) {\n                case 0: ThermocoupleEventDescription = \"Periodic Report\"; break;\n                case 1: ThermocoupleEventDescription = \"Analog Value has Risen Above Upper Threshold\"; break;\n                case 2: ThermocoupleEventDescription = \"Analog Value has Fallen Below Lower Threshold\"; break;\n                case 3: ThermocoupleEventDescription = \"Report on Change Increase\"; break;\n                case 4: ThermocoupleEventDescription = \"Report on Change Decrease\"; break;\n                default: ThermocoupleEventDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Thermocouple Event: \" + ThermocoupleEventDescription;\n\n            // decode is across 16-bits\n            Temperature = parseInt(((bytes[3] * 256) + bytes[4]) / 16);\n\n            decoded.Message += \", Temperature: \" + Temperature + \"°C\";\n\n            Faults = bytes[5];\n\n            // decode each bit in the fault byte\n            FaultColdOutsideRange = (Faults >> 7) & 0x01;\n            FaultHotOutsideRange = (Faults >> 6) & 0x01;\n            FaultColdAboveThresh = (Faults >> 5) & 0x01;\n            FaultColdBelowThresh = (Faults >> 4) & 0x01;\n            FaultTCTooHigh = (Faults >> 3) & 0x01;\n            FaultTCTooLow = (Faults >> 2) & 0x01;\n            FaultVoltageOutsideRange = (Faults >> 1) & 0x01;\n            FaultOpenCircuit = Faults & 0x01;\n\n            // Decode faults\n            if (Faults == 0)\n                decoded.Message += \", Fault: None\";\n            else {\n                if (FaultColdOutsideRange)\n                    decoded.Message += \", Fault: The cold-Junction temperature is outside of the normal operating range\";\n\n                if (FaultHotOutsideRange)\n                    decoded.Message += \", Fault: The hot junction temperature is outside of the normal operating range\";\n\n                if (FaultColdAboveThresh)\n                    decoded.Message += \", Fault: The cold-Junction temperature is at or above than the cold-junction temperature high threshold\";\n\n                if (FaultColdBelowThresh)\n                    decoded.Message += \", Fault: The Cold-Junction temperature is lower than the cold-junction temperature low threshold\";\n\n                if (FaultTCTooHigh)\n                    decoded.Message += \", Fault: The thermocouple temperature is too high\";\n\n                if (FaultTCTooLow)\n                    decoded.Message += \", Fault: Thermocouple temperature is too low\";\n\n                if (FaultVoltageOutsideRange)\n                    decoded.Message += \", Fault: The input voltage is negative or greater than VDD\";\n\n                if (FaultOpenCircuit)\n                    decoded.Message += \", Fault: An open circuit such as broken thermocouple wires has been detected\";\n            }\n\n            break;\n\n        // ================  VOLTMETER ANALOG EVENT  ==================\n        case VOLTMETER_EVENT:\n\n            decoded.Message = \"Event: Voltage Sensor\";\n\n            VoltmeterEvent = bytes[2];\n\n            switch (VoltmeterEvent) {\n                case 0: VoltmeterEventDescription = \"Periodic Report\"; break;\n                case 1: VoltmeterEventDescription = \"Voltage has Risen Above Upper Threshold\"; break;\n                case 2: VoltmeterEventDescription = \"Voltage has Fallen Below Lower Threshold\"; break;\n                case 3: VoltmeterEventDescription = \"Report on Change Increase\"; break;\n                case 4: VoltmeterEventDescription = \"Report on Change Decrease\"; break;\n                default: VoltmeterEventDescription = \"Undefined\";\n            }\n\n            decoded.Message += \", Voltage Sensor Event: \" + VoltmeterEventDescription;\n\n            // voltage is measured across 16-bits, convert from units of 10mV to V\n            VoltageMeasurement = ((bytes[3] * 256) + bytes[4]) / 100;\n\n            decoded.Message += \", Voltage: \" + VoltageMeasurement + \"V\";\n            break;\n\n\n        // ================  CUSTOM SENSOR EVENT  ==================\n        case CUSTOM_SENSOR_EVENT:\n\n            decoded.Message = \"Event: Custom Sensor\";\n\n            // Custom sensors are not decoded here\n\n            break;\n\n\n        // ================  VOLTMETER ANALOG EVENT  ==================\n        case GPS_EVENT:\n\n            decoded.Message = \"Event: GPS\";\n\n            GPSStatus = bytes[2];\n\n            // decode status byte\n            GPSValidFix = GPSStatus & 0x01;\n\n            if (GPSValidFix == 0)\n                GPSValidFixDescription = \", No Valid Fix\";\n            else\n                GPSValidFixDescription = \", Valid Fix\";\n\n\n            decoded.Message += \", GPS Status: \" + GPSValidFixDescription;\n\n            // latitude and longitude calculated across 32 bits each, show 12 decimal places\n            Latitude = toFixed((((bytes[3] * (2 ^ 24)) + (bytes[4] * (2 ^ 16)) + (bytes[5] * (2 ^ 8)) + bytes[6]) / (10 ^ 7)), 12);\n            Latitude = toFixed((((bytes[7] * (2 ^ 24)) + (bytes[8] * (2 ^ 16)) + (bytes[9] * (2 ^ 8)) + bytes[10]) / (10 ^ 7)), 12);\n\n            decoded.Message += \", Latitude: \" + Latitude + \", Longitude: \" + Longitude;\n\n            break;\n\n\n        // ================  HONEYWELL 5800 EVENT  ==================\n        case HONEYWELL5800_EVENT:\n\n            decoded.Message = \"Event: Honeywell 5800 Sensor Message\";\n\n            // honeywell sensor ID, 24-bits\n            HWSensorID = (bytes[2] * (2 ^ 16)) + (bytes[3] * (2 ^ 8)) + bytes[4];\n\n            decoded.Message += \", Honeywell Sensor ID: \" + HWSensorID;\n\n            HWEvent = bytes[5];\n\n            switch (HWEvent) {\n                case 0: HWEventDescription = \"Status code\"; break;\n                case 1: HWEventDescription = \"Error Code\"; break;\n                case 2: HWEventDescription = \"Sensor Data Payload\"; break;\n                default: HWEventDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Honeywell Sensor Event: \" + HWEventDescription;\n\n            // represent the honeywell sensor payload in hex\n            HWSensorPayload = Hex((bytes[6] * 256) + bytes[7]);\n\n            decoded.Message += \", Sensor Payload: 0x\" + HWSensorPayload;\n\n            break;\n\n\n        // ================  MAGNETOMETER EVENT  ==================\n        case MAGNETOMETER_EVENT:\n\n            // TBD\n\n            break;\n\n\n        // ================  VIBRATION LOW BANDWIDTH EVENT  ==================\n        case VIBRATION_LB_EVENT:\n\n            decoded.Message = \"Event: Vibration Low-Bandwidth\";\n\n            VibeEvent = bytes[2];\n\n            switch (VibeEvent) {\n                case 0: VibeEventDescription = \"Low Frequency Periodic Report\"; break;\n                case 4: VibeEventDescription = \"Low Frequency X-Axis Has Risen Above Upper Threshold\"; break;\n                case 5: VibeEventDescription = \"Low Frequency X-Axis Has Fallen Below Lower Threshold\"; break;\n                case 6: VibeEventDescription = \"Low Frequency Y-Axis Has Risen Above Upper Threshold\"; break;\n                case 7: VibeEventDescription = \"Low Frequency Y-Axis Has Fallen Below Lower Threshold\"; break;\n                case 8: VibeEventDescription = \"Low Frequency Z-Axis Has Risen Above Upper Threshold\"; break;\n                case 9: VibeEventDescription = \"Low Frequency Z-Axis Has Fallen Below Lower Threshold\"; break;\n                case 11: VibeEventDescription = \"Low Frequency Exceeded G-Force Range\"; break;\n                default: VibeEventDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Vibration Event: \" + VibeEventDescription;\n\n            // X, Y, and Z velocities are 16-bits\n            XVelocity = (bytes[3] * 256) + bytes[4];\n            YVelocity = (bytes[5] * 256) + bytes[6];\n            ZVelocity = (bytes[7] * 256) + bytes[8];\n\n            decoded.Message += \", X-Axis Velocity: \" + XVelocity + \" inches/second\";\n            decoded.Message += \", Y-Axis Velocity: \" + YVelocity + \" inches/second\";\n            decoded.Message += \", Z-Axis Velocity: \" + ZVelocity + \" inches/second\";\n\n            // capture sign of temp\n            VibeTemp = parseInt(bytes[9]);\n\n            decoded.Message = \", Internal Temperature: \" + VibeTemp + \"°C\";\n\n            break;\n\n        // ================  VIBRATION HIGH BANDWIDTH EVENT  ==================\n        case VIBRATION_HB_EVENT:\n\n            decoded.Message = \"Event: Vibration Low-Bandwidth\";\n\n            VibeEvent = bytes[2];\n\n            switch (VibeEvent) {\n                case 1: VibeEventDescription = \"High Frequency Periodic Report\"; break;\n                case 2: VibeEventDescription = \"High Frequency Vibration Above Upper Threshold\"; break;\n                case 3: VibeEventDescription = \"High Frequency Vibration Below Lower Threshold\"; break;\n                case 10: VibeEventDescription = \"High Frequency Exceeded G-Force Range\"; break;\n                default: VibeEventDescription = \"Undefined\"; break;\n            }\n\n            decoded.Message += \", Vibration Event: \" + VibeEventDescription;\n\n            // peak g-force\n            PeakGForce = (bytes[3] * 256) + bytes[4];\n\n            decoded.Message += \", Peak G-Force: \" + PeakGForce;\n\n            // capture sign of temp\n            VibeTemp = parseInt(bytes[5]);\n\n            decoded.Message = \", Internal Temperature: \" + VibeTemp + \"°C\";\n\n            break;\n\n\n        // ==================   DOWNLINK EVENT  ====================\n        case DOWNLINK_ACK_EVENT:\n\n            decoded.Message = \"Event: Downlink Acknowledge\";\n\n            DownlinkEvent = bytes[2];\n\n            if (DownlinkEvent == 1)\n                DownlinkEventDescription = \"Message Invalid\";\n            else\n                DownlinkEventDescription = \"Message Valid\";\n\n            decoded.Message += \", Downlink: \" + DownlinkEventDescription;\n            break;\n\n        // end of EventType Case\n    }\n\n    // add packet counter and protocol version to the end of the decode\n    decoded.Message += \", Packet Counter: \" + PacketCounter;\n    decoded.Message += \", Protocol Version: \" + ProtocolVersion;\n\n    return decoded;\n}\n\nfunction Hex(decimal) {\n    decimal = ('0' + decimal.toString(16).toUpperCase()).slice(-2);\n    return decimal;\n}\n\nfunction Convert(number, mode) {\n    switch (mode) {\n        // for EXT-TEMP and NOP\n        case 0: if (number > 127) { result = number - 256 } else { result = number }; break\n        //for ATH temp\n        case 1: if (number > 127) { result = -+(number - 128).toFixed(1) } else { result = +number.toFixed(1) }; break\n    }\n    return result;\n}\n",
        "x": 170,
        "y": 80,
        "wires": []
    },
    {
        "id": "4ad77589.30ff7c",
        "type": "link out",
        "z": "ec6d74c6.c4cc58",
        "name": "suppervisoryOut",
        "links": [
            "f63f19b1.1c2fd8"
        ],
        "x": 495,
        "y": 560,
        "wires": []
    },
    {
        "id": "f63f19b1.1c2fd8",
        "type": "link in",
        "z": "524fa936.044d78",
        "name": "suppervisoryIn",
        "links": [
            "4ad77589.30ff7c"
        ],
        "x": 195,
        "y": 900,
        "wires": [
            [
                "4df4134f.6b8b4c"
            ]
        ]
    },
    {
        "id": "4df4134f.6b8b4c",
        "type": "mongodb out",
        "z": "524fa936.044d78",
        "mongodb": "705e49f4.ec4728",
        "name": "",
        "collection": "supervisory",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 530,
        "y": 900,
        "wires": []
    },
    {
        "id": "e7446218.c6a45",
        "type": "switch",
        "z": "524fa936.044d78",
        "name": "",
        "property": "payload.payload.events[1].n",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 800,
        "wires": [
            [],
            [
                "b1869491.7e2488"
            ]
        ]
    },
    {
        "id": "b1869491.7e2488",
        "type": "bigsplitter",
        "z": "524fa936.044d78",
        "name": "",
        "property": "payload",
        "x": 920,
        "y": 800,
        "wires": [
            [
                "840bde45.6de3e"
            ],
            []
        ]
    },
    {
        "id": "3b47c051.cb69",
        "type": "influxdb in",
        "z": "d75475bd.f0fa48",
        "influxdb": "1adb25b4.af776a",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 1060,
        "y": 2440,
        "wires": [
            [
                "3621a8e5.d28418"
            ]
        ]
    },
    {
        "id": "6d0977ac.c3a868",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "",
        "props": [
            {
                "p": "query",
                "v": "select * from battery_voltage order by time desc",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 830,
        "y": 2440,
        "wires": [
            [
                "3b47c051.cb69"
            ]
        ]
    },
    {
        "id": "e2e92ebf.57d01",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 2440,
        "wires": []
    },
    {
        "id": "3621a8e5.d28418",
        "type": "bigsplitter",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "x": 1300,
        "y": 2440,
        "wires": [
            [
                "e2e92ebf.57d01"
            ],
            []
        ]
    },
    {
        "id": "c9be2842.da10d8",
        "type": "ttn uplink",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "app": "7dd514df.0a14fc",
        "dev_id": "",
        "field": "",
        "x": 240,
        "y": 2140,
        "wires": [
            [
                "ec4ea8ca.192278",
                "fcfff78.d4acd08"
            ]
        ]
    },
    {
        "id": "3ea5e0a2.fff2f",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 2200,
        "wires": []
    },
    {
        "id": "d1b9d75b.287108",
        "type": "link out",
        "z": "ec6d74c6.c4cc58",
        "name": "senseCapOut",
        "links": [
            "792fa185.2e50e"
        ],
        "x": 735,
        "y": 2140,
        "wires": []
    },
    {
        "id": "64d907f2.4a35a8",
        "type": "link in",
        "z": "524fa936.044d78",
        "name": "senseCapIn",
        "links": [],
        "x": 225,
        "y": 1260,
        "wires": [
            [
                "350ce006.4b45f",
                "c372b8e6.375ad8"
            ]
        ]
    },
    {
        "id": "350ce006.4b45f",
        "type": "mongodb out",
        "z": "524fa936.044d78",
        "mongodb": "705e49f4.ec4728",
        "name": "",
        "collection": "senseCap",
        "payonly": false,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 460,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c372b8e6.375ad8",
        "type": "debug",
        "z": "524fa936.044d78",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 1340,
        "wires": []
    },
    {
        "id": "639e9b7f.178644",
        "type": "comment",
        "z": "ec6d74c6.c4cc58",
        "name": "Sensecap",
        "info": "{\"app_id\":\"edgewood-sensecap\",\"dev_id\":\"hybiscus-soil\",\"hardware_serial\":\"2CF7F12121000241\",\"port\":2,\"counter\":4,\"confirmed\":true,\"payload_raw\":[1,6,16,114,81,0,0,1,7,16,44,1,0,0,197,89],\"payload_fields\":{\"err\":0,\"messages\":[{\"measurementId\":4102,\"measurementValue\":20.85,\"type\":\"report_telemetry\"},{\"measurementId\":4103,\"measurementValue\":0.3,\"type\":\"report_telemetry\"}],\"payload\":\"010610725100000107102C010000C559\",\"valid\":true},\"metadata\":{\"time\":\"2020-12-26T03:13:08.061171269Z\",\"frequency\":903.9,\"modulation\":\"LORA\",\"data_rate\":\"SF7BW125\",\"airtime\":66816000,\"coding_rate\":\"4/5\",\"gateways\":[{\"gtw_id\":\"eui-00800000a000195a\",\"timestamp\":2702867411,\"time\":\"2020-12-26T03:13:08.016771Z\",\"channel\":0,\"rssi\":-44,\"snr\":9.2,\"rf_chain\":0,\"latitude\":45.14188,\"longitude\":-93.3746,\"altitude\":222},{\"gtw_id\":\"innatedgewood\",\"timestamp\":3508604787,\"time\":\"2020-12-26T03:41:38Z\",\"channel\":0,\"rssi\":-57,\"snr\":10,\"rf_chain\":0}]},\"payload\":{\"err\":0,\"messages\":[{\"measurementId\":4102,\"measurementValue\":20.85,\"type\":\"report_telemetry\"},{\"measurementId\":4103,\"measurementValue\":0.3,\"type\":\"report_telemetry\"}],\"payload\":\"010610725100000107102C010000C559\",\"valid\":true},\"_msgid\":\"77e4fc.cc4b7b04\"}",
        "x": 220,
        "y": 1940,
        "wires": []
    },
    {
        "id": "792fa185.2e50e",
        "type": "link in",
        "z": "d75475bd.f0fa48",
        "name": "senseCapInflux",
        "links": [
            "d1b9d75b.287108"
        ],
        "x": 215,
        "y": 2440,
        "wires": [
            [
                "f176a108.7a96d"
            ]
        ]
    },
    {
        "id": "ec4ea8ca.192278",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 2020,
        "wires": []
    },
    {
        "id": "d1f232bf.2e32b",
        "type": "switch",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "property": "measurement",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "unknown",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 2140,
        "wires": [
            [],
            [
                "3ea5e0a2.fff2f",
                "d1b9d75b.287108"
            ]
        ]
    },
    {
        "id": "3095d40.96e032c",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "SenseCap Soil Test",
        "props": [
            {
                "p": "dev_id",
                "v": "hybiscus-soil",
                "vt": "str"
            },
            {
                "p": "hardware_serial",
                "v": "2CF7F12121000241",
                "vt": "str"
            },
            {
                "p": "counter",
                "v": "22",
                "vt": "num"
            },
            {
                "p": "app_id",
                "v": "edgewood-sensecap",
                "vt": "str"
            },
            {
                "p": "payload.messages",
                "v": "[{\"measurementId\":4102,\"measurementValue\":15.45,\"type\":\"report_telemetry\"},{\"measurementId\":4103,\"measurementValue\":12.6,\"type\":\"report_telemetry\"}]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 290,
        "y": 2280,
        "wires": [
            [
                "8657a89.5bf2358"
            ]
        ]
    },
    {
        "id": "8657a89.5bf2358",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 2320,
        "wires": []
    },
    {
        "id": "ec64246c.7d01b8",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "sense cap battery",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"app_id\":\"edgewood-sensecap\",\"dev_id\":\"hybiscus-lux\",\"hardware_serial\":\"2CF7F1212100000F\",\"port\":2,\"counter\":1,\"confirmed\":true,\"payload_raw\":[0,7,0,98,0,60,0,65,163],\"payload_fields\":{\"err\":0,\"messages\":[{\"battery\":98,\"type\":\"upload_battery\"},{\"interval\":3600,\"type\":\"upload_interval\"}],\"payload\":\"00070062003C0041A3\",\"valid\":true},\"metadata\":{\"time\":\"2021-01-11T23:28:27.250067801Z\",\"frequency\":904.7,\"modulation\":\"LORA\",\"data_rate\":\"SF7BW125\",\"airtime\":61696000,\"coding_rate\":\"4/5\",\"gateways\":[{\"gtw_id\":\"eui-00800000a000195a\",\"timestamp\":2026286595,\"time\":\"2021-01-11T23:28:27.198841Z\",\"channel\":4,\"rssi\":-35,\"snr\":9.8,\"rf_chain\":0,\"latitude\":45.1416,\"longitude\":-93.3749,\"altitude\":263},{\"gtw_id\":\"innatedgewood\",\"timestamp\":2832072051,\"time\":\"2021-01-11T23:58:26Z\",\"channel\":0,\"rssi\":-63,\"snr\":10,\"rf_chain\":0}]},\"payload\":{\"err\":0,\"messages\":[{\"battery\":98,\"type\":\"upload_battery\"},{\"interval\":3600,\"type\":\"upload_interval\"}],\"payload\":\"00070062003C0041A3\",\"valid\":true},\"_msgid\":\"c4e834b.4c677c8\"}",
        "payloadType": "json",
        "x": 290,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "8b5593e4.281de",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "report_remove_sensor",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"app_id\":\"edgewood-sensecap\",\"dev_id\":\"hybiscus-lux\",\"hardware_serial\":\"2CF7F1212100000F\",\"port\":2,\"counter\":2,\"confirmed\":true,\"payload_raw\":[1,32,1,0,0,0,0,241,17],\"payload_fields\":{\"err\":0,\"messages\":[{\"channel\":1,\"type\":\"report_remove_sensor\"}],\"payload\":\"01200100000000F111\",\"valid\":true},\"metadata\":{\"time\":\"2021-01-11T23:28:44.553442555Z\",\"frequency\":905.3,\"modulation\":\"LORA\",\"data_rate\":\"SF7BW125\",\"airtime\":56576000,\"coding_rate\":\"4/5\",\"gateways\":[{\"gtw_id\":\"innatedgewood\",\"timestamp\":2849375468,\"time\":\"2021-01-11T23:58:43Z\",\"channel\":0,\"rssi\":-52,\"snr\":9.75,\"rf_chain\":0},{\"gtw_id\":\"eui-00800000a000195a\",\"timestamp\":2043590012,\"time\":\"2021-01-11T23:28:44.50228Z\",\"channel\":7,\"rssi\":-35,\"snr\":10.8,\"rf_chain\":0,\"latitude\":45.14156,\"longitude\":-93.37495,\"altitude\":270}]},\"payload\":{\"err\":0,\"messages\":[{\"channel\":1,\"type\":\"report_remove_sensor\"}],\"payload\":\"01200100000000F111\",\"valid\":true},\"_msgid\":\"2c3f0a2b.725e46\"}",
        "payloadType": "json",
        "x": 300,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "fcfff78.d4acd08",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "Loop",
        "func": "let dev_id = msg.dev_id;\nlet hardware_serial = msg.hardware_serial;\nlet app_id = msg.app_id;\nlet counter = msg.counter;\nlet events = msg.payload.messages;\nlet influxMsg = [];\n\n/*\nTO Do...  when unknown_event is passed through to influxdb, it throws 400 bad request error.\nHow can I filter out using an array of bad events in my if statement most efficeintly?\nmap filter?\n\nlet exclusion_list = ['unknown_event', 'raw_data'];\n*/\ninfluxMsg.measurement = \"sense_cap\";\n\nfor (var i = 0 ; i < events.length; i++) {\n   if (events[i].measurementId === 4102 ) {\n        var temp_f = ((events[i].measurementValue * 9/5)+32)\n//        var temp_f = math.round((events[i].measurementValue * 9/5)+32)\n        influxMsg = [{\n            measurement: 'soil_temperature',\n            payload: [{\n            dev_id: dev_id,\n            dev_eui: hardware_serial,\n            msg_counter: counter,\n            n: 'soil_temperature',\n            u: 'Fah',\n            //v: temp_f.toFixed(2),\n            v: Number(temp_f.toFixed(2)),\n        },{\n            app_id: app_id,\n            device_id: dev_id,\n            event_name: 'soil_temperature'\n        }],}];\n        node.send(influxMsg);\n    } else {\n        if (events[i].measurementId === 4103 ) {\n        influxMsg = [{\n            measurement: 'soil_moisture',\n            payload: [{\n            dev_id: dev_id,\n            dev_eui: hardware_serial,\n            msg_counter: counter,\n            n: 'soil_moisture',\n            u: 'Moist',\n            v: events[i].measurementValue,\n        },{\n            app_id: app_id,\n            device_id: dev_id,\n            event_name: 'soil_moisture'\n        }],}];\n        node.send(influxMsg);\n    } else {\n        if (events[i].measurementId === 4099 ) {\n        influxMsg = [{\n            measurement: 'lux',\n            payload: [{\n            dev_id: dev_id,\n            dev_eui: hardware_serial,\n            msg_counter: counter,\n            n: 'lux',\n            u: 'lux',\n            v: events[i].measurementValue,\n        },{\n            app_id: app_id,\n            device_id: dev_id,\n            event_name: 'lux'\n        }],}];\n        node.send(influxMsg);\n    } else { \n        influxMsg = [{\n            measurement: 'unknown',\n            payload: [{\n            dev_id: dev_id,\n            dev_eui: hardware_serial,\n            msg_counter: counter,\n            n: 'unknown',\n            u: 'unknown',\n            v: events[i].measurementValue,\n        },{\n            app_id: app_id,\n            device_id: dev_id,\n            event_name: 'unknown'\n        }],}];\n        node.send(influxMsg);\n\n\n    }\n}}}    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 2140,
        "wires": [
            [
                "d1f232bf.2e32b"
            ]
        ]
    },
    {
        "id": "26b06e65.ab58b2",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "SenseCap Lux",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "app_id",
                "v": "edgewood-sensecap",
                "vt": "str"
            },
            {
                "p": "hardware_serial",
                "v": "2CF7F1212100000F",
                "vt": "str"
            },
            {
                "p": "dev_id",
                "v": "hybiscus-lux",
                "vt": "str"
            },
            {
                "p": "counter",
                "v": "7",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"err\":0,\"messages\":[{\"measurementId\":4099,\"measurementValue\":10.216,\"type\":\"report_telemetry\"}],\"payload\":\"010310E827000084F9\",\"valid\":true}",
        "payloadType": "json",
        "x": 280,
        "y": 2340,
        "wires": [
            [
                "8657a89.5bf2358"
            ]
        ]
    },
    {
        "id": "274e1a60.4cb306",
        "type": "comment",
        "z": "ec6d74c6.c4cc58",
        "name": "Dragino",
        "info": "",
        "x": 210,
        "y": 2700,
        "wires": []
    },
    {
        "id": "4ece4c52.2fc9b4",
        "type": "ttn uplink",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "app": "9e48d781.e8e798",
        "dev_id": "",
        "field": "",
        "x": 250,
        "y": 2860,
        "wires": [
            [
                "5aea7104.a14bb",
                "4fc88bb4.0d1614"
            ]
        ]
    },
    {
        "id": "5aea7104.a14bb",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 2900,
        "wires": []
    },
    {
        "id": "134aba9.a698645",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "app_id",
                "v": "app_id",
                "vt": "msg"
            },
            {
                "p": "dev_id",
                "v": "dev_id",
                "vt": "msg"
            },
            {
                "p": "hardware_serial",
                "v": "hardware_serial",
                "vt": "msg"
            },
            {
                "p": "counter",
                "v": "counter",
                "vt": "msg"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"Bat\":\"3.35 V\",\"TempC_DS18B20\":\"0.00 Â°C\",\"conduct_SOIL\":\"0 uS/cm\",\"temp_SOIL\":\"19.37 Â°C\",\"water_SOIL\":\"0.00 %\"}",
        "payloadType": "json",
        "x": 260,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "9ae41ebd.da686",
        "type": "link out",
        "z": "ec6d74c6.c4cc58",
        "name": "draginoOut",
        "links": [
            "672d5550.8cf3ac"
        ],
        "x": 555,
        "y": 2860,
        "wires": []
    },
    {
        "id": "4fc88bb4.0d1614",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "Loop",
        "func": "let dev_id = msg.dev_id;\nlet hardware_serial = msg.hardware_serial;\nlet app_id = msg.app_id;\nlet counter = msg.counter;\nlet events = msg.payload.events;\nlet influxMsg = {};\n\n\n/*\nTO Do...  when unknown_event is passed through to influxdb, it throws 400 bad request error.\nHow can I filter out using an array of bad events in my if statement most efficeintly?\nmap filter?\n\nlet exclusion_list = ['unknown_event', 'raw_data'];\n*/\ninfluxMsg.measurement = \"dragino\";\n//var influxMsg = [];\n\n//if (msg.payload.object.events[i].n === \"temperature\") {\n\n/*\n122719 bdb - Doing a couple things here intentionally:  \n\n1) Stripping off raw_data packets - Already caputring them in mongodb if needed.  \n2) defining influxdb measurement equal to the name of the event from the codec.\n3) defining events[i].n \n\n*/\n\n\nfor (var i = 0 ; i < events.length; i++) {\n    //if (events[i].n !=[\"raw_data\", \"unknown_event\"] ){\n    //if (events[i].n != \"raw_data\" || events[i].n != \"unknown_event\" ) {\n    if (events[i].n != \"temp_DS18B20\") {\n        influxMsg = [{\n            measurement: events[i].n,\n            payload: [{\n            dev_id: dev_id,\n            dev_eui: hardware_serial,\n            msg_counter: counter,\n            n: events[i].n,\n            u: events[i].u,\n            v: events[i].v,\n        },{\n            app_id: app_id,\n            device_id: dev_id,\n            event_name: events[i].n\n        }],}];\n        node.send(influxMsg);\n    } else {}\n}    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 450,
        "y": 2820,
        "wires": [
            [
                "810b4e17.dbcc1",
                "9ae41ebd.da686"
            ]
        ]
    },
    {
        "id": "810b4e17.dbcc1",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 2820,
        "wires": []
    },
    {
        "id": "672d5550.8cf3ac",
        "type": "link in",
        "z": "d75475bd.f0fa48",
        "name": "draginoInfluxIn",
        "links": [
            "9ae41ebd.da686"
        ],
        "x": 215,
        "y": 2560,
        "wires": [
            [
                "d200a480.6eebe8",
                "f176a108.7a96d"
            ]
        ]
    },
    {
        "id": "d200a480.6eebe8",
        "type": "debug",
        "z": "d75475bd.f0fa48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 2580,
        "wires": []
    },
    {
        "id": "284ffe0f.351742",
        "type": "link in",
        "z": "d75475bd.f0fa48",
        "name": "stepsInflux",
        "links": [
            "b0fefa1b.c9ef88"
        ],
        "x": 215,
        "y": 3420,
        "wires": [
            [
                "d0f6a3de.7a94e"
            ]
        ]
    },
    {
        "id": "d0f6a3de.7a94e",
        "type": "influxdb out",
        "z": "d75475bd.f0fa48",
        "influxdb": "e81e7427.232dd8",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 500,
        "y": 3420,
        "wires": []
    },
    {
        "id": "1e23db74.0064b5",
        "type": "comment",
        "z": "d75475bd.f0fa48",
        "name": "Home Assistant",
        "info": "",
        "x": 260,
        "y": 3280,
        "wires": []
    },
    {
        "id": "5d6d1e9a.927d3",
        "type": "inject",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"app_id\":\"edgewood-dragino\",\"dev_id\":\"soil-01\",\"hardware_serial\":\"A84041EDC1828B08\",\"port\":2,\"counter\":1789,\"payload_raw\":[12,247,0,0,3,167,5,95,0,49,0],\"payload_fields\":{\"Bat\":\"3.319 V\",\"TempC_DS18B20\":\"0.00 Â°C\",\"conduct_SOIL\":\"49 uS/cm\",\"events\":[{\"n\":\"battery_voltage\",\"u\":\"V\",\"v\":3.319},{\"n\":\"temp_DS18B20\",\"u\":\"Â°C\",\"v\":\"0.00\"},{\"n\":\"soil_moisture\",\"u\":\"%\",\"v\":\"9.35\"},{\"n\":\"soil_temperature\",\"u\":\"Fah\",\"v\":\"13.75\"},{\"n\":\"soil_conductivity\",\"u\":\"°uS/cm\",\"v\":49}],\"temp_SOIL\":\"13.75 Â°C\",\"water_SOIL\":\"9.35 %\"},\"metadata\":{\"time\":\"2021-02-06T14:51:07.202975341Z\",\"frequency\":905.1,\"modulation\":\"LORA\",\"data_rate\":\"SF7BW125\",\"airtime\":61696000,\"coding_rate\":\"4/5\",\"gateways\":[{\"gtw_id\":\"eui-00800000a000195a\",\"timestamp\":1966705068,\"time\":\"\",\"channel\":6,\"rssi\":-51,\"snr\":6.8,\"rf_chain\":0,\"latitude\":45.14162,\"longitude\":-93.37475,\"altitude\":272},{\"gtw_id\":\"innatedgewood\",\"timestamp\":1986113228,\"time\":\"2021-02-06T15:23:21Z\",\"channel\":0,\"rssi\":-76,\"snr\":8.25,\"rf_chain\":0}]},\"payload\":{\"Bat\":\"3.319 V\",\"TempC_DS18B20\":\"0.00 Â°C\",\"conduct_SOIL\":\"49 uS/cm\",\"events\":[{\"n\":\"battery_voltage\",\"u\":\"V\",\"v\":3.319},{\"n\":\"temp_DS18B20\",\"u\":\"Â°C\",\"v\":\"0.00\"},{\"n\":\"soil_moisture\",\"u\":\"%\",\"v\":\"9.35\"},{\"n\":\"soil_temperature\",\"u\":\"Fah\",\"v\":\"13.75\"},{\"n\":\"soil_conductivity\",\"u\":\"°uS/cm\",\"v\":49}],\"temp_SOIL\":\"13.75 Â°C\",\"water_SOIL\":\"9.35 %\"},\"_msgid\":\"bf3172d2.2a428\"}",
        "payloadType": "json",
        "x": 260,
        "y": 3040,
        "wires": [
            [
                "664c7719.34dfd8",
                "9c9e2e91.2b719"
            ]
        ]
    },
    {
        "id": "664c7719.34dfd8",
        "type": "function",
        "z": "ec6d74c6.c4cc58",
        "name": "Loop",
        "func": "let dev_id = msg.payload.dev_id;\nlet hardware_serial = msg.payload.hardware_serial;\nlet app_id = msg.payload.app_id;\nlet counter = msg.payload.counter;\nlet events = msg.payload.payload.events;\nlet influxMsg = {};\n\n\n/*\nTO Do...  when unknown_event is passed through to influxdb, it throws 400 bad request error.\nHow can I filter out using an array of bad events in my if statement most efficeintly?\nmap filter?\n\nlet exclusion_list = ['unknown_event', 'raw_data'];\n*/\ninfluxMsg.measurement = \"radio_bridge\";\n//var influxMsg = [];\n\n//if (msg.payload.object.events[i].n === \"temperature\") {\n\n/*\n122719 bdb - Doing a couple things here intentionally:  \n\n1) Stripping off raw_data packets - Already caputring them in mongodb if needed.  \n2) defining influxdb measurement equal to the name of the event from the codec.\n3) defining events[i].n \n\n*/\n\n\nfor (var i = 0 ; i < events.length; i++) {\n    //if (events[i].n !=[\"raw_data\", \"unknown_event\"] ){\n    //if (events[i].n != \"raw_data\" || events[i].n != \"unknown_event\" ) {\n    if (events[i].n != \"temp_DS18B20\") {\n        influxMsg = [{\n            measurement: events[i].n,\n            payload: [{\n            dev_id: dev_id,\n            dev_eui: hardware_serial,\n            msg_counter: counter,\n            n: events[i].n,\n            u: events[i].u,\n            v: Number(events[i].v),\n        },{\n            app_id: app_id,\n            device_id: dev_id,\n            event_name: events[i].n\n        }],}];\n        node.send(influxMsg);\n    } else {}\n}    \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 3040,
        "wires": [
            [
                "ca6c2c2c.67033"
            ]
        ]
    },
    {
        "id": "ca6c2c2c.67033",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 3040,
        "wires": []
    },
    {
        "id": "9c9e2e91.2b719",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 3100,
        "wires": []
    },
    {
        "id": "ff229a34.138258",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3800,
        "y": 2360,
        "wires": [
            [
                "cb1d8ce5.a7a4b"
            ]
        ]
    },
    {
        "id": "cb1d8ce5.a7a4b",
        "type": "influxdb in",
        "z": "d75475bd.f0fa48",
        "influxdb": "1adb25b4.af776a",
        "name": "",
        "query": "select * from GPS_survey where latitude != 0",
        "rawOutput": false,
        "precision": "n",
        "retentionPolicy": "",
        "org": "organisation",
        "x": 4080,
        "y": 2360,
        "wires": [
            [
                "8322b82d.8491c8"
            ]
        ]
    },
    {
        "id": "d6409b4c.faef08",
        "type": "delay",
        "z": "d75475bd.f0fa48",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 4510,
        "y": 2360,
        "wires": [
            [
                "7f135e03.c20b8"
            ]
        ]
    },
    {
        "id": "8322b82d.8491c8",
        "type": "bigsplitter",
        "z": "d75475bd.f0fa48",
        "name": "",
        "property": "payload",
        "x": 4340,
        "y": 2360,
        "wires": [
            [
                "d6409b4c.faef08"
            ],
            []
        ]
    },
    {
        "id": "7f135e03.c20b8",
        "type": "mqtt out",
        "z": "d75475bd.f0fa48",
        "name": "Survey to GCP",
        "topic": "survey_sweep",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "87dccc93.0a5e1",
        "x": 4720,
        "y": 2360,
        "wires": []
    },
    {
        "id": "b2370270.987d3",
        "type": "inject",
        "z": "d75475bd.f0fa48",
        "name": "RESET",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 4340,
        "y": 2460,
        "wires": [
            [
                "d6409b4c.faef08"
            ]
        ]
    },
    {
        "id": "50ba55a4.dcad2c",
        "type": "mqtt in",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "topic": "ttn",
        "qos": "2",
        "datatype": "auto",
        "broker": "87dccc93.0a5e1",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 110,
        "y": 460,
        "wires": [
            [
                "82896f0a.1ab76"
            ]
        ]
    },
    {
        "id": "82896f0a.1ab76",
        "type": "json",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 240,
        "y": 460,
        "wires": [
            [
                "db2a682.3f96e98"
            ]
        ]
    },
    {
        "id": "db2a682.3f96e98",
        "type": "debug",
        "z": "ec6d74c6.c4cc58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 390,
        "y": 420,
        "wires": []
    },
    {
        "id": "7b4e167f.875698",
        "type": "inject",
        "z": "d785d216.3d84",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1820,
        "wires": [
            [
                "82756c06.98923"
            ]
        ]
    },
    {
        "id": "82756c06.98923",
        "type": "function",
        "z": "d785d216.3d84",
        "name": "",
        "func": "//soil sensor\n//let eui = '2CF7F12121000241';\n//let key = 'EA165D97D0112C9B';\n\n//lux sensor\nlet eui = '2CF7F1212100000F';\nlet key = '4D92D35369E71B95';\n\n\nmsg.url = 'https://sensecap.seeed.cc/makerapi/device/view_device_info?nodeEui='+eui+'&deviceCode='+key;\nmsg.method = 'GET';\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 1820,
        "wires": [
            [
                "1c720bcb.75a804"
            ]
        ]
    },
    {
        "id": "1c720bcb.75a804",
        "type": "http request",
        "z": "d785d216.3d84",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 510,
        "y": 1820,
        "wires": [
            [
                "784501ce.99fae",
                "ad226169.ff0c4"
            ]
        ]
    },
    {
        "id": "2db9495a.7adc16",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1820,
        "wires": []
    },
    {
        "id": "784501ce.99fae",
        "type": "json",
        "z": "d785d216.3d84",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 1820,
        "wires": [
            [
                "2db9495a.7adc16"
            ]
        ]
    },
    {
        "id": "ad226169.ff0c4",
        "type": "debug",
        "z": "d785d216.3d84",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1760,
        "wires": []
    },
    {
        "id": "cd530761.8b7798",
        "type": "comment",
        "z": "d785d216.3d84",
        "name": "Get SenseCAP Keys",
        "info": "",
        "x": 170,
        "y": 1680,
        "wires": []
    }
]